openapi: "3.1.0"
info:
  title: "partners_connect API"
  description: |
    Partners Connect API for managing developer event partnerships and sponsorships.
    
    ## Error Handling
    
    This API implements a structured error response system that provides consistent error information for better client-side handling and internationalization support.
    
    ### Response Format
    
    The API supports two response formats based on the client's Accept header:
    
    - **JSON Response** (when `Accept: application/json`): Returns structured error objects with error codes, HTTP status, and metadata
    - **Text Response** (default): Returns plain text error messages for backward compatibility
    
    ### JSON Error Response Structure
    
    ```json
    {
      "code": "ERROR_CODE_NAME",
      "status": 400,
      "meta": {
        "field": "additional_info",
        "context": "more_details"
      }
    }
    ```
    
    ### Error Code Categories
    
    - **Authentication/Authorization**: `UNAUTHORIZED`, `TOKEN_MISSING`, `FORBIDDEN`, `NO_EDIT_PERMISSION`
    - **Validation**: `BAD_REQUEST`, `INVALID_UUID_FORMAT`, `MISSING_REQUIRED_PARAMETER`
    - **Not Found**: `NOT_FOUND`, `EVENT_NOT_FOUND`, `PARTNERSHIP_NOT_FOUND`, `COMPANY_NOT_FOUND`, etc.
    - **Business Logic**: `PARTNERSHIP_ALREADY_EXISTS`, `INVALID_PARTNERSHIP_STATUS`
    - **System**: `INTERNAL_SERVER_ERROR`, `UNSUPPORTED_MEDIA_TYPE`
    
    ### Client Implementation Guide
    
    API consumers are responsible for mapping error codes to user-facing messages and implementing internationalization. The structured error codes enable:
    
    1. **Granular Error Handling**: Different client behaviors based on specific error types
    2. **Internationalization**: Map error codes to localized messages
    3. **Enhanced UX**: Use metadata for contextual error information
  version: "1.0.0"
servers:
  - url: "https://partners_connect"
paths:
  /auth/callback:
    get:
      description: "OAuth callback endpoint"
      responses:
        "404":
          description: "Not Found - Invalid OAuth state"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                invalid_state:
                  summary: "Invalid OAuth state"
                  value:
                    code: "NOT_FOUND"
                    status: 404
                    meta:
                      state: "invalid_state_value"
            text/plain:
              schema:
                type: "string"
              example: "404 Not Found"
        "302":
          description: "Found - Redirect after successful authentication"
          content:
            text/plain:
              schema:
                type: "string"
        "200":
          description: "OK - Authentication successful, returns session"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSession"
  /auth/login:
    get:
      description: "Start OAuth login flow - redirects to Google OAuth"
      responses:
        "302":
          description: "Redirect to OAuth provider"
  /auth/logout:
    get:
      description: "Logout and clear session"
      responses:
        "204":
          description: "No Content - Successfully logged out"
  /auth/me:
    get:
      description: "Get current user information"
      responses:
        "401":
          description: "Unauthorized - No valid session"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                missing_token:
                  summary: "Missing authentication token"
                  value:
                    code: "UNAUTHORIZED"
                    status: 401
                    meta:
                      header: "Authorization"
                      method: "Bearer token or session"
            text/plain:
              schema:
                type: "string"
              example: "401 Unauthorized"
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfo"
  /companies:
    get:
      description: ""
      parameters:
        - name: "query"
          in: "query"
          required: false
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Company"
    post:
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCompany"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
  /companies/{companyId}/logo:
    post:
      description: "Upload a logo for a company"
      parameters:
        - name: "companyId"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: "Logo file (SVG, PNG, or JPEG)"
        required: true
      responses:
        "400":
          description: "Bad Request - Invalid company ID or unsupported file type"
          content:
            text/plain:
              schema:
                type: "string"
        "200":
          description: "OK - Logo uploaded successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Media"
  /companies/{companyId}/partnership:
    get:
      description: ""
      parameters:
        - name: "companyId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/PartnershipItem"
  /events:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/EventSummary"
  /events/{eventSlug}:
    get:
      description: "Get event details with organization information"
      parameters:
        - name: "eventSlug"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "The slug identifier of the event"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventWithOrganisation"
  /events/{eventSlug}/partnership:
    post:
      description: ""
      parameters:
        - name: "eventSlug"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterPartnership"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
  /events/{eventSlug}/partnership/{partnershipId}/billing:
    get:
      description: ""
      parameters:
        - name: "eventSlug"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "partnershipId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CompanyBillingData"
    post:
      description: ""
      parameters:
        - name: "eventSlug"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "partnershipId"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompanyBillingData"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
    put:
      description: ""
      parameters:
        - name: "eventSlug"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "partnershipId"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompanyBillingData"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
  /events/{eventSlug}/partnership/{partnershipId}/billing/invoice:
    post:
      description: ""
      parameters:
        - name: "eventSlug"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "partnershipId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
  /events/{eventSlug}/partnership/{partnershipId}/billing/quote:
    post:
      description: ""
      parameters:
        - name: "eventSlug"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "partnershipId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
  /events/{eventSlug}/partnership/{partnershipId}/signed-agreement:
    post:
      description: "Upload a signed partnership agreement"
      parameters:
        - name: "eventSlug"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "partnershipId"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: "Signed agreement PDF file"
        required: true
      responses:
        "400":
          description: "Bad Request - Invalid file type or missing parameters"
          content:
            text/plain:
              schema:
                type: "string"
        "200":
          description: "OK - Signed agreement uploaded successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Map_String"
  /events/{eventSlug}/partnership/{partnershipId}/suggestion-approve:
    post:
      description: ""
      parameters:
        - name: "eventSlug"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "partnershipId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
  /events/{eventSlug}/partnership/{partnershipId}/suggestion-decline:
    post:
      description: ""
      parameters:
        - name: "eventSlug"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "partnershipId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
  /events/{eventSlug}/partnership/{partnershipId}/tickets:
    get:
      description: ""
      parameters:
        - name: "partnershipId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "eventSlug"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Ticket"
    post:
      description: ""
      parameters:
        - name: "eventSlug"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "partnershipId"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              type: "array"
              items:
                $ref: "#/components/schemas/TicketData"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TicketOrder"
  /events/{eventSlug}/partnership/{partnershipId}/tickets/{ticketId}:
    put:
      description: ""
      parameters:
        - name: "eventSlug"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "partnershipId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "ticketId"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TicketData"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Ticket"
  /providers:
    get:
      description: "List all providers with optional filtering and sorting"
      parameters:
        - name: "query"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Search providers by name (case-insensitive)"
        - name: "sort"
          in: "query"
          required: false
          schema:
            type: "string"
            enum: ["name", "createdAt", "creation", "created"]
            default: "createdAt"
          description: "Sort by field (default: createdAt)"
        - name: "direction"
          in: "query"
          required: false
          schema:
            type: "string"
            enum: ["asc", "desc"]
            default: "asc"
          description: "Sort direction (default: asc)"
      responses:
        "200":
          description: "OK - List of providers"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Provider"
    post:
      description: "Create a new provider (requires authentication and organizer status)"
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProvider"
        required: true
      responses:
        "201":
          description: "Created - Provider created successfully"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  id:
                    type: "string"
                    format: "uuid"
                    description: "UUID of the created provider"
                required:
                  - "id"
        "400":
          description: "Bad Request - Invalid input data"
          content:
            text/plain:
              schema:
                type: "string"
        "401":
          description: "Unauthorized - Missing or invalid authentication"
          content:
            text/plain:
              schema:
                type: "string"
        "403":
          description: "Forbidden - User is not an organizer of any event"
          content:
            text/plain:
              schema:
                type: "string"
  /orgs:
    post:
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Organisation"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
  /orgs/{slug}:
    get:
      description: ""
      parameters:
        - name: "slug"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Organisation"
  /orgs/{orgSlug}:
    put:
      description: ""
      parameters:
        - name: "orgSlug"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Organisation"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "401":
          description: "Unauthorized"
          content:
            text/plain:
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Organisation"
  /orgs/{orgSlug}/events:
    get:
      description: "List events for an organization"
      parameters:
        - name: "orgSlug"
          in: "path"
          required: true
          schema:
            type: "string"
      security:
        - bearerAuth: []
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "401":
          description: "Unauthorized"
          content:
            text/plain:
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/EventSummary"
    post:
      description: "Create a new event for an organization"
      parameters:
        - name: "orgSlug"
          in: "path"
          required: true
          schema:
            type: "string"
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "401":
          description: "Unauthorized"
          content:
            text/plain:
              schema:
                type: "string"
        "201":
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Map_String"
  /orgs/{orgSlug}/events/{eventSlug}:
    put:
      description: ""
      parameters:
        - name: "orgSlug"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "eventSlug"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
  /orgs/{orgSlug}/events/{eventSlug}/booth-plan:
    post:
      description: "Upload booth plan image for an event"
      parameters:
        - name: "orgSlug"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "eventSlug"
          in: "path"
          required: true
          schema:
            type: "string"
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: "Booth plan image file (PNG, JPEG, GIF)"
        required: true
      responses:
        "400":
          description: "Bad Request - Invalid event slug or missing file"
          content:
            text/plain:
              schema:
                type: "string"
        "401":
          description: "Unauthorized"
          content:
            text/plain:
              schema:
                type: "string"
        "415":
          description: "Unsupported Media Type - Invalid file format"
          content:
            text/plain:
              schema:
                type: "string"
        "201":
          description: "Created - Booth plan image uploaded successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    description: "URL of the uploaded booth plan image"
                required:
                  - "url"
  /orgs/{orgSlug}/events/{eventSlug}/integrations/{provider}/{usage}:
    post:
      description: "Register an integration for an event"
      parameters:
        - name: "eventSlug"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "usage"
          in: "path"
          required: true
          schema:
            type: "string"
            enum: ["BILLING", "MAILING", "TICKETING"]
        - name: "provider"
          in: "path"
          required: true
          schema:
            type: "string"
            enum: ["QONTO", "MAILJET", "BILLETWEB"]
        - name: "orgSlug"
          in: "path"
          required: true
          schema:
            type: "string"
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              description: "Integration configuration data"
        required: true
      responses:
        "400":
          description: "Bad Request - Invalid provider, usage, or configuration"
          content:
            text/plain:
              schema:
                type: "string"
        "401":
          description: "Unauthorized"
          content:
            text/plain:
              schema:
                type: "string"
        "201":
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Map_String"
  /orgs/{orgSlug}/events/{eventSlug}/options:
    get:
      description: "List sponsoring options for an event"
      parameters:
        - name: "eventSlug"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "Accept-Language"
          in: "header"
          required: false
          schema:
            type: "string"
            default: "en"
        - name: "orgSlug"
          in: "path"
          required: true
          schema:
            type: "string"
      security:
        - bearerAuth: []
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "401":
          description: "Unauthorized"
          content:
            text/plain:
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/SponsoringOption"
    post:
      description: "Create a new sponsoring option"
      parameters:
        - name: "eventSlug"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "orgSlug"
          in: "path"
          required: true
          schema:
            type: "string"
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSponsoringOption"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "401":
          description: "Unauthorized"
          content:
            text/plain:
              schema:
                type: "string"
        "201":
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Map_String"
  /orgs/{orgSlug}/events/{eventSlug}/options/{optionId}:
    delete:
      description: ""
      parameters:
        - name: "eventSlug"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "optionId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "orgSlug"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "204":
          description: "No Content"
          content:
            '*/*':
              schema:
                type: "object"
    put:
      description: ""
      parameters:
        - name: "eventSlug"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "optionId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "orgSlug"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSponsoringOption"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
  /orgs/{orgSlug}/events/{eventSlug}/packs:
    get:
      description: "List sponsoring packs for an event"
      parameters:
        - name: "eventSlug"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "Accept-Language"
          in: "header"
          required: false
          schema:
            type: "string"
            default: "en"
        - name: "orgSlug"
          in: "path"
          required: true
          schema:
            type: "string"
      security:
        - bearerAuth: []
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "401":
          description: "Unauthorized"
          content:
            text/plain:
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/SponsoringPack"
    post:
      description: "Create a new sponsoring pack"
      parameters:
        - name: "eventSlug"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "orgSlug"
          in: "path"
          required: true
          schema:
            type: "string"
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSponsoringPack"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "401":
          description: "Unauthorized"
          content:
            text/plain:
              schema:
                type: "string"
        "201":
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Map_String"
  /orgs/{orgSlug}/events/{eventSlug}/packs/{packId}:
    delete:
      description: ""
      parameters:
        - name: "eventSlug"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "packId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "orgSlug"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "204":
          description: "No Content"
          content:
            '*/*':
              schema:
                type: "object"
    put:
      description: ""
      parameters:
        - name: "eventSlug"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "packId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "orgSlug"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSponsoringPack"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
  /orgs/{orgSlug}/events/{eventSlug}/packs/{packId}/options:
    post:
      description: ""
      parameters:
        - name: "eventSlug"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "packId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "orgSlug"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttachOptionsToPack"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                type: "object"
  /orgs/{orgSlug}/events/{eventSlug}/packs/{packId}/options/{optionId}:
    delete:
      description: ""
      parameters:
        - name: "eventSlug"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "packId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "optionId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "orgSlug"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "204":
          description: "No Content"
          content:
            '*/*':
              schema:
                type: "object"
  /orgs/{orgSlug}/events/{eventSlug}/communication:
    get:
      description: "Get communication plan for all partnerships of an event, grouped by status"
      parameters:
        - name: "orgSlug"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "Organization slug"
        - name: "eventSlug"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "Event slug"
      security:
        - bearerAuth: []
      responses:
        "400":
          description: "Bad Request - Missing or invalid parameters"
          content:
            text/plain:
              schema:
                type: "string"
        "401":
          description: "Unauthorized"
          content:
            text/plain:
              schema:
                type: "string"
        "404":
          description: "Not Found - Event not found"
          content:
            text/plain:
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommunicationPlan"
  /orgs/{orgSlug}/events/{eventSlug}/external-link:
    post:
      description: "Attach a new external link to an event"
      parameters:
        - name: "orgSlug"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "eventSlug"
          in: "path"
          required: true
          schema:
            type: "string"
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                name:
                  type: "string"
                  description: "Display name for the external link"
                  example: "Call for Papers"
                url:
                  type: "string"
                  format: "uri"
                  description: "URL of the external resource (must start with http:// or https://)"
                  example: "https://sessionize.com/devlille2025"
              required:
                - "name"
                - "url"
        required: true
      responses:
        "400":
          description: "Bad Request - Invalid input or validation error"
          content:
            text/plain:
              schema:
                type: "string"
        "401":
          description: "Unauthorized - Authentication required"
          content:
            text/plain:
              schema:
                type: "string"
        "404":
          description: "Not Found - Event or organization not found"
          content:
            text/plain:
              schema:
                type: "string"
        "201":
          description: "Created - External link created successfully"
          content:
            text/plain:
              schema:
                type: "string"
                format: "uuid"
                description: "UUID of the created external link"
  /orgs/{orgSlug}/events/{eventSlug}/external-link/{linkId}:
    delete:
      description: "Remove an external link by its ID"
      parameters:
        - name: "orgSlug"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "eventSlug"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "linkId"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
            description: "UUID of the external link to delete"
      security:
        - bearerAuth: []
      responses:
        "400":
          description: "Bad Request - Invalid UUID format"
          content:
            text/plain:
              schema:
                type: "string"
        "401":
          description: "Unauthorized - Authentication required"
          content:
            text/plain:
              schema:
                type: "string"
        "404":
          description: "Not Found - External link, event or organization not found"
          content:
            text/plain:
              schema:
                type: "string"
        "204":
          description: "No Content - External link deleted successfully"
  /orgs/{orgSlug}/events/{eventSlug}/partnership:
    get:
      description: "List partnerships for an event with filtering options"
      parameters:
        - name: "eventSlug"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "filter[pack_id]"
          in: "query"
          required: false
          schema:
            type: "string"
          description: "Filter by sponsoring pack ID"
        - name: "filter[validated]"
          in: "query"
          required: false
          schema:
            type: "boolean"
          description: "Filter by validation status"
        - name: "filter[suggestion]"
          in: "query"
          required: false
          schema:
            type: "boolean"
          description: "Filter by suggestion status"
        - name: "filter[paid]"
          in: "query"
          required: false
          schema:
            type: "boolean"
          description: "Filter by payment status"
        - name: "filter[agreement-generated]"
          in: "query"
          required: false
          schema:
            type: "boolean"
          description: "Filter by agreement generation status"
        - name: "filter[agreement-signed]"
          in: "query"
          required: false
          schema:
            type: "boolean"
          description: "Filter by agreement signature status"
        - name: "sort"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "created"
            enum: ["created", "updated"]
          description: "Sort field"
        - name: "direction"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "asc"
            enum: ["asc", "desc"]
          description: "Sort direction"
        - name: "orgSlug"
          in: "path"
          required: true
          schema:
            type: "string"
      security:
        - bearerAuth: []
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "401":
          description: "Unauthorized"
          content:
            text/plain:
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/PartnershipItem"
  /orgs/{orgSlug}/events/{eventSlug}/partnership/{partnershipId}/agreement:
    post:
      description: "Generate a partnership agreement PDF"
      parameters:
        - name: "eventSlug"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "partnershipId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "orgSlug"
          in: "path"
          required: true
          schema:
            type: "string"
      security:
        - bearerAuth: []
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "401":
          description: "Unauthorized"
          content:
            text/plain:
              schema:
                type: "string"
        "200":
          description: "OK - Agreement generated successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    description: "URL to the generated agreement PDF"
                required:
                  - "url"
  /orgs/{orgSlug}/events/{eventSlug}/partnership/{partnershipId}/billing/{billingStatus}:
    post:
      description: ""
      parameters:
        - name: "eventSlug"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "partnershipId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "billingStatus"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "orgSlug"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
  /orgs/{orgSlug}/events/{eventSlug}/partnership/{partnershipId}/booth-location:
    put:
      description: "Assign booth location to a partnership"
      parameters:
        - name: "orgSlug"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "eventSlug"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "partnershipId"
          in: "path"
          required: true
          schema:
            type: "string"
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BoothLocationRequest"
        required: true
      responses:
        "400":
          description: "Bad Request - Invalid parameters or empty location"
          content:
            text/plain:
              schema:
                type: "string"
        "401":
          description: "Unauthorized"
          content:
            text/plain:
              schema:
                type: "string"
        "403":
          description: "Forbidden - Booth location already assigned to another partnership"
          content:
            text/plain:
              schema:
                type: "string"
        "404":
          description: "Not Found - Partnership or event not found"
          content:
            text/plain:
              schema:
                type: "string"
        "200":
          description: "OK - Booth location assigned successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BoothLocationResponse"
  /orgs/{orgSlug}/events/{eventSlug}/partnership/{partnershipId}/suggestion:
    post:
      description: ""
      parameters:
        - name: "eventSlug"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "partnershipId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "orgSlug"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SuggestPartnership"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Map_String"
  /orgs/{orgSlug}/events/{eventSlug}/partnership/{partnershipId}/validate:
    post:
      description: "Validate a partnership request"
      parameters:
        - name: "eventSlug"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "partnershipId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "orgSlug"
          in: "path"
          required: true
          schema:
            type: "string"
      security:
        - bearerAuth: []
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "401":
          description: "Unauthorized"
          content:
            text/plain:
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Map_String"
  /orgs/{orgSlug}/events/{eventSlug}/partnership/{partnershipId}/decline:
    post:
      description: "Decline a partnership request"
      parameters:
        - name: "eventSlug"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "partnershipId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "orgSlug"
          in: "path"
          required: true
          schema:
            type: "string"
      security:
        - bearerAuth: []
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "401":
          description: "Unauthorized"
          content:
            text/plain:
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Map_String"
  /orgs/{orgSlug}/events/{eventSlug}/partnership/{partnershipId}/communication/publication:
    put:
      description: "Schedule publication date for partnership communication"
      parameters:
        - name: "orgSlug"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "eventSlug"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "partnershipId"
          in: "path"
          required: true
          schema:
            type: "string"
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PublicationDateRequest"
        required: true
      responses:
        "400":
          description: "Bad Request - Invalid date format or missing parameters"
          content:
            text/plain:
              schema:
                type: "string"
        "401":
          description: "Unauthorized"
          content:
            text/plain:
              schema:
                type: "string"
        "404":
          description: "Not Found - Partnership not found"
          content:
            text/plain:
              schema:
                type: "string"
        "200":
          description: "OK - Publication date scheduled successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublicationDateResponse"
  /orgs/{orgSlug}/events/{eventSlug}/partnership/{partnershipId}/communication/support:
    put:
      description: "Upload visual support material for partnership communication"
      parameters:
        - name: "orgSlug"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "eventSlug"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "partnershipId"
          in: "path"
          required: true
          schema:
            type: "string"
      security:
        - bearerAuth: []
      requestBody:
        content:
          image/png:
            schema:
              type: string
              format: binary
          image/jpeg:
            schema:
              type: string
              format: binary
          image/gif:
            schema:
              type: string
              format: binary
          image/svg+xml:
            schema:
              type: string
              format: binary
          image/webp:
            schema:
              type: string
              format: binary
        required: true
      responses:
        "400":
          description: "Bad Request - Missing parameters or empty content"
          content:
            text/plain:
              schema:
                type: "string"
        "401":
          description: "Unauthorized"
          content:
            text/plain:
              schema:
                type: "string"
        "404":
          description: "Not Found - Partnership not found"
          content:
            text/plain:
              schema:
                type: "string"
        "415":
          description: "Unsupported Media Type - Invalid image format"
          content:
            text/plain:
              schema:
                type: "string"
        "200":
          description: "OK - Visual support uploaded successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SupportUploadResponse"
  /orgs/{orgSlug}/events/{eventSlug}/providers:
    post:
      description: "Attach providers to an event (requires event write access)"
      security:
        - bearerAuth: []
      parameters:
        - name: "orgSlug"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "Organization slug"
        - name: "eventSlug"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "Event slug"
      requestBody:
        content:
          application/json:
            schema:
              type: "array"
              items:
                type: "string"
                format: "uuid"
              description: "List of provider UUIDs to attach"
        required: true
      responses:
        "200":
          description: "OK - Providers attached successfully"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "string"
                  format: "uuid"
                description: "List of successfully attached provider UUIDs"
        "400":
          description: "Bad Request - Invalid provider IDs or empty list"
          content:
            text/plain:
              schema:
                type: "string"
        "401":
          description: "Unauthorized - Missing or invalid authentication"
          content:
            text/plain:
              schema:
                type: "string"
        "403":
          description: "Forbidden - No write access to the event"
          content:
            text/plain:
              schema:
                type: "string"
        "404":
          description: "Not Found - Event or organization not found"
          content:
            text/plain:
              schema:
                type: "string"
    delete:
      description: "Remove providers from an event (requires event write access)"
      security:
        - bearerAuth: []
      parameters:
        - name: "orgSlug"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "Organization slug"
        - name: "eventSlug"
          in: "path"
          required: true
          schema:
            type: "string"
          description: "Event slug"
      requestBody:
        content:
          application/json:
            schema:
              type: "array"
              items:
                type: "string"
                format: "uuid"
              description: "List of provider UUIDs to remove"
        required: true
      responses:
        "200":
          description: "OK - Providers detached successfully"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "string"
                  format: "uuid"
                description: "List of successfully detached provider UUIDs"
        "400":
          description: "Bad Request - Invalid provider IDs or empty list"
          content:
            text/plain:
              schema:
                type: "string"
        "401":
          description: "Unauthorized - Missing or invalid authentication"
          content:
            text/plain:
              schema:
                type: "string"
        "403":
          description: "Forbidden - No write access to the event"
          content:
            text/plain:
              schema:
                type: "string"
        "404":
          description: "Not Found - Event or organization not found"
          content:
            text/plain:
              schema:
                type: "string"
  /orgs/{orgSlug}/users:
    get:
      description: ""
      parameters:
        - name: "orgSlug"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
  /orgs/{orgSlug}/users/grant:
    post:
      description: ""
      parameters:
        - name: "orgSlug"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GrantPermissionRequest"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "401":
          description: "Unauthorized"
          content:
            text/plain:
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Permissions granted"
  /users/me/events:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/EventSummary"
  /users/me/orgs:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/OrganisationItem"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Authentication token obtained through OAuth flow"
  schemas:
    ErrorResponse:
      type: "object"
      description: "Structured error response object returned when Accept: application/json"
      properties:
        code:
          type: "string"
          description: "Specific error code for programmatic handling and internationalization"
          enum:
            - "BAD_REQUEST"
            - "MISSING_REQUIRED_PARAMETER"
            - "UNSUPPORTED_MEDIA_TYPE"
            - "UNAUTHORIZED"
            - "TOKEN_MISSING"
            - "FORBIDDEN"
            - "NO_EDIT_PERMISSION"
            - "USER_NOT_FOUND"
            - "ORGANISATION_NOT_FOUND"
            - "EVENT_NOT_FOUND"
            - "COMPANY_NOT_FOUND"
            - "PARTNERSHIP_NOT_FOUND"
            - "TICKETS_NOT_FOUND"
            - "PROVIDER_NOT_FOUND"
            - "BILLING_NOT_FOUND"
            - "VALIDATED_PACK_NOT_FOUND"
            - "EXTERNAL_LINK_NOT_FOUND"
            - "INTEGRATION_NOT_FOUND"
            - "TRANSLATION_NOT_FOUND"
            - "PARTNERSHIP_ALREADY_EXISTS"
            - "MULTIPLE_INTEGRATIONS_FOUND"
            - "BILLING_PROCESSING_ERROR"
            - "TICKET_GENERATION_ERROR"
            - "FILE_NOT_FOUND"
            - "INTERNAL_SERVER_ERROR"
            - "ENTITY_NOT_FOUND"
        status:
          type: "integer"
          description: "HTTP status code"
          example: 400
        meta:
          type: "object"
          description: "Additional contextual information about the error"
          additionalProperties:
            type: "string"
          example:
            resource: "event"
            field: "title"
            action: "create"
      required:
        - "code"
        - "status"
        - "meta"
      example:
        code: "EVENT_NOT_FOUND"
        status: 404
        meta:
          eventId: "12345"
          slug: "nonexistent-event"
    UserSession:
      type: "object"
      properties:
        state:
          type: "string"
        token:
          type: "string"
      required:
        - "state"
        - "token"
    UserInfo:
      type: "object"
      properties:
        displayName:
          type: "string"
        pictureUrl:
          type: "string"
          nullable: true
        email:
          type: "string"
      required:
        - "displayName"
        - "email"
    Address:
      type: "object"
      properties:
        address:
          type: "string"
        city:
          type: "string"
        zip_code:
          type: "string"
        country:
          type: "string"
      required:
        - "address"
        - "city"
        - "zip_code"
        - "country"
    Media:
      type: "object"
      properties:
        original:
          type: "string"
        png1000:
          type: "string"
        png500:
          type: "string"
        png250:
          type: "string"
      required:
        - "original"
        - "png1000"
        - "png500"
        - "png250"
    Company:
      type: "object"
      properties:
        id:
          type: "string"
        name:
          type: "string"
        head_office:
          $ref: "#/components/schemas/Address"
        siret:
          type: "string"
        vat:
          type: "string"
        description:
          type: "string"
          nullable: true
        site_url:
          type: "string"
        medias:
          nullable: true
          $ref: "#/components/schemas/Media"
      required:
        - "id"
        - "name"
        - "head_office"
        - "siret"
        - "vat"
        - "site_url"
    Social:
      type: "object"
      properties:
        type:
          type: "string"
          enum:
            - "LINKEDIN"
            - "X"
            - "BLUESKY"
            - "MASTODON"
            - "INSTAGRAM"
            - "FACEBOOK"
            - "YOUTUBE"
        url:
          type: "string"
      required:
        - "type"
        - "url"
    CreateCompany:
      type: "object"
      properties:
        name:
          type: "string"
        site_url:
          type: "string"
        head_office:
          $ref: "#/components/schemas/Address"
        siret:
          type: "string"
        vat:
          type: "string"
        description:
          type: "string"
          nullable: true
        socials:
          type: "array"
          items:
            $ref: "#/components/schemas/Social"
      required:
        - "name"
        - "site_url"
        - "head_office"
        - "siret"
        - "vat"
        - "socials"
    Map:
      type: "object"
      properties: { }
    Map_String:
      type: "string"
    Contact:
      type: "object"
      properties:
        displayName:
          type: "string"
        role:
          type: "string"
      required:
        - "displayName"
        - "role"
    PartnershipItem:
      type: "object"
      properties:
        id:
          type: "string"
        contact:
          $ref: "#/components/schemas/Contact"
        companyName:
          type: "string"
        eventName:
          type: "string"
        packName:
          type: "string"
          nullable: true
        suggestedPackName:
          type: "string"
          nullable: true
        language:
          type: "string"
        phone:
          type: "string"
          nullable: true
        emails:
          type: "array"
          items:
            type: "string"
        createdAt:
          type: "string"
          format: "date-time"
      required:
        - "id"
        - "contact"
        - "companyName"
        - "eventName"
        - "language"
        - "emails"
        - "createdAt"
    EventSummary:
      type: "object"
      properties:
        slug:
          type: "string"
        name:
          type: "string"
        start_time:
          type: "string"
          format: "date-time"
        end_time:
          type: "string"
          format: "date-time"
        submission_start_time:
          type: "string"
          format: "date-time"
        submission_end_time:
          type: "string"
          format: "date-time"
      required:
        - "slug"
        - "name"
        - "start_time"
        - "end_time"
        - "submission_start_time"
        - "submission_end_time"
    Event:
      type: "object"
      properties:
        name:
          type: "string"
        start_time:
          type: "string"
          format: "date-time"
        end_time:
          type: "string"
          format: "date-time"
        submission_start_time:
          type: "string"
          format: "date-time"
        submission_end_time:
          type: "string"
          format: "date-time"
        address:
          type: "string"
        contact:
          $ref: "#/components/schemas/EventContact"
      required:
        - "name"
        - "start_time"
        - "end_time"
        - "submission_start_time"
        - "submission_end_time"
        - "address"
        - "contact"
    EventDisplay:
      type: "object"
      properties:
        slug:
          type: "string"
        name:
          type: "string"
        start_time:
          type: "string"
          format: "date-time"
        end_time:
          type: "string"
          format: "date-time"
        submission_start_time:
          type: "string"
          format: "date-time"
        submission_end_time:
          type: "string"
          format: "date-time"
        address:
          type: "string"
        contact:
          $ref: "#/components/schemas/EventContact"
        external_links:
          type: "array"
          items:
            $ref: "#/components/schemas/EventExternalLink"
          description: "List of external links associated with the event"
        providers:
          type: "array"
          items:
            $ref: "#/components/schemas/Provider"
          description: "List of providers (partners) associated with the event"
      required:
        - "slug"
        - "name"
        - "start_time"
        - "end_time"
        - "submission_start_time"
        - "submission_end_time"
        - "address"
        - "contact"
        - "external_links"
        - "providers"
    EventContact:
      type: "object"
      properties:
        email:
          type: "string"
        phone:
          type: "string"
          nullable: true
      required:
        - "email"
        - "address"
        - "contact"
    EventExternalLink:
      type: "object"
      properties:
        id:
          type: "string"
          description: "Unique identifier of the external link"
        name:
          type: "string"
          description: "Display name for the external link"
        url:
          type: "string"
          format: "uri"
          description: "URL of the external resource"
      required:
        - "id"
        - "name"
        - "url"
    Organisation:
      type: "object"
      properties:
        name:
          type: "string"
        head_office:
          type: "string"
          nullable: true
        siret:
          type: "string"
          nullable: true
        siren:
          type: "string"
          nullable: true
        tva:
          type: "string"
          nullable: true
        d_and_b:
          type: "string"
          nullable: true
        nace:
          type: "string"
          nullable: true
        naf:
          type: "string"
          nullable: true
        duns:
          type: "string"
          nullable: true
        iban:
          type: "string"
          nullable: true
        bic:
          type: "string"
          nullable: true
        rib_url:
          type: "string"
          nullable: true
        representative_user_email:
          type: "string"
          nullable: true
        representative_role:
          type: "string"
          nullable: true
        creation_location:
          type: "string"
          nullable: true
        created_at:
          type: "string"
          format: "date-time"
          nullable: true
        published_at:
          type: "string"
          format: "date-time"
          nullable: true
      required:
        - "name"
    EventWithOrganisation:
      type: "object"
      properties:
        event:
          $ref: "#/components/schemas/EventDisplay"
        organisation:
          $ref: "#/components/schemas/OrganisationItem"
      required:
        - "event"
        - "organisation"
    RegisterPartnership:
      type: "object"
      properties:
        company_id:
          type: "string"
        pack_id:
          type: "string"
        option_ids:
          type: "array"
          items:
            type: "string"
        contact_name:
          type: "string"
        contact_role:
          type: "string"
        language:
          type: "string"
        phone:
          type: "string"
          nullable: true
        emails:
          type: "array"
          items:
            type: "string"
      required:
        - "company_id"
        - "pack_id"
        - "option_ids"
        - "contact_name"
        - "contact_role"
        - "language"
        - "emails"
        - "emails"
    CompanyBillingData:
      type: "object"
      properties:
        name:
          type: "string"
          nullable: true
        po:
          type: "string"
          nullable: true
        contact:
          $ref: "#/components/schemas/BillingContact"
      required:
        - "contact"
    BillingContact:
      type: "object"
      properties:
        first_name:
          type: "string"
        last_name:
          type: "string"
        email:
          type: "string"
      required:
        - "first_name"
        - "last_name"
        - "email"
    TicketData:
      type: "object"
      properties:
        first_name:
          type: "string"
        last_name:
          type: "string"
      required:
        - "first_name"
        - "last_name"
    Ticket:
      type: "object"
      properties:
        id:
          type: "string"
        extId:
          type: "string"
        url:
          type: "string"
        data:
          $ref: "#/components/schemas/TicketData"
      required:
        - "id"
        - "extId"
        - "url"
        - "data"
    TicketOrder:
      type: "object"
      properties:
        id:
          type: "string"
        tickets:
          type: "array"
          items:
            $ref: "#/components/schemas/Ticket"
      required:
        - "id"
        - "tickets"
    SponsoringOption:
      type: "object"
      properties:
        id:
          type: "string"
        name:
          type: "string"
        description:
          type: "string"
          nullable: true
        price:
          type: "integer"
          format: "int32"
          nullable: true
      required:
        - "id"
        - "name"
    TranslatedLabel:
      type: "object"
      properties:
        language:
          type: "string"
        name:
          type: "string"
        description:
          type: "string"
          nullable: true
      required:
        - "language"
        - "name"
    CreateSponsoringOption:
      type: "object"
      properties:
        translations:
          type: "array"
          items:
            $ref: "#/components/schemas/TranslatedLabel"
        price:
          type: "integer"
          format: "int32"
          nullable: true
      required:
        - "translations"
    SponsoringPack:
      type: "object"
      properties:
        id:
          type: "string"
        name:
          type: "string"
        basePrice:
          type: "integer"
          format: "int32"
        maxQuantity:
          type: "integer"
          format: "int32"
          nullable: true
        requiredOptions:
          type: "array"
          items:
            $ref: "#/components/schemas/SponsoringOption"
        optionalOptions:
          type: "array"
          items:
            $ref: "#/components/schemas/SponsoringOption"
      required:
        - "id"
        - "name"
        - "basePrice"
        - "requiredOptions"
        - "optionalOptions"
    CreateSponsoringPack:
      type: "object"
      properties:
        name:
          type: "string"
        price:
          type: "integer"
          format: "int32"
        withBooth:
          type: "boolean"
        nbTickets:
          type: "integer"
          format: "int32"
        maxQuantity:
          type: "integer"
          format: "int32"
          nullable: true
      required:
        - "name"
        - "price"
        - "withBooth"
        - "nbTickets"
    AttachOptionsToPack:
      type: "object"
      properties:
        required:
          type: "array"
          items:
            type: "string"
        optional:
          type: "array"
          items:
            type: "string"
      required:
        - "required"
        - "optional"
    SuggestPartnership:
      type: "object"
      properties:
        pack_id:
          type: "string"
        option_ids:
          type: "array"
          items:
            type: "string"
        language:
          type: "string"
      required:
        - "pack_id"
        - "option_ids"
        - "language"
    User:
      type: "object"
      properties:
        displayName:
          type: "string"
          nullable: true
        pictureUrl:
          type: "string"
          nullable: true
        email:
          type: "string"
      required:
        - "email"
    GrantPermissionRequest:
      type: "object"
      properties:
        user_emails:
          type: "array"
          items:
            type: "string"
          description: "List of user emails to grant permissions to"
      required:
        - "user_emails"
    Owner:
      type: "object"
      properties:
        displayName:
          type: "string"
        email:
          type: "string"
      required:
        - "displayName"
        - "email"
    OrganisationItem:
      type: "object"
      properties:
        name:
          type: "string"
        slug:
          type: "string"
        headOffice:
          type: "string"
        owner:
          $ref: "#/components/schemas/Owner"
      required:
        - "name"
        - "slug"
        - "headOffice"
        - "owner"
    Provider:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
          description: "Unique identifier of the provider"
        name:
          type: "string"
          description: "Name of the provider"
        type:
          type: "string"
          description: "Type/category of the provider"
        website:
          type: "string"
          nullable: true
          description: "Website URL of the provider"
        phone:
          type: "string"
          nullable: true
          description: "Phone number of the provider"
        email:
          type: "string"
          nullable: true
          description: "Email address of the provider"
        created_at:
          type: "string"
          format: "date-time"
          description: "Creation timestamp of the provider"
      required:
        - "id"
        - "name"
        - "type"
        - "created_at"
    CreateProvider:
      type: "object"
      properties:
        name:
          type: "string"
          description: "Name of the provider"
        type:
          type: "string"
          description: "Type/category of the provider"
        website:
          type: "string"
          nullable: true
          description: "Website URL of the provider"
        phone:
          type: "string"
          nullable: true
          description: "Phone number of the provider"
        email:
          type: "string"
          nullable: true
          description: "Email address of the provider"
      required:
        - "name"
        - "type"
    BoothLocationRequest:
      type: "object"
      properties:
        location:
          type: "string"
          description: "The booth location identifier or name"
      required:
        - "location"
    BoothLocationResponse:
      type: "object"
      properties:
        id:
          type: "string"
          description: "The partnership ID"
        location:
          type: "string"
          description: "The assigned booth location"
      required:
        - "id"
        - "location"
    PublicationDateRequest:
      type: "object"
      properties:
        publication_date:
          type: "string"
          format: "date-time"
          description: "Publication date in ISO 8601 format"
      required:
        - "publication_date"
    PublicationDateResponse:
      type: "object"
      properties:
        id:
          type: "string"
          description: "Partnership ID"
        publication_date:
          type: "string"
          format: "date-time"
          description: "Scheduled publication date in ISO 8601 format"
      required:
        - "id"
        - "publication_date"
    SupportUploadResponse:
      type: "object"
      properties:
        id:
          type: "string"
          description: "Partnership ID"
        url:
          type: "string"
          description: "URL of the uploaded visual support material"
      required:
        - "id"
        - "url"
    CommunicationItem:
      type: "object"
      properties:
        partnership_id:
          type: "string"
          description: "Partnership unique identifier"
        company_name:
          type: "string"
          description: "Company name"
        publication_date:
          type: "string"
          format: "date-time"
          nullable: true
          description: "Publication date in ISO 8601 format (null for unplanned)"
        support_url:
          type: "string"
          nullable: true
          description: "URL to the communication support material (null if not uploaded)"
      required:
        - "partnership_id"
        - "company_name"
    CommunicationPlan:
      type: "object"
      properties:
        done:
          type: "array"
          items:
            $ref: "#/components/schemas/CommunicationItem"
          description: "Communications with past publication dates (sorted newest first)"
        planned:
          type: "array"
          items:
            $ref: "#/components/schemas/CommunicationItem"
          description: "Communications with future publication dates (sorted earliest first)"
        unplanned:
          type: "array"
          items:
            $ref: "#/components/schemas/CommunicationItem"
          description: "Communications without publication date (sorted alphabetically by company name)"
      required:
        - "done"
        - "planned"
        - "unplanned"