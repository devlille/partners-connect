openapi: 3.1.0
info:
  title: partners_connect API
  description: partners_connect API
  version: 1.0.0
servers:
  - url: https://partners_connect
paths:
  /auth/callback:
    get:
      description: OAuth callback endpoint
      responses:
        '200':
          description: OK - Authentication successful, returns session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_session.schema'
        '302':
          description: Found - Redirect after successful authentication
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: Not Found - Invalid OAuth state
          content:
            application/json:
              schema:
                type: object
  /auth/login:
    get:
      description: Start OAuth login flow - redirects to Google OAuth
      responses:
        '302':
          description: Redirect to OAuth provider
  /auth/logout:
    get:
      description: Logout and clear session
      responses:
        '204':
          description: No Content - Successfully logged out
  /auth/me:
    get:
      description: Get current user information
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_info.schema'
        '401':
          description: Unauthorized - No valid session
          content:
            text/plain:
              schema:
                type: string
  /companies:
    get:
      description: List companies with paging support
      parameters:
        - name: query
          in: query
          required: false
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number (must be >= 1)
        - name: page_size
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of items per page (must be between 1 and 100)
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/paginated_company.schema'
    post:
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_company.schema'
        required: true
      responses:
        '201':
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/identifier.schema'
  /companies/{companyId}/logo:
    post:
      description: Upload a logo for a company
      parameters:
        - name: companyId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Logo file (SVG, PNG, or JPEG)
        required: true
      responses:
        '200':
          description: OK - Logo uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/media.schema'
        '400':
          description: Bad Request - Invalid company ID or unsupported file type
          content:
            text/plain:
              schema:
                type: string
  /companies/{companyId}/partnership:
    get:
      description: ''
      parameters:
        - name: companyId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/partnership_item.schema'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
  /events:
    get:
      description: List events with paging support
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number (must be >= 1)
        - name: page_size
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of items per page (must be between 1 and 100)
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/paginated_event_summary.schema'
  /events/{eventSlug}:
    get:
      description: Get event details with organization information
      parameters:
        - name: eventSlug
          in: path
          required: true
          schema:
            type: string
          description: The slug identifier of the event
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event_with_organisation.schema'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
  /events/{eventSlug}/partnership:
    post:
      description: ''
      parameters:
        - name: eventSlug
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/register_partnership.schema'
        required: true
      responses:
        '201':
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/identifier.schema'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
  /events/{eventSlug}/partnership/{partnershipId}/billing:
    get:
      description: ''
      parameters:
        - name: eventSlug
          in: path
          required: true
          schema:
            type: string
        - name: partnershipId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/company_billing_data.schema'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
    post:
      description: ''
      parameters:
        - name: eventSlug
          in: path
          required: true
          schema:
            type: string
        - name: partnershipId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/company_billing_data.schema'
        required: true
      responses:
        '201':
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/identifier.schema'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
    put:
      description: ''
      parameters:
        - name: eventSlug
          in: path
          required: true
          schema:
            type: string
        - name: partnershipId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/company_billing_data.schema'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/identifier.schema'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
  /events/{eventSlug}/partnership/{partnershipId}/billing/invoice:
    post:
      description: ''
      parameters:
        - name: eventSlug
          in: path
          required: true
          schema:
            type: string
        - name: partnershipId
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/identifier.schema'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
  /events/{eventSlug}/partnership/{partnershipId}/billing/quote:
    post:
      description: ''
      parameters:
        - name: eventSlug
          in: path
          required: true
          schema:
            type: string
        - name: partnershipId
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/identifier.schema'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
  /events/{eventSlug}/partnership/{partnershipId}/signed-agreement:
    post:
      description: Upload a signed partnership agreement
      parameters:
        - name: eventSlug
          in: path
          required: true
          schema:
            type: string
        - name: partnershipId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Signed agreement PDF file
        required: true
      responses:
        '200':
          description: OK - Signed agreement uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/identifier.schema'
        '400':
          description: Bad Request - Invalid file type or missing parameters
          content:
            text/plain:
              schema:
                type: string
  /events/{eventSlug}/partnership/{partnershipId}/suggestion-approve:
    post:
      description: ''
      parameters:
        - name: eventSlug
          in: path
          required: true
          schema:
            type: string
        - name: partnershipId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/identifier.schema'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
  /events/{eventSlug}/partnership/{partnershipId}/suggestion-decline:
    post:
      description: ''
      parameters:
        - name: eventSlug
          in: path
          required: true
          schema:
            type: string
        - name: partnershipId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/identifier.schema'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
  /events/{eventSlug}/partnership/{partnershipId}/tickets:
    get:
      description: ''
      parameters:
        - name: partnershipId
          in: path
          required: true
          schema:
            type: string
        - name: eventSlug
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ticket.schema'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
    post:
      description: ''
      parameters:
        - name: eventSlug
          in: path
          required: true
          schema:
            type: string
        - name: partnershipId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ticket_data.schema'
        required: true
      responses:
        '201':
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ticket_order.schema'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
  /events/{eventSlug}/partnership/{partnershipId}/tickets/{ticketId}:
    put:
      description: ''
      parameters:
        - name: eventSlug
          in: path
          required: true
          schema:
            type: string
        - name: partnershipId
          in: path
          required: true
          schema:
            type: string
        - name: ticketId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ticket_data.schema'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ticket.schema'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
  /providers:
    get:
      description: List all providers with optional filtering and sorting
      parameters:
        - name: query
          in: query
          required: false
          schema:
            type: string
          description: Search providers by name (case-insensitive)
        - name: sort
          in: query
          required: false
          schema:
            type: string
            enum:
              - name
              - createdAt
              - creation
              - created
            default: createdAt
          description: 'Sort by field (default: createdAt)'
        - name: direction
          in: query
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
          description: 'Sort direction (default: asc)'
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number (must be >= 1)
        - name: page_size
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of items per page (must be between 1 and 100)
      responses:
        '200':
          description: OK - Paginated list of providers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paginated_provider.schema'
    post:
      description: Create a new provider (requires authentication and organizer status)
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_provider.schema'
        required: true
      responses:
        '201':
          description: Created - Provider created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    description: UUID of the created provider
                required:
                  - id
        '400':
          description: Bad Request - Invalid input data
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Unauthorized - Missing or invalid authentication
          content:
            text/plain:
              schema:
                type: string
        '403':
          description: Forbidden - User is not an organizer of any event
          content:
            text/plain:
              schema:
                type: string
  /orgs:
    post:
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/organisation.schema'
        required: true
      responses:
        '201':
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/identifier.schema'
  /orgs/{slug}:
    get:
      description: ''
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/organisation.schema'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
  /orgs/{orgSlug}:
    put:
      description: ''
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/organisation.schema'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/organisation.schema'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
  /orgs/{orgSlug}/events:
    get:
      description: List events for an organization (paginated)
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
          description: 'Page number (default: 1)'
        - name: page_size
          in: query
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          description: 'Number of items per page (default: 20)'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paginated_event_summary.schema'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
    post:
      description: Create a new event for an organization
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/event.schema'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/identifier.schema'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
  /orgs/{orgSlug}/events/{eventSlug}:
    put:
      description: ''
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: eventSlug
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/event.schema'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/identifier.schema'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
  /orgs/{orgSlug}/events/{eventSlug}/booth-plan:
    post:
      description: Upload booth plan image for an event
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: eventSlug
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Booth plan image file (PNG, JPEG, GIF)
        required: true
      responses:
        '201':
          description: Created - Booth plan image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    description: URL of the uploaded booth plan image
                required:
                  - url
        '400':
          description: Bad Request - Invalid event slug or missing file
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
        '415':
          description: Unsupported Media Type - Invalid file format
          content:
            text/plain:
              schema:
                type: string
  /orgs/{orgSlug}/events/{eventSlug}/integrations/{provider}/{usage}:
    post:
      description: Register an integration for an event
      parameters:
        - name: eventSlug
          in: path
          required: true
          schema:
            type: string
        - name: usage
          in: path
          required: true
          schema:
            type: string
            enum:
              - BILLING
              - MAILING
              - TICKETING
        - name: provider
          in: path
          required: true
          schema:
            type: string
            enum:
              - QONTO
              - MAILJET
              - BILLETWEB
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: Integration configuration data
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/identifier.schema'
        '400':
          description: Bad Request - Invalid provider, usage, or configuration
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
  /orgs/{orgSlug}/events/{eventSlug}/options:
    get:
      description: List sponsoring options for an event
      parameters:
        - name: eventSlug
          in: path
          required: true
          schema:
            type: string
        - name: Accept-Language
          in: header
          required: false
          schema:
            type: string
            default: en
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/sponsoring_option.schema'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
    post:
      description: Create a new sponsoring option
      parameters:
        - name: eventSlug
          in: path
          required: true
          schema:
            type: string
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_sponsoring_option.schema'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/identifier.schema'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
  /orgs/{orgSlug}/events/{eventSlug}/options/{optionId}:
    delete:
      description: ''
      parameters:
        - name: eventSlug
          in: path
          required: true
          schema:
            type: string
        - name: optionId
          in: path
          required: true
          schema:
            type: string
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content:
            '*/*':
              schema:
                type: object
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
    put:
      description: ''
      parameters:
        - name: eventSlug
          in: path
          required: true
          schema:
            type: string
        - name: optionId
          in: path
          required: true
          schema:
            type: string
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_sponsoring_option.schema'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/identifier.schema'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
  /orgs/{orgSlug}/events/{eventSlug}/packs:
    get:
      description: List sponsoring packs for an event
      parameters:
        - name: eventSlug
          in: path
          required: true
          schema:
            type: string
        - name: Accept-Language
          in: header
          required: false
          schema:
            type: string
            default: en
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/sponsoring_pack.schema'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
    post:
      description: Create a new sponsoring pack
      parameters:
        - name: eventSlug
          in: path
          required: true
          schema:
            type: string
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_sponsoring_pack.schema'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/identifier.schema'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
  /orgs/{orgSlug}/events/{eventSlug}/packs/{packId}:
    delete:
      description: ''
      parameters:
        - name: eventSlug
          in: path
          required: true
          schema:
            type: string
        - name: packId
          in: path
          required: true
          schema:
            type: string
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content:
            '*/*':
              schema:
                type: object
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
    put:
      description: ''
      parameters:
        - name: eventSlug
          in: path
          required: true
          schema:
            type: string
        - name: packId
          in: path
          required: true
          schema:
            type: string
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_sponsoring_pack.schema'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/identifier.schema'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
  /orgs/{orgSlug}/events/{eventSlug}/packs/{packId}/options:
    post:
      description: ''
      parameters:
        - name: eventSlug
          in: path
          required: true
          schema:
            type: string
        - name: packId
          in: path
          required: true
          schema:
            type: string
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/attach_options_to_pack.schema'
        required: true
      responses:
        '201':
          description: Created
          content:
            '*/*':
              schema:
                type: object
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
  /orgs/{orgSlug}/events/{eventSlug}/packs/{packId}/options/{optionId}:
    delete:
      description: ''
      parameters:
        - name: eventSlug
          in: path
          required: true
          schema:
            type: string
        - name: packId
          in: path
          required: true
          schema:
            type: string
        - name: optionId
          in: path
          required: true
          schema:
            type: string
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content:
            '*/*':
              schema:
                type: object
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
  /orgs/{orgSlug}/events/{eventSlug}/communication:
    get:
      description: Get communication plan for all partnerships of an event, grouped by status
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
          description: Organization slug
        - name: eventSlug
          in: path
          required: true
          schema:
            type: string
          description: Event slug
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/communication_plan.schema'
        '400':
          description: Bad Request - Missing or invalid parameters
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: Not Found - Event not found
          content:
            text/plain:
              schema:
                type: string
  /orgs/{orgSlug}/events/{eventSlug}/external-link:
    post:
      description: Attach a new external link to an event
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: eventSlug
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_event_external_link.schema'
        required: true
      responses:
        '201':
          description: Created - External link created successfully
          content:
            text/plain:
              schema:
                type: string
                format: uuid
                description: UUID of the created external link
        '400':
          description: Bad Request - Invalid input or validation error
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Unauthorized - Authentication required
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: Not Found - Event or organization not found
          content:
            text/plain:
              schema:
                type: string
  /orgs/{orgSlug}/events/{eventSlug}/external-link/{linkId}:
    delete:
      description: Remove an external link by its ID
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: eventSlug
          in: path
          required: true
          schema:
            type: string
        - name: linkId
          in: path
          required: true
          schema:
            type: string
            format: uuid
            description: UUID of the external link to delete
      security:
        - bearerAuth: []
      responses:
        '204':
          description: No Content - External link deleted successfully
        '400':
          description: Bad Request - Invalid UUID format
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Unauthorized - Authentication required
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: Not Found - External link, event or organization not found
          content:
            text/plain:
              schema:
                type: string
  /orgs/{orgSlug}/events/{eventSlug}/partnership:
    get:
      description: List partnerships for an event with filtering options
      parameters:
        - name: eventSlug
          in: path
          required: true
          schema:
            type: string
        - name: filter[pack_id]
          in: query
          required: false
          schema:
            type: string
          description: Filter by sponsoring pack ID
        - name: filter[validated]
          in: query
          required: false
          schema:
            type: boolean
          description: Filter by validation status
        - name: filter[suggestion]
          in: query
          required: false
          schema:
            type: boolean
          description: Filter by suggestion status
        - name: filter[paid]
          in: query
          required: false
          schema:
            type: boolean
          description: Filter by payment status
        - name: filter[agreement-generated]
          in: query
          required: false
          schema:
            type: boolean
          description: Filter by agreement generation status
        - name: filter[agreement-signed]
          in: query
          required: false
          schema:
            type: boolean
          description: Filter by agreement signature status
        - name: sort
          in: query
          required: false
          schema:
            type: string
            default: created
            enum:
              - created
              - updated
          description: Sort field
        - name: direction
          in: query
          required: false
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
          description: Sort direction
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/partnership_item.schema'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
  /orgs/{orgSlug}/events/{eventSlug}/partnership/{partnershipId}/agreement:
    post:
      description: Generate a partnership agreement PDF
      parameters:
        - name: eventSlug
          in: path
          required: true
          schema:
            type: string
        - name: partnershipId
          in: path
          required: true
          schema:
            type: string
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK - Agreement generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    description: URL to the generated agreement PDF
                required:
                  - url
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
  /orgs/{orgSlug}/events/{eventSlug}/partnership/{partnershipId}/billing/{billingStatus}:
    post:
      description: ''
      parameters:
        - name: eventSlug
          in: path
          required: true
          schema:
            type: string
        - name: partnershipId
          in: path
          required: true
          schema:
            type: string
        - name: billingStatus
          in: path
          required: true
          schema:
            type: string
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/identifier.schema'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
  /orgs/{orgSlug}/events/{eventSlug}/partnership/{partnershipId}/booth-location:
    put:
      description: Assign booth location to a partnership
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: eventSlug
          in: path
          required: true
          schema:
            type: string
        - name: partnershipId
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/booth_location_request.schema'
        required: true
      responses:
        '200':
          description: OK - Booth location assigned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/booth_location_response.schema'
        '400':
          description: Bad Request - Invalid parameters or empty location
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
        '403':
          description: Forbidden - Booth location already assigned to another partnership
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: Not Found - Partnership or event not found
          content:
            text/plain:
              schema:
                type: string
  /orgs/{orgSlug}/events/{eventSlug}/partnership/{partnershipId}/suggestion:
    post:
      description: ''
      parameters:
        - name: eventSlug
          in: path
          required: true
          schema:
            type: string
        - name: partnershipId
          in: path
          required: true
          schema:
            type: string
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/suggest_partnership.schema'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/identifier.schema'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
  /orgs/{orgSlug}/events/{eventSlug}/partnership/{partnershipId}/validate:
    post:
      description: Validate a partnership request
      parameters:
        - name: eventSlug
          in: path
          required: true
          schema:
            type: string
        - name: partnershipId
          in: path
          required: true
          schema:
            type: string
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/identifier.schema'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
  /orgs/{orgSlug}/events/{eventSlug}/partnership/{partnershipId}/decline:
    post:
      description: Decline a partnership request
      parameters:
        - name: eventSlug
          in: path
          required: true
          schema:
            type: string
        - name: partnershipId
          in: path
          required: true
          schema:
            type: string
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/identifier.schema'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
  /orgs/{orgSlug}/events/{eventSlug}/partnership/{partnershipId}/communication/publication:
    put:
      description: Schedule publication date for partnership communication
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: eventSlug
          in: path
          required: true
          schema:
            type: string
        - name: partnershipId
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/publication_date_request.schema'
        required: true
      responses:
        '200':
          description: OK - Publication date scheduled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/publication_date_response.schema'
        '400':
          description: Bad Request - Invalid date format or missing parameters
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: Not Found - Partnership not found
          content:
            text/plain:
              schema:
                type: string
  /orgs/{orgSlug}/events/{eventSlug}/partnership/{partnershipId}/communication/support:
    put:
      description: Upload visual support material for partnership communication
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
        - name: eventSlug
          in: path
          required: true
          schema:
            type: string
        - name: partnershipId
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        content:
          image/png:
            schema:
              type: string
              format: binary
          image/jpeg:
            schema:
              type: string
              format: binary
          image/gif:
            schema:
              type: string
              format: binary
          image/svg+xml:
            schema:
              type: string
              format: binary
          image/webp:
            schema:
              type: string
              format: binary
        required: true
      responses:
        '200':
          description: OK - Visual support uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/support_upload_response.schema'
        '400':
          description: Bad Request - Missing parameters or empty content
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: Not Found - Partnership not found
          content:
            text/plain:
              schema:
                type: string
        '415':
          description: Unsupported Media Type - Invalid image format
          content:
            text/plain:
              schema:
                type: string
  /orgs/{orgSlug}/events/{eventSlug}/providers:
    post:
      description: Attach providers to an event (requires event write access)
      security:
        - bearerAuth: []
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
          description: Organization slug
        - name: eventSlug
          in: path
          required: true
          schema:
            type: string
          description: Event slug
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_by_identifiers.schema'
        required: true
      responses:
        '200':
          description: OK - Providers attached successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: uuid
                description: List of successfully attached provider UUIDs
        '400':
          description: Bad Request - Invalid provider IDs or empty list
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Unauthorized - Missing or invalid authentication
          content:
            text/plain:
              schema:
                type: string
        '403':
          description: Forbidden - No write access to the event
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: Not Found - Event or organization not found
          content:
            text/plain:
              schema:
                type: string
    delete:
      description: Remove providers from an event (requires event write access)
      security:
        - bearerAuth: []
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
          description: Organization slug
        - name: eventSlug
          in: path
          required: true
          schema:
            type: string
          description: Event slug
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_by_identifiers.schema'
        required: true
      responses:
        '200':
          description: OK - Providers detached successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: uuid
                description: List of successfully detached provider UUIDs
        '400':
          description: Bad Request - Invalid provider IDs or empty list
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Unauthorized - Missing or invalid authentication
          content:
            text/plain:
              schema:
                type: string
        '403':
          description: Forbidden - No write access to the event
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: Not Found - Event or organization not found
          content:
            text/plain:
              schema:
                type: string
  /orgs/{orgSlug}/users:
    get:
      description: ''
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user.schema'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
  /orgs/{orgSlug}/users/grant:
    post:
      description: ''
      parameters:
        - name: orgSlug
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/grant_permission_request.schema'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
              examples:
                Example#1:
                  value: Permissions granted
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
  /users/me/events:
    get:
      description: ''
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/event_summary.schema'
  /users/me/orgs:
    get:
      description: ''
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/organisation_item.schema'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Authentication token obtained through OAuth flow
  schemas:
    UserSession:
      $ref: '#/components/schemas/user_session.schema'
    UserInfo:
      $ref: '#/components/schemas/user_info.schema'
    Address:
      $ref: '#/components/schemas/address.schema'
    Media:
      $ref: '#/components/schemas/media.schema'
    Company:
      $ref: '#/components/schemas/company.schema'
    Social:
      $ref: '#/components/schemas/social.schema'
    CreateCompany:
      $ref: '#/components/schemas/create_company.schema'
    Identifier:
      $ref: '#/components/schemas/identifier.schema'
    Contact:
      $ref: '#/components/schemas/contact.schema'
    PartnershipItem:
      $ref: '#/components/schemas/partnership_item.schema'
    EventSummary:
      $ref: '#/components/schemas/event_summary.schema'
    Event:
      $ref: '#/components/schemas/event.schema'
    EventDisplay:
      $ref: '#/components/schemas/event_display.schema'
    CreateEventExternalLink:
      $ref: '#/components/schemas/create_event_external_link.schema'
    Organisation:
      $ref: '#/components/schemas/organisation.schema'
    EventWithOrganisation:
      $ref: '#/components/schemas/event_with_organisation.schema'
    RegisterPartnership:
      $ref: '#/components/schemas/register_partnership.schema'
    CompanyBillingData:
      $ref: '#/components/schemas/company_billing_data.schema'
    TicketData:
      $ref: '#/components/schemas/ticket_data.schema'
    Ticket:
      $ref: '#/components/schemas/ticket.schema'
    TicketOrder:
      $ref: '#/components/schemas/ticket_order.schema'
    SponsoringOption:
      $ref: '#/components/schemas/sponsoring_option.schema'
    TranslatedLabel:
      $ref: '#/components/schemas/translated_label.schema'
    CreateSponsoringOption:
      $ref: '#/components/schemas/create_sponsoring_option.schema'
    SponsoringPack:
      $ref: '#/components/schemas/sponsoring_pack.schema'
    CreateSponsoringPack:
      $ref: '#/components/schemas/create_sponsoring_pack.schema'
    AttachOptionsToPack:
      $ref: '#/components/schemas/attach_options_to_pack.schema'
    SuggestPartnership:
      $ref: '#/components/schemas/suggest_partnership.schema'
    User:
      $ref: '#/components/schemas/user.schema'
    GrantPermissionRequest:
      $ref: '#/components/schemas/grant_permission_request.schema'
    OrganisationItem:
      $ref: '#/components/schemas/organisation_item.schema'
    Provider:
      $ref: '#/components/schemas/provider.schema'
    CreateProvider:
      $ref: '#/components/schemas/create_provider.schema'
    BoothLocationRequest:
      $ref: '#/components/schemas/booth_location_request.schema'
    BoothLocationResponse:
      $ref: '#/components/schemas/booth_location_response.schema'
    PublicationDateRequest:
      $ref: '#/components/schemas/publication_date_request.schema'
    PublicationDateResponse:
      $ref: '#/components/schemas/publication_date_response.schema'
    SupportUploadResponse:
      $ref: '#/components/schemas/support_upload_response.schema'
    CommunicationItem:
      $ref: '#/components/schemas/communication_item.schema'
    CommunicationPlan:
      $ref: '#/components/schemas/communication_plan.schema'
    PaginatedEventSummary:
      $ref: '#/components/schemas/paginated_event_summary.schema'
    PaginatedCompany:
      $ref: '#/components/schemas/paginated_company.schema'
    PaginatedProvider:
      $ref: '#/components/schemas/paginated_provider.schema'
    CreateByIdentifiers:
      $ref: '#/components/schemas/create_by_identifiers.schema'
    user_session.schema:
      $id: user_session.schema.json
      type: object
      properties:
        state:
          type: string
        token:
          type: string
      required:
        - state
        - token
    user_info.schema:
      $id: user_info.schema.json
      type: object
      properties:
        display_name:
          type: string
        picture_url:
          type: string
          nullable: true
        email:
          type: string
      required:
        - display_name
        - email
    address.schema:
      $id: address.schema.json
      type: object
      properties:
        address:
          type: string
        city:
          type: string
        zip_code:
          type: string
        country:
          type: string
      required:
        - address
        - city
        - zip_code
        - country
    media.schema:
      $id: media.schema.json
      type: object
      properties:
        original:
          type: string
        png_1000:
          type: string
        png_500:
          type: string
        png_250:
          type: string
      required:
        - original
        - png_1000
        - png_500
        - png_250
    company.schema:
      $id: company.schema.json
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        head_office:
          $ref: '#/components/schemas/address.schema'
        siret:
          type: string
        vat:
          type: string
        description:
          type: string
          nullable: true
        site_url:
          type: string
        medias:
          $ref: '#/components/schemas/media.schema'
          nullable: true
      required:
        - id
        - name
        - head_office
        - siret
        - vat
        - site_url
    paginated_company.schema:
      $id: paginated_company.schema.json
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/company.schema'
        page:
          type: integer
        page_size:
          type: integer
        total:
          type: integer
      required:
        - items
        - page
        - page_size
        - total
    social.schema:
      $id: social.schema.json
      type: object
      properties:
        type:
          enum:
            - LINKEDIN
            - X
            - BLUESKY
            - MASTODON
            - INSTAGRAM
            - FACEBOOK
            - YOUTUBE
        url:
          type: string
      required:
        - type
        - url
    create_company.schema:
      $id: create_company.schema.json
      type: object
      properties:
        name:
          type: string
        head_office:
          $ref: '#/components/schemas/address.schema'
        siret:
          type: string
        vat:
          type: string
        description:
          type: string
          nullable: true
        site_url:
          type: string
        socials:
          type: array
          items:
            $ref: '#/components/schemas/social.schema'
      required:
        - name
        - head_office
        - siret
        - vat
        - site_url
    identifier.schema:
      $id: identifier.schema.json
      type: object
      properties:
        id:
          type: string
      required:
        - id
    contact.schema:
      $id: contact.schema.json
      type: object
      properties:
        display_name:
          type: string
        role:
          type: string
      required:
        - display_name
        - role
    partnership_item.schema:
      $id: partnership_item.schema.json
      type: object
      properties:
        id:
          type: string
        contact:
          $ref: '#/components/schemas/contact.schema'
        company_name:
          type: string
        event_name:
          type: string
        pack_name:
          type: string
          nullable: true
        suggested_pack_name:
          type: string
          nullable: true
        language:
          type: string
        phone:
          type: string
          nullable: true
        emails:
          type: string
        created_at:
          type: string
          format: date-time
      required:
        - id
        - contact
        - company_name
        - event_name
        - language
        - created_at
    event_summary.schema:
      $id: event_summary.schema.json
      type: object
      properties:
        slug:
          type: string
        name:
          type: string
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        submission_start_time:
          type: string
          format: date-time
        submission_end_time:
          type: string
          format: date-time
      required:
        - slug
        - name
        - start_time
        - end_time
        - submission_start_time
        - submission_end_time
    paginated_event_summary.schema:
      $id: paginated_event_summary.schema.json
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/event_summary.schema'
        page:
          type: integer
        page_size:
          type: integer
        total:
          type: integer
      required:
        - items
        - page
        - page_size
        - total
    event_contact.schema:
      $id: event_contact.schema.json
      type: object
      properties:
        email:
          type: string
        phone:
          type: string
          nullable: true
      required:
        - email
        - phone
    event_external_link.schema:
      $id: event_external_link.schema.json
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        url:
          type: string
      required:
        - id
        - name
        - url
    provider.schema:
      $id: provider.schema.json
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        type:
          type: string
        website:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
      required:
        - id
        - name
        - type
        - website
        - created_at
    event_display.schema:
      $id: event_display.schema.json
      type: object
      properties:
        slug:
          type: string
        name:
          type: string
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        submission_start_time:
          type: string
          format: date-time
        submission_end_time:
          type: string
          format: date-time
        address:
          type: string
        contact:
          $ref: '#/components/schemas/event_contact.schema'
        external_links:
          type: array
          items:
            $ref: '#/components/schemas/event_external_link.schema'
        providers:
          $ref: '#/components/schemas/provider.schema'
      required:
        - slug
        - name
        - start_time
        - end_time
        - submission_start_time
        - submission_end_time
        - address
        - contact
        - external_links
        - providers
    owner.schema:
      $id: owner.schema.json
      type: object
      properties:
        display_name:
          type: string
        email:
          type: string
      required:
        - display_name
        - email
    organisation_item.schema:
      $id: organisation_item.schema.json
      type: object
      properties:
        slug:
          type: string
        name:
          type: string
        head_office:
          type: string
        owner:
          $ref: '#/components/schemas/owner.schema'
          nullable: true
      required:
        - slug
        - name
        - head_office
    event_with_organisation.schema:
      $id: event_with_organisation.schema.json
      type: object
      properties:
        event:
          $ref: '#/components/schemas/event_display.schema'
        organisation:
          $ref: '#/components/schemas/organisation_item.schema'
      required:
        - event
        - organisation
    register_partnership.schema:
      $id: register_partnership.schema.json
      type: object
      properties:
        company_id:
          type: string
          format: uuid
        pack_id:
          type: string
          format: uuid
        option_ids:
          type: array
          items:
            type: string
            format: uuid
        contact_name:
          type: string
        contact_role:
          type: string
        language:
          type: string
        phone:
          type: string
          nullable: true
        emails:
          type: array
          items:
            type: string
      required:
        - company_id
        - pack_id
        - contact_name
        - contact_role
        - language
    billing_contact.schema:
      $id: billing_contact.schema.json
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
      required:
        - first_name
        - last_name
        - email
    company_billing_data.schema:
      $id: company_billing_data.schema.json
      type: object
      properties:
        name:
          type: string
          nullable: true
        po:
          type: string
          nullable: true
        contact:
          $ref: '#/components/schemas/billing_contact.schema'
      required:
        - contact
    ticket_data.schema:
      $id: ticket_data.schema.json
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
      required:
        - first_name
        - last_name
    ticket.schema:
      $id: ticket.schema.json
      type: object
      properties:
        id:
          type: string
        external_id:
          type: string
        url:
          type: string
        data:
          $ref: '#/components/schemas/ticket_data.schema'
      required:
        - id
        - external_id
        - url
        - data
    ticket_order.schema:
      $id: ticket_order.schema.json
      type: object
      properties:
        id:
          type: string
        tickets:
          type: array
          items:
            $ref: '#/components/schemas/ticket.schema'
      required:
        - id
        - tickets
    paginated_provider.schema:
      $id: paginated_provider.schema.json
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/provider.schema'
        page:
          type: integer
        page_size:
          type: integer
        total:
          type: integer
      required:
        - items
        - page
        - page_size
        - total
    create_provider.schema:
      $id: create_provider.schema.json
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        website:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
      required:
        - name
        - type
    organisation.schema:
      $id: organisation.schema.json
      type: object
      properties:
        name:
          type: string
        head_office:
          type: string
          nullable: true
        siret:
          type: string
          nullable: true
        siren:
          type: string
          nullable: true
        tva:
          type: string
          nullable: true
        d_and_b:
          type: string
          nullable: true
        nace:
          type: string
          nullable: true
        naf:
          type: string
          nullable: true
        duns:
          type: string
          nullable: true
        iban:
          type: string
          nullable: true
        bic:
          type: string
          nullable: true
        rib_url:
          type: string
          nullable: true
        representative_user_email:
          type: string
          nullable: true
        representative_role:
          type: string
          nullable: true
        creation_location:
          type: string
          nullable: true
        created_at:
          type: string
          nullable: true
          format: date-time
        published_at:
          type: string
          nullable: true
          format: date-time
      required:
        - name
    event.schema:
      $id: event.schema.json
      type: object
      properties:
        name:
          type: string
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        submission_start_time:
          type: string
          format: date-time
        submission_end_time:
          type: string
          format: date-time
        address:
          type: string
        contact:
          $ref: '#/components/schemas/event_contact.schema'
      required:
        - slug
        - name
        - start_time
        - end_time
        - submission_start_time
        - submission_end_time
        - address
        - contact
    sponsoring_option.schema:
      $id: sponsoring_option.schema.json
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
          nullable: true
        price:
          type: integer
          nullable: true
      required:
        - id
        - name
    translated_label.schema:
      $id: translated_label.schema.json
      type: object
      properties:
        language:
          type: string
        name:
          type: string
        description:
          type: string
          nullable: true
      required:
        - language
        - name
    create_sponsoring_option.schema:
      $id: create_sponsoring_option.schema.json
      type: object
      properties:
        translations:
          type: array
          items:
            $ref: '#/components/schemas/translated_label.schema'
        price:
          type: integer
          nullable: true
      required:
        - translations
    sponsoring_pack.schema:
      $id: sponsoring_pack.schema.json
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        base_price:
          type: integer
        max_quantity:
          type: integer
          nullable: true
        required_options:
          type: array
          items:
            $ref: '#/components/schemas/sponsoring_option.schema'
        optional_options:
          type: array
          items:
            $ref: '#/components/schemas/sponsoring_option.schema'
      required:
        - id
        - name
        - base_price
        - required_options
        - optional_options
    create_sponsoring_pack.schema:
      $id: create_sponsoring_pack.schema.json
      type: object
      properties:
        name:
          type: string
        price:
          type: integer
        with_booth:
          type: boolean
          default: false
        nb_tickets:
          type: integer
        max_quantity:
          type: integer
          nullable: true
      required:
        - name
        - price
        - nb_tickets
    attach_options_to_pack.schema:
      $id: attach_options_to_pack.schema.json
      type: object
      properties:
        required:
          type: array
          items:
            type: string
        optional:
          type: array
          items:
            type: string
      required:
        - required
        - optional
    communication_item.schema:
      $id: communication_item.schema.json
      type: object
      properties:
        partnership_id:
          type: string
        company_name:
          type: string
        publication_date:
          type: string
          format: date-time
          nullable: true
        support_url:
          type: string
          nullable: true
      required:
        - partnership_id
        - company_name
    communication_plan.schema:
      $id: communication_plan.schema.json
      type: object
      properties:
        done:
          type: array
          items:
            $ref: '#/components/schemas/communication_item.schema'
        planned:
          type: array
          items:
            $ref: '#/components/schemas/communication_item.schema'
        unplanned:
          type: array
          items:
            $ref: '#/components/schemas/communication_item.schema'
      required:
        - done
        - planned
        - unplanned
    create_event_external_link.schema:
      $id: create_event_external_link.schema.json
      type: object
      properties:
        name:
          type: string
        url:
          type: string
          format: uri
      required:
        - name
        - url
    booth_location_request.schema:
      $id: booth_location_request.schema.json
      type: object
      properties:
        location:
          type: string
      required:
        - location
    booth_location_response.schema:
      $id: booth_location_response.schema.json
      type: object
      properties:
        id:
          type: string
        location:
          type: string
      required:
        - id
        - location
    suggest_partnership.schema:
      $id: suggest_partnership.schema.json
      type: object
      properties:
        pack_id:
          type: string
        option_ids:
          type: array
          items:
            type: string
          default: []
        language:
          type: string
      required:
        - pack_id
        - language
    publication_date_request.schema:
      $id: publication_date_request.schema.json
      type: object
      properties:
        publication_date:
          type: string
          format: date-time
      required:
        - publication_date
    publication_date_response.schema:
      $id: publication_date_response.schema.json
      type: object
      properties:
        id:
          type: string
        publication_date:
          type: string
          format: date-time
      required:
        - id
        - publication_date
    support_upload_response.schema:
      $id: support_upload_response.schema.json
      type: object
      properties:
        id:
          type: string
        url:
          type: string
      required:
        - id
        - url
    create_by_identifiers.schema:
      $id: create_by_identifiers.schema.json
      type: array
      items:
        type: string
        format: uuid
    user.schema:
      $id: user.schema.json
      type: object
      properties:
        display_name:
          type: string
          nullable: true
        picture_url:
          type: string
          nullable: true
        email:
          type: string
      required:
        - email
    grant_permission_request.schema:
      $id: grant_permission_request.schema.json
      type: object
      properties:
        user_emails:
          type: array
          items:
            type: string
      required:
        - user_emails
