<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/application/src/main/kotlin/fr/devlille/partners/connect/events/domain/EventRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/application/src/main/kotlin/fr/devlille/partners/connect/events/domain/EventRepository.kt" />
              <option name="originalContent" value="package fr.devlille.partners.connect.events.domain&#10;&#10;import java.util.UUID&#10;&#10;interface EventRepository {&#10;    fun getAllEvents(): List&lt;EventSummary&gt;&#10;&#10;    fun getBySlug(eventSlug: String): EventWithOrganisation&#10;&#10;    fun findByOrgSlug(orgSlug: String): List&lt;EventSummary&gt;&#10;&#10;    fun findByOrgSlugPaginated(orgSlug: String, page: Int, pageSize: Int): PaginatedResponse&lt;EventSummary&gt;&#10;&#10;    fun createEvent(orgSlug: String, event: Event): String&#10;&#10;    fun updateEvent(eventSlug: String, orgSlug: String, event: Event): String&#10;&#10;    fun findByUserEmail(userEmail: String): List&lt;EventSummary&gt;&#10;&#10;    fun updateBoothPlanImageUrl(eventSlug: String, imageUrl: String)&#10;&#10;    fun createExternalLink(eventSlug: String, request: CreateEventExternalLinkRequest): UUID&#10;&#10;    fun deleteExternalLink(externalLinkId: UUID)&#10;}&#10;" />
              <option name="updatedContent" value="package fr.devlille.partners.connect.events.domain&#10;&#10;import java.util.UUID&#10;&#10;interface EventRepository {&#10;    fun getAllEvents(page: Int, pageSize: Int): PaginatedResponse&lt;EventSummary&gt;&#10;&#10;    fun getBySlug(eventSlug: String): EventWithOrganisation&#10;&#10;    fun findByOrgSlug(orgSlug: String): List&lt;EventSummary&gt;&#10;&#10;    fun findByOrgSlugPaginated(orgSlug: String, page: Int, pageSize: Int): PaginatedResponse&lt;EventSummary&gt;&#10;&#10;    fun createEvent(orgSlug: String, event: Event): String&#10;&#10;    fun updateEvent(eventSlug: String, orgSlug: String, event: Event): String&#10;&#10;    fun findByUserEmail(userEmail: String): List&lt;EventSummary&gt;&#10;&#10;    fun updateBoothPlanImageUrl(eventSlug: String, imageUrl: String)&#10;&#10;    fun createExternalLink(eventSlug: String, request: CreateEventExternalLinkRequest): UUID&#10;&#10;    fun deleteExternalLink(externalLinkId: UUID)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/application/src/main/kotlin/fr/devlille/partners/connect/events/infrastructure/api/EventRoutes.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/application/src/main/kotlin/fr/devlille/partners/connect/events/infrastructure/api/EventRoutes.kt" />
              <option name="originalContent" value="package fr.devlille.partners.connect.events.infrastructure.api&#10;&#10;import fr.devlille.partners.connect.events.domain.Event&#10;import fr.devlille.partners.connect.events.domain.EventRepository&#10;import fr.devlille.partners.connect.internal.infrastructure.api.AuthorizedOrganisationPlugin&#10;import io.ktor.http.HttpStatusCode&#10;import io.ktor.server.plugins.BadRequestException&#10;import io.ktor.server.request.receive&#10;import io.ktor.server.response.respond&#10;import io.ktor.server.routing.Route&#10;import io.ktor.server.routing.get&#10;import io.ktor.server.routing.post&#10;import io.ktor.server.routing.put&#10;import io.ktor.server.routing.route&#10;import org.koin.ktor.ext.inject&#10;&#10;private const val DEFAULT_PAGE_SIZE = 20&#10;&#10;@Suppress(&quot;ThrowsCount&quot;)&#10;fun Route.eventRoutes() {&#10;    val repository by inject&lt;EventRepository&gt;()&#10;&#10;    route(&quot;events&quot;) {&#10;        get {&#10;            val page = call.request.queryParameters[&quot;page&quot;]?.toIntOrNull() ?: 1&#10;            val pageSize = call.request.queryParameters[&quot;page_size&quot;]?.toIntOrNull() ?: DEFAULT_PAGE_SIZE&#10;            val paginated = repository.getAllEvents(page, pageSize)&#10;            call.respond(HttpStatusCode.OK, paginated)&#10;        }&#10;&#10;        get(&quot;/{event_slug}&quot;) {&#10;            val eventSlug = call.parameters[&quot;event_slug&quot;] ?: throw BadRequestException(&quot;Missing event slug&quot;)&#10;            val eventWithOrg = repository.getBySlug(eventSlug)&#10;            call.respond(HttpStatusCode.OK, eventWithOrg)&#10;        }&#10;    }&#10;&#10;    route(&quot;orgs/{orgSlug}/events&quot;) {&#10;        install(AuthorizedOrganisationPlugin)&#10;&#10;        get {&#10;            val orgSlug = call.parameters[&quot;orgSlug&quot;] ?: throw BadRequestException(&quot;Missing organisation slug&quot;)&#10;            val page = call.request.queryParameters[&quot;page&quot;]?.toIntOrNull() ?: 1&#10;            val pageSize = call.request.queryParameters[&quot;page_size&quot;]?.toIntOrNull() ?: DEFAULT_PAGE_SIZE&#10;            val paginated = repository.findByOrgSlugPaginated(orgSlug, page, pageSize)&#10;            call.respond(HttpStatusCode.OK, paginated)&#10;        }&#10;&#10;        post {&#10;            val orgSlug = call.parameters[&quot;orgSlug&quot;] ?: throw BadRequestException(&quot;Missing organisation slug&quot;)&#10;            val request = call.receive&lt;Event&gt;()&#10;            val slug = repository.createEvent(orgSlug, request)&#10;            call.respond(&#10;                status = HttpStatusCode.Created,&#10;                message = mapOf(&quot;slug&quot; to slug),&#10;            )&#10;        }&#10;&#10;        put(&quot;/{eventSlug}&quot;) {&#10;            val orgSlug = call.parameters[&quot;orgSlug&quot;] ?: throw BadRequestException(&quot;Missing organisation slug&quot;)&#10;            val eventSlug = call.parameters[&quot;eventSlug&quot;] ?: throw BadRequestException(&quot;Missing event slug&quot;)&#10;            val updatedSlug = repository.updateEvent(eventSlug, orgSlug, call.receive&lt;Event&gt;())&#10;            call.respond(&#10;                status = HttpStatusCode.OK,&#10;                message = mapOf(&quot;slug&quot; to updatedSlug),&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package fr.devlille.partners.connect.events.infrastructure.api&#10;&#10;import fr.devlille.partners.connect.events.domain.Event&#10;import fr.devlille.partners.connect.events.domain.EventRepository&#10;import fr.devlille.partners.connect.internal.infrastructure.api.AuthorizedOrganisationPlugin&#10;import io.ktor.http.HttpStatusCode&#10;import io.ktor.server.plugins.BadRequestException&#10;import io.ktor.server.request.receive&#10;import io.ktor.server.response.respond&#10;import io.ktor.server.routing.Route&#10;import io.ktor.server.routing.get&#10;import io.ktor.server.routing.post&#10;import io.ktor.server.routing.put&#10;import io.ktor.server.routing.route&#10;import org.koin.ktor.ext.inject&#10;&#10;private const val DEFAULT_PAGE_SIZE = 20&#10;&#10;@Suppress(&quot;ThrowsCount&quot;)&#10;fun Route.eventRoutes() {&#10;    val repository by inject&lt;EventRepository&gt;()&#10;&#10;    route(&quot;events&quot;) {&#10;        get {&#10;            val page = call.request.queryParameters[&quot;page&quot;]?.toIntOrNull() ?: 1&#10;            val pageSize = call.request.queryParameters[&quot;page_size&quot;]?.toIntOrNull() ?: DEFAULT_PAGE_SIZE&#10;            val paginated = repository.getAllEvents(page, pageSize)&#10;            call.respond(HttpStatusCode.OK, paginated)&#10;        }&#10;&#10;        get(&quot;/{event_slug}&quot;) {&#10;            val eventSlug = call.parameters[&quot;event_slug&quot;] ?: throw BadRequestException(&quot;Missing event slug&quot;)&#10;            val eventWithOrg = repository.getBySlug(eventSlug)&#10;            call.respond(HttpStatusCode.OK, eventWithOrg)&#10;        }&#10;    }&#10;&#10;    route(&quot;orgs/{orgSlug}/events&quot;) {&#10;        install(AuthorizedOrganisationPlugin)&#10;&#10;        get {&#10;            val orgSlug = call.parameters[&quot;orgSlug&quot;] ?: throw BadRequestException(&quot;Missing organisation slug&quot;)&#10;            val page = call.request.queryParameters[&quot;page&quot;]?.toIntOrNull() ?: 1&#10;            val pageSize = call.request.queryParameters[&quot;page_size&quot;]?.toIntOrNull() ?: DEFAULT_PAGE_SIZE&#10;            val paginated = repository.findByOrgSlugPaginated(orgSlug, page, pageSize)&#10;            call.respond(HttpStatusCode.OK, paginated)&#10;        }&#10;&#10;        post {&#10;            val orgSlug = call.parameters[&quot;orgSlug&quot;] ?: throw BadRequestException(&quot;Missing organisation slug&quot;)&#10;            val request = call.receive&lt;Event&gt;()&#10;            val slug = repository.createEvent(orgSlug, request)&#10;            call.respond(&#10;                status = HttpStatusCode.Created,&#10;                message = mapOf(&quot;slug&quot; to slug),&#10;            )&#10;        }&#10;&#10;        put(&quot;/{eventSlug}&quot;) {&#10;            val orgSlug = call.parameters[&quot;orgSlug&quot;] ?: throw BadRequestException(&quot;Missing organisation slug&quot;)&#10;            val eventSlug = call.parameters[&quot;eventSlug&quot;] ?: throw BadRequestException(&quot;Missing event slug&quot;)&#10;            val updatedSlug = repository.updateEvent(eventSlug, orgSlug, call.receive&lt;Event&gt;())&#10;            call.respond(&#10;                status = HttpStatusCode.OK,&#10;                message = mapOf(&quot;slug&quot; to updatedSlug),&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/application/src/test/kotlin/fr/devlille/partners/connect/events/EventRoutesTest.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/application/src/test/kotlin/fr/devlille/partners/connect/events/EventRoutesTest.kt" />
              <option name="originalContent" value="package fr.devlille.partners.connect.events&#10;&#10;import fr.devlille.partners.connect.events.domain.Event&#10;import fr.devlille.partners.connect.events.factories.createEvent&#10;import fr.devlille.partners.connect.events.factories.insertMockedEvent&#10;import fr.devlille.partners.connect.events.factories.insertMockedEventWithOrga&#10;import fr.devlille.partners.connect.internal.moduleMocked&#10;import fr.devlille.partners.connect.organisations.factories.insertMockedOrganisationEntity&#10;import fr.devlille.partners.connect.provider.factories.insertMockedProvider&#10;import fr.devlille.partners.connect.users.factories.insertMockedAdminUser&#10;import fr.devlille.partners.connect.users.factories.insertMockedOrgaPermission&#10;import fr.devlille.partners.connect.users.factories.insertMockedUser&#10;import io.ktor.client.request.get&#10;import io.ktor.client.request.header&#10;import io.ktor.client.request.post&#10;import io.ktor.client.request.put&#10;import io.ktor.client.request.setBody&#10;import io.ktor.client.statement.bodyAsText&#10;import io.ktor.http.ContentType&#10;import io.ktor.http.HttpHeaders&#10;import io.ktor.http.HttpStatusCode&#10;import io.ktor.http.contentType&#10;import io.ktor.server.testing.testApplication&#10;import kotlinx.serialization.json.Json&#10;import kotlinx.serialization.json.jsonArray&#10;import kotlinx.serialization.json.jsonObject&#10;import java.util.UUID&#10;import kotlin.test.Test&#10;import kotlin.test.assertEquals&#10;import kotlin.test.assertNotNull&#10;import kotlin.test.assertTrue&#10;&#10;class EventRoutesTest {&#10;    private val json = Json { ignoreUnknownKeys = true }&#10;&#10;    @Test&#10;    fun `POST creates an event and grants access to creator`() = testApplication {&#10;        val orgId = UUID.randomUUID()&#10;        application {&#10;            moduleMocked()&#10;            val admin = insertMockedAdminUser()&#10;            insertMockedOrganisationEntity(id = orgId, representativeUser = admin)&#10;            insertMockedOrgaPermission(orgId = orgId, user = admin)&#10;        }&#10;&#10;        val response = client.post(&quot;/orgs/$orgId/events&quot;) {&#10;            contentType(ContentType.Application.Json)&#10;            header(HttpHeaders.Authorization, &quot;Bearer valid&quot;)&#10;            setBody(json.encodeToString(Event.serializer(), createEvent()))&#10;        }&#10;&#10;        assertEquals(HttpStatusCode.Created, response.status)&#10;        val responseText = response.bodyAsText()&#10;        val responseBody = Json.decodeFromString&lt;Map&lt;String, String&gt;&gt;(responseText)&#10;        assertNotNull(responseBody[&quot;slug&quot;], &quot;Response should contain a 'slug' field&quot;)&#10;    }&#10;&#10;    @Test&#10;    fun `PUT updates an existing event`() = testApplication {&#10;        val eventId = UUID.randomUUID()&#10;        val orgId = UUID.randomUUID()&#10;        val testSlug = &quot;test-event&quot;&#10;        application {&#10;            moduleMocked()&#10;            insertMockedOrganisationEntity(id = orgId)&#10;            // Create event with specific slug using the updated factory&#10;            insertMockedEvent(id = eventId, orgId = orgId, slug = testSlug)&#10;            insertMockedOrgaPermission(orgId = orgId, user = insertMockedAdminUser())&#10;        }&#10;&#10;        val response = client.put(&quot;/orgs/$orgId/events/$testSlug&quot;) {&#10;            contentType(ContentType.Application.Json)&#10;            header(HttpHeaders.Authorization, &quot;Bearer valid&quot;)&#10;            setBody(json.encodeToString(Event.serializer(), createEvent()))&#10;        }&#10;&#10;        assertEquals(HttpStatusCode.OK, response.status)&#10;        val updateBody = Json.decodeFromString&lt;Map&lt;String, String&gt;&gt;(response.bodyAsText())&#10;        assertEquals(testSlug, updateBody[&quot;slug&quot;])&#10;    }&#10;&#10;    @Test&#10;    fun `PUT returns 401 when user has no access to the event`() = testApplication {&#10;        val organisationId = UUID.randomUUID()&#10;        val eventId = UUID.randomUUID()&#10;        val testSlug = &quot;test-event-unauthorized&quot;&#10;&#10;        application {&#10;            moduleMocked()&#10;            insertMockedEventWithOrga(&#10;                id = eventId,&#10;                slug = testSlug,&#10;                organisation = insertMockedOrganisationEntity(&#10;                    id = organisationId,&#10;                    representativeUser = insertMockedAdminUser(),&#10;                ),&#10;            )&#10;        }&#10;&#10;        val updateResponse = client.put(&quot;/orgs/$organisationId/events/$testSlug&quot;) {&#10;            contentType(ContentType.Application.Json)&#10;            header(HttpHeaders.Authorization, &quot;Bearer valid&quot;)&#10;            setBody(json.encodeToString(Event.serializer(), createEvent()))&#10;        }&#10;&#10;        assertEquals(HttpStatusCode.Unauthorized, updateResponse.status)&#10;    }&#10;&#10;    @Test&#10;    fun `GET returns all events`() = testApplication {&#10;        val orgId = UUID.randomUUID()&#10;        application {&#10;            moduleMocked()&#10;            val org = insertMockedOrganisationEntity(id = orgId, representativeUser = insertMockedAdminUser())&#10;            insertMockedEventWithOrga(organisation = org)&#10;        }&#10;&#10;        val response = client.get(&quot;/events&quot;)&#10;        assertEquals(HttpStatusCode.OK, response.status)&#10;        val responseBody = response.bodyAsText()&#10;        val paginated = Json.parseToJsonElement(responseBody).jsonObject&#10;        val items = paginated[&quot;items&quot;]!!.jsonArray&#10;        assertTrue(items.isNotEmpty())&#10;        assertNotNull(paginated[&quot;page&quot;])&#10;        assertNotNull(paginated[&quot;page_size&quot;])&#10;        assertNotNull(paginated[&quot;total&quot;])&#10;    }&#10;&#10;    @Test&#10;    fun `GET orgs events returns events for organization with valid user`() = testApplication {&#10;        val orgId = UUID.randomUUID()&#10;        application {&#10;            moduleMocked()&#10;            val admin = insertMockedAdminUser()&#10;            val org = insertMockedOrganisationEntity(id = orgId, representativeUser = admin)&#10;            insertMockedOrgaPermission(orgId = orgId, user = admin)&#10;            insertMockedEventWithOrga(name = &quot;First Event&quot;, slug = &quot;first-event&quot;, organisation = org)&#10;            insertMockedEventWithOrga(name = &quot;Second Event&quot;, slug = &quot;second-event&quot;, organisation = org)&#10;        }&#10;&#10;        val response = client.get(&quot;/orgs/$orgId/events&quot;) {&#10;            header(HttpHeaders.Authorization, &quot;Bearer valid&quot;)&#10;        }&#10;&#10;        assertEquals(HttpStatusCode.OK, response.status)&#10;        val responseBody = response.bodyAsText()&#10;        val paginated = Json.parseToJsonElement(responseBody).jsonObject&#10;        val items = paginated[&quot;items&quot;]!!.jsonArray&#10;        assertEquals(2, items.size)&#10;        assertEquals(1, paginated[&quot;page&quot;]!!.toString().toInt())&#10;        assertEquals(20, paginated[&quot;page_size&quot;]!!.toString().toInt())&#10;        assertEquals(2, paginated[&quot;total&quot;]!!.toString().toInt())&#10;    }&#10;&#10;    @Test&#10;    fun `GET orgs events returns empty list when organization has no events`() = testApplication {&#10;        val orgId = UUID.randomUUID()&#10;        application {&#10;            moduleMocked()&#10;            val admin = insertMockedAdminUser()&#10;            insertMockedOrganisationEntity(id = orgId, representativeUser = admin)&#10;            insertMockedOrgaPermission(orgId = orgId, user = admin)&#10;        }&#10;&#10;        val response = client.get(&quot;/orgs/$orgId/events&quot;) {&#10;            header(HttpHeaders.Authorization, &quot;Bearer valid&quot;)&#10;        }&#10;&#10;        assertEquals(HttpStatusCode.OK, response.status)&#10;        val responseBody = response.bodyAsText()&#10;        val paginated = Json.parseToJsonElement(responseBody).jsonObject&#10;        val items = paginated[&quot;items&quot;]!!.jsonArray&#10;        assertEquals(0, items.size)&#10;        assertEquals(1, paginated[&quot;page&quot;]!!.toString().toInt())&#10;        assertEquals(10, paginated[&quot;page_size&quot;]!!.toString().toInt())&#10;        assertEquals(0, paginated[&quot;total&quot;]!!.toString().toInt())&#10;    }&#10;&#10;    @Test&#10;    fun `GET orgs events returns 404 when organization does not exist`() = testApplication {&#10;        val nonExistentOrgId = UUID.randomUUID()&#10;        application {&#10;            moduleMocked()&#10;            val admin = insertMockedAdminUser()&#10;            // Don't create any organization or permissions - just test with non-existent org&#10;        }&#10;&#10;        val response = client.get(&quot;/orgs/$nonExistentOrgId/events&quot;) {&#10;            header(HttpHeaders.Authorization, &quot;Bearer valid&quot;)&#10;        }&#10;&#10;        assertEquals(HttpStatusCode.NotFound, response.status)&#10;    }&#10;&#10;    @Test&#10;    fun `GET orgs events returns 401 when user has no permissions`() = testApplication {&#10;        val orgId = UUID.randomUUID()&#10;        application {&#10;            moduleMocked()&#10;            val admin = insertMockedAdminUser()&#10;            val org = insertMockedOrganisationEntity(id = orgId, representativeUser = admin)&#10;            insertMockedEventWithOrga(organisation = org)&#10;            // No organization permission granted to user&#10;        }&#10;&#10;        val response = client.get(&quot;/orgs/$orgId/events&quot;) {&#10;            header(HttpHeaders.Authorization, &quot;Bearer valid&quot;)&#10;        }&#10;&#10;        assertEquals(HttpStatusCode.Unauthorized, response.status)&#10;    }&#10;&#10;    @Test&#10;    fun `GET orgs events returns 401 when no authorization header provided`() = testApplication {&#10;        val orgId = UUID.randomUUID()&#10;        application {&#10;            moduleMocked()&#10;            val admin = insertMockedAdminUser()&#10;            val org = insertMockedOrganisationEntity(id = orgId, representativeUser = admin)&#10;            insertMockedEventWithOrga(organisation = org)&#10;            insertMockedOrgaPermission(orgId = orgId, user = admin)&#10;        }&#10;&#10;        val response = client.get(&quot;/orgs/$orgId/events&quot;)&#10;&#10;        assertEquals(HttpStatusCode.Unauthorized, response.status)&#10;    }&#10;&#10;    @Test&#10;    fun `GET events by slug returns event with organization for valid slug`() = testApplication {&#10;        val eventId = UUID.randomUUID()&#10;        val eventSlug = &quot;test-event&quot;&#10;        application {&#10;            moduleMocked()&#10;            val admin = insertMockedAdminUser()&#10;            val org = insertMockedOrganisationEntity(representativeUser = admin)&#10;            insertMockedEventWithOrga(id = eventId, slug = eventSlug, organisation = org)&#10;        }&#10;&#10;        val response = client.get(&quot;/events/$eventSlug&quot;)&#10;&#10;        assertEquals(HttpStatusCode.OK, response.status)&#10;        val responseBody = response.bodyAsText()&#10;        val eventWithOrg = Json.parseToJsonElement(responseBody).jsonObject&#10;&#10;        // Verify response structure&#10;        assert(eventWithOrg.containsKey(&quot;event&quot;))&#10;        assert(eventWithOrg.containsKey(&quot;organisation&quot;))&#10;&#10;        // Verify event structure&#10;        val eventObject = eventWithOrg[&quot;event&quot;]?.jsonObject&#10;        assertNotNull(eventObject)&#10;        assertTrue(eventObject!!.containsKey(&quot;slug&quot;))&#10;        assertTrue(eventObject.containsKey(&quot;name&quot;))&#10;        assertTrue(eventObject.containsKey(&quot;start_time&quot;))&#10;        assertTrue(eventObject.containsKey(&quot;end_time&quot;))&#10;        assertTrue(eventObject.containsKey(&quot;submission_start_time&quot;))&#10;        assertTrue(eventObject.containsKey(&quot;submission_end_time&quot;))&#10;        assertTrue(eventObject.containsKey(&quot;address&quot;))&#10;        assertTrue(eventObject.containsKey(&quot;contact&quot;))&#10;&#10;        // Verify organisation structure&#10;        val organisationObject = eventWithOrg[&quot;organisation&quot;]?.jsonObject&#10;        assertNotNull(organisationObject)&#10;        assert(organisationObject!!.containsKey(&quot;name&quot;))&#10;        assert(organisationObject.containsKey(&quot;slug&quot;))&#10;        assert(organisationObject.containsKey(&quot;head_office&quot;))&#10;        assert(organisationObject.containsKey(&quot;owner&quot;))&#10;    }&#10;&#10;    @Test&#10;    fun `GET events by slug returns 404 for non-existent event`() = testApplication {&#10;        val nonExistentEventSlug = &quot;non-existent-event&quot;&#10;        application {&#10;            moduleMocked()&#10;        }&#10;&#10;        val response = client.get(&quot;/events/$nonExistentEventSlug&quot;)&#10;&#10;        assertEquals(HttpStatusCode.NotFound, response.status)&#10;    }&#10;&#10;    @Test&#10;    fun `GET events by slug accepts various slug formats`() = testApplication {&#10;        application {&#10;            moduleMocked()&#10;        }&#10;&#10;        val response = client.get(&quot;/events/valid-event-slug&quot;)&#10;&#10;        // This should return 404 (not found) rather than 400 (bad request)&#10;        // since slug format is valid, even if event doesn't exist&#10;        assertEquals(HttpStatusCode.NotFound, response.status)&#10;    }&#10;&#10;    @Test&#10;    fun `GET events by slug is public and returns correct response structure`() = testApplication {&#10;        val eventId = UUID.randomUUID()&#10;        val eventSlug = &quot;public-test-event&quot;&#10;        application {&#10;            moduleMocked()&#10;            val admin = insertMockedAdminUser()&#10;            val org = insertMockedOrganisationEntity(representativeUser = admin)&#10;            insertMockedEventWithOrga(id = eventId, slug = eventSlug, organisation = org)&#10;        }&#10;&#10;        // No authentication header - this is a public endpoint&#10;        val response = client.get(&quot;/events/$eventSlug&quot;)&#10;&#10;        assertEquals(HttpStatusCode.OK, response.status)&#10;        val responseBody = response.bodyAsText()&#10;        val responseJson = Json.parseToJsonElement(responseBody).jsonObject&#10;&#10;        // Verify top-level structure&#10;        assertTrue(responseJson.containsKey(&quot;event&quot;))&#10;        assertTrue(responseJson.containsKey(&quot;organisation&quot;))&#10;&#10;        // Verify event structure has required fields&#10;        val event = responseJson[&quot;event&quot;]!!.jsonObject&#10;        assertTrue(event.containsKey(&quot;slug&quot;))&#10;        assertTrue(event.containsKey(&quot;name&quot;))&#10;        assertTrue(event.containsKey(&quot;start_time&quot;))&#10;        assertTrue(event.containsKey(&quot;end_time&quot;))&#10;        assertTrue(event.containsKey(&quot;submission_start_time&quot;))&#10;        assertTrue(event.containsKey(&quot;submission_end_time&quot;))&#10;        assertTrue(event.containsKey(&quot;address&quot;))&#10;        assertTrue(event.containsKey(&quot;contact&quot;))&#10;        assertTrue(event.containsKey(&quot;external_links&quot;))&#10;&#10;        // Verify external_links is an array (should be empty for this test)&#10;        val externalLinks = event[&quot;external_links&quot;]!!.jsonArray&#10;        assertEquals(0, externalLinks.size)&#10;&#10;        // Verify organization structure has required fields&#10;        val organisation = responseJson[&quot;organisation&quot;]!!.jsonObject&#10;        assertTrue(organisation.containsKey(&quot;name&quot;))&#10;        assertTrue(organisation.containsKey(&quot;slug&quot;))&#10;        assertTrue(organisation.containsKey(&quot;head_office&quot;))&#10;        assertTrue(organisation.containsKey(&quot;owner&quot;))&#10;    }&#10;&#10;    @Test&#10;    fun `GET events by slug includes external links in response`() = testApplication {&#10;        val eventId = UUID.randomUUID()&#10;        val eventSlug = &quot;event-with-external-links&quot;&#10;        val orgId = UUID.randomUUID()&#10;        val orgSlug = &quot;test-org&quot;&#10;&#10;        application {&#10;            moduleMocked()&#10;            val admin = insertMockedAdminUser()&#10;            val org = insertMockedOrganisationEntity(id = orgId, name = orgSlug, representativeUser = admin)&#10;            insertMockedEventWithOrga(id = eventId, slug = eventSlug, organisation = org)&#10;            insertMockedOrgaPermission(orgId = orgId, user = admin)&#10;        }&#10;&#10;        // First, create an external link&#10;        val createRequest = fr.devlille.partners.connect.events.domain.CreateEventExternalLinkRequest(&#10;            name = &quot;Call for Papers&quot;,&#10;            url = &quot;https://sessionize.com/devlille2025&quot;,&#10;        )&#10;&#10;        val createResponse = client.post(&quot;/orgs/$orgSlug/events/$eventSlug/external-link&quot;) {&#10;            contentType(ContentType.Application.Json)&#10;            header(HttpHeaders.Authorization, &quot;Bearer valid&quot;)&#10;            setBody(Json.encodeToString(createRequest))&#10;        }&#10;&#10;        assertEquals(HttpStatusCode.Created, createResponse.status)&#10;&#10;        // Now get the event and verify the external link is included&#10;        val getResponse = client.get(&quot;/events/$eventSlug&quot;)&#10;&#10;        assertEquals(HttpStatusCode.OK, getResponse.status)&#10;        val responseBody = getResponse.bodyAsText()&#10;        val responseJson = Json.parseToJsonElement(responseBody).jsonObject&#10;&#10;        val event = responseJson[&quot;event&quot;]!!.jsonObject&#10;        assertTrue(event.containsKey(&quot;external_links&quot;))&#10;&#10;        val externalLinks = event[&quot;external_links&quot;]!!.jsonArray&#10;        assertEquals(1, externalLinks.size)&#10;&#10;        val externalLink = externalLinks[0].jsonObject&#10;        assertTrue(externalLink.containsKey(&quot;id&quot;))&#10;        assertEquals(&quot;Call for Papers&quot;, externalLink[&quot;name&quot;]!!.toString().removeSurrounding(&quot;\&quot;&quot;))&#10;        assertEquals(&quot;https://sessionize.com/devlille2025&quot;, externalLink[&quot;url&quot;]!!.toString().removeSurrounding(&quot;\&quot;&quot;))&#10;    }&#10;&#10;    @Test&#10;    fun `GET event by slug returns empty providers array when no providers attached`() = testApplication {&#10;        val eventId = UUID.randomUUID()&#10;        val eventSlug = &quot;test-event-no-providers&quot;&#10;        application {&#10;            moduleMocked()&#10;            val admin = insertMockedAdminUser()&#10;            val org = insertMockedOrganisationEntity(representativeUser = admin)&#10;            insertMockedEventWithOrga(id = eventId, slug = eventSlug, organisation = org)&#10;        }&#10;&#10;        val response = client.get(&quot;/events/$eventSlug&quot;)&#10;&#10;        assertEquals(HttpStatusCode.OK, response.status)&#10;        val responseBody = response.bodyAsText()&#10;        val responseJson = Json.parseToJsonElement(responseBody).jsonObject&#10;&#10;        // Verify top-level structure&#10;        assertTrue(responseJson.containsKey(&quot;event&quot;))&#10;        val event = responseJson[&quot;event&quot;]!!.jsonObject&#10;&#10;        // Verify providers field exists and is empty&#10;        assertTrue(event.containsKey(&quot;providers&quot;))&#10;        val providers = event[&quot;providers&quot;]!!.jsonArray&#10;        assertEquals(0, providers.size)&#10;    }&#10;&#10;    @Test&#10;    fun `GET event by slug returns providers array when providers are attached`() = testApplication {&#10;        val userId = UUID.randomUUID()&#10;        val orgId = UUID.randomUUID()&#10;        val eventId = UUID.randomUUID()&#10;        val providerId1 = UUID.randomUUID()&#10;        val providerId2 = UUID.randomUUID()&#10;        val testOrgSlug = &quot;test-org&quot;&#10;        val testEventSlug = &quot;test-event&quot;&#10;        val email = &quot;john.doe@contact.com&quot; // Must match the mock auth email&#10;&#10;        application {&#10;            moduleMocked()&#10;            val user = insertMockedUser(userId, email = email)&#10;            insertMockedOrganisationEntity(id = orgId, name = testOrgSlug)&#10;            insertMockedEvent(id = eventId, orgId = orgId, slug = testEventSlug, name = &quot;Test Event&quot;)&#10;            insertMockedOrgaPermission(orgId = orgId, user = user, canEdit = true)&#10;&#10;            // Create providers&#10;            insertMockedProvider(id = providerId1, name = &quot;Provider A&quot;, type = &quot;Technology&quot;)&#10;            insertMockedProvider(id = providerId2, name = &quot;Provider B&quot;, type = &quot;Consulting&quot;)&#10;        }&#10;&#10;        // Attach providers to event using the API&#10;        val providerIds = listOf(providerId1.toString(), providerId2.toString())&#10;        val attachResponse = client.post(&quot;/orgs/$testOrgSlug/events/$testEventSlug/providers&quot;) {&#10;            contentType(ContentType.Application.Json)&#10;            header(HttpHeaders.Authorization, &quot;Bearer valid&quot;)&#10;            setBody(json.encodeToString(providerIds))&#10;        }&#10;        assertEquals(HttpStatusCode.OK, attachResponse.status)&#10;&#10;        // Now test that GET event returns the providers&#10;        val response = client.get(&quot;/events/$testEventSlug&quot;)&#10;        assertEquals(HttpStatusCode.OK, response.status)&#10;&#10;        val responseText = response.bodyAsText()&#10;        val responseJson = json.parseToJsonElement(responseText).jsonObject&#10;        val event = responseJson[&quot;event&quot;]!!.jsonObject&#10;&#10;        // Verify providers field exists and contains our providers&#10;        assertTrue(event.containsKey(&quot;providers&quot;))&#10;        val providers = event[&quot;providers&quot;]!!.jsonArray&#10;        assertEquals(2, providers.size)&#10;&#10;        // Verify provider details&#10;        val providerNames = providers.map { it.jsonObject[&quot;name&quot;]!!.toString().removeSurrounding(&quot;\&quot;&quot;) }&#10;        assertTrue(providerNames.contains(&quot;Provider A&quot;))&#10;        assertTrue(providerNames.contains(&quot;Provider B&quot;))&#10;&#10;        val providerTypes = providers.map { it.jsonObject[&quot;type&quot;]!!.toString().removeSurrounding(&quot;\&quot;&quot;) }&#10;        assertTrue(providerTypes.contains(&quot;Technology&quot;))&#10;        assertTrue(providerTypes.contains(&quot;Consulting&quot;))&#10;    }&#10;&#10;    @Test&#10;    fun `GET orgs events returns 400 for invalid page or pageSize`() = testApplication {&#10;        val orgId = UUID.randomUUID()&#10;        application {&#10;            moduleMocked()&#10;            val admin = insertMockedAdminUser()&#10;            val org = insertMockedOrganisationEntity(id = orgId, representativeUser = admin)&#10;            insertMockedOrgaPermission(orgId = orgId, user = admin)&#10;            insertMockedEventWithOrga(name = &quot;Event&quot;, slug = &quot;event&quot;, organisation = org)&#10;        }&#10;&#10;        val invalidParams = listOf(&#10;            &quot;page=0&quot;, // invalid page&#10;            &quot;page=-1&quot;, // invalid page&#10;            &quot;pageSize=0&quot;, // invalid pageSize&#10;            &quot;pageSize=-5&quot; // invalid pageSize&#10;        )&#10;&#10;        for (param in invalidParams) {&#10;            val response = client.get(&quot;/orgs/$orgId/events?$param&quot;) {&#10;                header(HttpHeaders.Authorization, &quot;Bearer valid&quot;)&#10;            }&#10;            assertEquals(HttpStatusCode.BadRequest, response.status, &quot;Should return 400 for param: $param&quot;)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package fr.devlille.partners.connect.events&#10;&#10;import fr.devlille.partners.connect.events.domain.Event&#10;import fr.devlille.partners.connect.events.factories.createEvent&#10;import fr.devlille.partners.connect.events.factories.insertMockedEvent&#10;import fr.devlille.partners.connect.events.factories.insertMockedEventWithOrga&#10;import fr.devlille.partners.connect.internal.moduleMocked&#10;import fr.devlille.partners.connect.organisations.factories.insertMockedOrganisationEntity&#10;import fr.devlille.partners.connect.provider.factories.insertMockedProvider&#10;import fr.devlille.partners.connect.users.factories.insertMockedAdminUser&#10;import fr.devlille.partners.connect.users.factories.insertMockedOrgaPermission&#10;import fr.devlille.partners.connect.users.factories.insertMockedUser&#10;import io.ktor.client.request.get&#10;import io.ktor.client.request.header&#10;import io.ktor.client.request.post&#10;import io.ktor.client.request.put&#10;import io.ktor.client.request.setBody&#10;import io.ktor.client.statement.bodyAsText&#10;import io.ktor.http.ContentType&#10;import io.ktor.http.HttpHeaders&#10;import io.ktor.http.HttpStatusCode&#10;import io.ktor.http.contentType&#10;import io.ktor.server.testing.testApplication&#10;import kotlinx.serialization.json.Json&#10;import kotlinx.serialization.json.jsonArray&#10;import kotlinx.serialization.json.jsonObject&#10;import java.util.UUID&#10;import kotlin.test.Test&#10;import kotlin.test.assertEquals&#10;import kotlin.test.assertNotNull&#10;import kotlin.test.assertTrue&#10;&#10;class EventRoutesTest {&#10;    private val json = Json { ignoreUnknownKeys = true }&#10;&#10;    @Test&#10;    fun `POST creates an event and grants access to creator`() = testApplication {&#10;        val orgId = UUID.randomUUID()&#10;        application {&#10;            moduleMocked()&#10;            val admin = insertMockedAdminUser()&#10;            insertMockedOrganisationEntity(id = orgId, representativeUser = admin)&#10;            insertMockedOrgaPermission(orgId = orgId, user = admin)&#10;        }&#10;&#10;        val response = client.post(&quot;/orgs/$orgId/events&quot;) {&#10;            contentType(ContentType.Application.Json)&#10;            header(HttpHeaders.Authorization, &quot;Bearer valid&quot;)&#10;            setBody(json.encodeToString(Event.serializer(), createEvent()))&#10;        }&#10;&#10;        assertEquals(HttpStatusCode.Created, response.status)&#10;        val responseText = response.bodyAsText()&#10;        val responseBody = Json.decodeFromString&lt;Map&lt;String, String&gt;&gt;(responseText)&#10;        assertNotNull(responseBody[&quot;slug&quot;], &quot;Response should contain a 'slug' field&quot;)&#10;    }&#10;&#10;    @Test&#10;    fun `PUT updates an existing event`() = testApplication {&#10;        val eventId = UUID.randomUUID()&#10;        val orgId = UUID.randomUUID()&#10;        val testSlug = &quot;test-event&quot;&#10;        application {&#10;            moduleMocked()&#10;            insertMockedOrganisationEntity(id = orgId)&#10;            // Create event with specific slug using the updated factory&#10;            insertMockedEvent(id = eventId, orgId = orgId, slug = testSlug)&#10;            insertMockedOrgaPermission(orgId = orgId, user = insertMockedAdminUser())&#10;        }&#10;&#10;        val response = client.put(&quot;/orgs/$orgId/events/$testSlug&quot;) {&#10;            contentType(ContentType.Application.Json)&#10;            header(HttpHeaders.Authorization, &quot;Bearer valid&quot;)&#10;            setBody(json.encodeToString(Event.serializer(), createEvent()))&#10;        }&#10;&#10;        assertEquals(HttpStatusCode.OK, response.status)&#10;        val updateBody = Json.decodeFromString&lt;Map&lt;String, String&gt;&gt;(response.bodyAsText())&#10;        assertEquals(testSlug, updateBody[&quot;slug&quot;])&#10;    }&#10;&#10;    @Test&#10;    fun `PUT returns 401 when user has no access to the event`() = testApplication {&#10;        val organisationId = UUID.randomUUID()&#10;        val eventId = UUID.randomUUID()&#10;        val testSlug = &quot;test-event-unauthorized&quot;&#10;&#10;        application {&#10;            moduleMocked()&#10;            insertMockedEventWithOrga(&#10;                id = eventId,&#10;                slug = testSlug,&#10;                organisation = insertMockedOrganisationEntity(&#10;                    id = organisationId,&#10;                    representativeUser = insertMockedAdminUser(),&#10;                ),&#10;            )&#10;        }&#10;&#10;        val updateResponse = client.put(&quot;/orgs/$organisationId/events/$testSlug&quot;) {&#10;            contentType(ContentType.Application.Json)&#10;            header(HttpHeaders.Authorization, &quot;Bearer valid&quot;)&#10;            setBody(json.encodeToString(Event.serializer(), createEvent()))&#10;        }&#10;&#10;        assertEquals(HttpStatusCode.Unauthorized, updateResponse.status)&#10;    }&#10;&#10;    @Test&#10;    fun `GET returns all events`() = testApplication {&#10;        val orgId = UUID.randomUUID()&#10;        application {&#10;            moduleMocked()&#10;            val org = insertMockedOrganisationEntity(id = orgId, representativeUser = insertMockedAdminUser())&#10;            insertMockedEventWithOrga(organisation = org)&#10;        }&#10;&#10;        val response = client.get(&quot;/events&quot;)&#10;        assertEquals(HttpStatusCode.OK, response.status)&#10;        val responseBody = response.bodyAsText()&#10;        val paginated = Json.parseToJsonElement(responseBody).jsonObject&#10;        val items = paginated[&quot;items&quot;]!!.jsonArray&#10;        assertTrue(items.isNotEmpty())&#10;        assertNotNull(paginated[&quot;page&quot;])&#10;        assertNotNull(paginated[&quot;page_size&quot;])&#10;        assertNotNull(paginated[&quot;total&quot;])&#10;    }&#10;&#10;    @Test&#10;    fun `GET orgs events returns events for organization with valid user`() = testApplication {&#10;        val orgId = UUID.randomUUID()&#10;        application {&#10;            moduleMocked()&#10;            val admin = insertMockedAdminUser()&#10;            val org = insertMockedOrganisationEntity(id = orgId, representativeUser = admin)&#10;            insertMockedOrgaPermission(orgId = orgId, user = admin)&#10;            insertMockedEventWithOrga(name = &quot;First Event&quot;, slug = &quot;first-event&quot;, organisation = org)&#10;            insertMockedEventWithOrga(name = &quot;Second Event&quot;, slug = &quot;second-event&quot;, organisation = org)&#10;        }&#10;&#10;        val response = client.get(&quot;/orgs/$orgId/events&quot;) {&#10;            header(HttpHeaders.Authorization, &quot;Bearer valid&quot;)&#10;        }&#10;&#10;        assertEquals(HttpStatusCode.OK, response.status)&#10;        val responseBody = response.bodyAsText()&#10;        val paginated = Json.parseToJsonElement(responseBody).jsonObject&#10;        val items = paginated[&quot;items&quot;]!!.jsonArray&#10;        assertEquals(2, items.size)&#10;        assertEquals(1, paginated[&quot;page&quot;]!!.toString().toInt())&#10;        assertEquals(20, paginated[&quot;page_size&quot;]!!.toString().toInt()) // default pageSize, adjust if needed&#10;        assertEquals(2, paginated[&quot;total&quot;]!!.toString().toInt())&#10;    }&#10;&#10;    @Test&#10;    fun `GET orgs events returns empty list when organization has no events`() = testApplication {&#10;        val orgId = UUID.randomUUID()&#10;        application {&#10;            moduleMocked()&#10;            val admin = insertMockedAdminUser()&#10;            insertMockedOrganisationEntity(id = orgId, representativeUser = admin)&#10;            insertMockedOrgaPermission(orgId = orgId, user = admin)&#10;        }&#10;&#10;        val response = client.get(&quot;/orgs/$orgId/events&quot;) {&#10;            header(HttpHeaders.Authorization, &quot;Bearer valid&quot;)&#10;        }&#10;&#10;        assertEquals(HttpStatusCode.OK, response.status)&#10;        val responseBody = response.bodyAsText()&#10;        val paginated = Json.parseToJsonElement(responseBody).jsonObject&#10;        val items = paginated[&quot;items&quot;]!!.jsonArray&#10;        assertEquals(0, items.size)&#10;        assertEquals(1, paginated[&quot;page&quot;]!!.toString().toInt())&#10;        assertEquals(20, paginated[&quot;page_size&quot;]!!.toString().toInt()) // default pageSize, adjust if needed&#10;        assertEquals(0, paginated[&quot;total&quot;]!!.toString().toInt())&#10;    }&#10;&#10;    @Test&#10;    fun `GET orgs events returns 404 when organization does not exist`() = testApplication {&#10;        val nonExistentOrgId = UUID.randomUUID()&#10;        application {&#10;            moduleMocked()&#10;            val admin = insertMockedAdminUser()&#10;            // Don't create any organization or permissions - just test with non-existent org&#10;        }&#10;&#10;        val response = client.get(&quot;/orgs/$nonExistentOrgId/events&quot;) {&#10;            header(HttpHeaders.Authorization, &quot;Bearer valid&quot;)&#10;        }&#10;&#10;        assertEquals(HttpStatusCode.NotFound, response.status)&#10;    }&#10;&#10;    @Test&#10;    fun `GET orgs events returns 401 when user has no permissions`() = testApplication {&#10;        val orgId = UUID.randomUUID()&#10;        application {&#10;            moduleMocked()&#10;            val admin = insertMockedAdminUser()&#10;            val org = insertMockedOrganisationEntity(id = orgId, representativeUser = admin)&#10;            insertMockedEventWithOrga(organisation = org)&#10;            // No organization permission granted to user&#10;        }&#10;&#10;        val response = client.get(&quot;/orgs/$orgId/events&quot;) {&#10;            header(HttpHeaders.Authorization, &quot;Bearer valid&quot;)&#10;        }&#10;&#10;        assertEquals(HttpStatusCode.Unauthorized, response.status)&#10;    }&#10;&#10;    @Test&#10;    fun `GET orgs events returns 401 when no authorization header provided`() = testApplication {&#10;        val orgId = UUID.randomUUID()&#10;        application {&#10;            moduleMocked()&#10;            val admin = insertMockedAdminUser()&#10;            val org = insertMockedOrganisationEntity(id = orgId, representativeUser = admin)&#10;            insertMockedEventWithOrga(organisation = org)&#10;            insertMockedOrgaPermission(orgId = orgId, user = admin)&#10;        }&#10;&#10;        val response = client.get(&quot;/orgs/$orgId/events&quot;)&#10;&#10;        assertEquals(HttpStatusCode.Unauthorized, response.status)&#10;    }&#10;&#10;    @Test&#10;    fun `GET events by slug returns event with organization for valid slug`() = testApplication {&#10;        val eventId = UUID.randomUUID()&#10;        val eventSlug = &quot;test-event&quot;&#10;        application {&#10;            moduleMocked()&#10;            val admin = insertMockedAdminUser()&#10;            val org = insertMockedOrganisationEntity(representativeUser = admin)&#10;            insertMockedEventWithOrga(id = eventId, slug = eventSlug, organisation = org)&#10;        }&#10;&#10;        val response = client.get(&quot;/events/$eventSlug&quot;)&#10;&#10;        assertEquals(HttpStatusCode.OK, response.status)&#10;        val responseBody = response.bodyAsText()&#10;        val eventWithOrg = Json.parseToJsonElement(responseBody).jsonObject&#10;&#10;        // Verify response structure&#10;        assert(eventWithOrg.containsKey(&quot;event&quot;))&#10;        assert(eventWithOrg.containsKey(&quot;organisation&quot;))&#10;&#10;        // Verify event structure&#10;        val eventObject = eventWithOrg[&quot;event&quot;]?.jsonObject&#10;        assertNotNull(eventObject)&#10;        assertTrue(eventObject!!.containsKey(&quot;slug&quot;))&#10;        assertTrue(eventObject.containsKey(&quot;name&quot;))&#10;        assertTrue(eventObject.containsKey(&quot;start_time&quot;))&#10;        assertTrue(eventObject.containsKey(&quot;end_time&quot;))&#10;        assertTrue(eventObject.containsKey(&quot;submission_start_time&quot;))&#10;        assertTrue(eventObject.containsKey(&quot;submission_end_time&quot;))&#10;        assertTrue(eventObject.containsKey(&quot;address&quot;))&#10;        assertTrue(eventObject.containsKey(&quot;contact&quot;))&#10;&#10;        // Verify organisation structure&#10;        val organisationObject = eventWithOrg[&quot;organisation&quot;]?.jsonObject&#10;        assertNotNull(organisationObject)&#10;        assert(organisationObject!!.containsKey(&quot;name&quot;))&#10;        assert(organisationObject.containsKey(&quot;slug&quot;))&#10;        assert(organisationObject.containsKey(&quot;head_office&quot;))&#10;        assert(organisationObject.containsKey(&quot;owner&quot;))&#10;    }&#10;&#10;    @Test&#10;    fun `GET events by slug returns 404 for non-existent event`() = testApplication {&#10;        val nonExistentEventSlug = &quot;non-existent-event&quot;&#10;        application {&#10;            moduleMocked()&#10;        }&#10;&#10;        val response = client.get(&quot;/events/$nonExistentEventSlug&quot;)&#10;&#10;        assertEquals(HttpStatusCode.NotFound, response.status)&#10;    }&#10;&#10;    @Test&#10;    fun `GET events by slug accepts various slug formats`() = testApplication {&#10;        application {&#10;            moduleMocked()&#10;        }&#10;&#10;        val response = client.get(&quot;/events/valid-event-slug&quot;)&#10;&#10;        // This should return 404 (not found) rather than 400 (bad request)&#10;        // since slug format is valid, even if event doesn't exist&#10;        assertEquals(HttpStatusCode.NotFound, response.status)&#10;    }&#10;&#10;    @Test&#10;    fun `GET events by slug is public and returns correct response structure`() = testApplication {&#10;        val eventId = UUID.randomUUID()&#10;        val eventSlug = &quot;public-test-event&quot;&#10;        application {&#10;            moduleMocked()&#10;            val admin = insertMockedAdminUser()&#10;            val org = insertMockedOrganisationEntity(representativeUser = admin)&#10;            insertMockedEventWithOrga(id = eventId, slug = eventSlug, organisation = org)&#10;        }&#10;&#10;        // No authentication header - this is a public endpoint&#10;        val response = client.get(&quot;/events/$eventSlug&quot;)&#10;&#10;        assertEquals(HttpStatusCode.OK, response.status)&#10;        val responseBody = response.bodyAsText()&#10;        val responseJson = Json.parseToJsonElement(responseBody).jsonObject&#10;&#10;        // Verify top-level structure&#10;        assertTrue(responseJson.containsKey(&quot;event&quot;))&#10;        assertTrue(responseJson.containsKey(&quot;organisation&quot;))&#10;&#10;        // Verify event structure has required fields&#10;        val event = responseJson[&quot;event&quot;]!!.jsonObject&#10;        assertTrue(event.containsKey(&quot;slug&quot;))&#10;        assertTrue(event.containsKey(&quot;name&quot;))&#10;        assertTrue(event.containsKey(&quot;start_time&quot;))&#10;        assertTrue(event.containsKey(&quot;end_time&quot;))&#10;        assertTrue(event.containsKey(&quot;submission_start_time&quot;))&#10;        assertTrue(event.containsKey(&quot;submission_end_time&quot;))&#10;        assertTrue(event.containsKey(&quot;address&quot;))&#10;        assertTrue(event.containsKey(&quot;contact&quot;))&#10;        assertTrue(event.containsKey(&quot;external_links&quot;))&#10;&#10;        // Verify external_links is an array (should be empty for this test)&#10;        val externalLinks = event[&quot;external_links&quot;]!!.jsonArray&#10;        assertEquals(0, externalLinks.size)&#10;&#10;        // Verify organization structure has required fields&#10;        val organisation = responseJson[&quot;organisation&quot;]!!.jsonObject&#10;        assertTrue(organisation.containsKey(&quot;name&quot;))&#10;        assertTrue(organisation.containsKey(&quot;slug&quot;))&#10;        assertTrue(organisation.containsKey(&quot;head_office&quot;))&#10;        assertTrue(organisation.containsKey(&quot;owner&quot;))&#10;    }&#10;&#10;    @Test&#10;    fun `GET events by slug includes external links in response`() = testApplication {&#10;        val eventId = UUID.randomUUID()&#10;        val eventSlug = &quot;event-with-external-links&quot;&#10;        val orgId = UUID.randomUUID()&#10;        val orgSlug = &quot;test-org&quot;&#10;&#10;        application {&#10;            moduleMocked()&#10;            val admin = insertMockedAdminUser()&#10;            val org = insertMockedOrganisationEntity(id = orgId, name = orgSlug, representativeUser = admin)&#10;            insertMockedEventWithOrga(id = eventId, slug = eventSlug, organisation = org)&#10;            insertMockedOrgaPermission(orgId = orgId, user = admin)&#10;        }&#10;&#10;        // First, create an external link&#10;        val createRequest = fr.devlille.partners.connect.events.domain.CreateEventExternalLinkRequest(&#10;            name = &quot;Call for Papers&quot;,&#10;            url = &quot;https://sessionize.com/devlille2025&quot;,&#10;        )&#10;&#10;        val createResponse = client.post(&quot;/orgs/$orgSlug/events/$eventSlug/external-link&quot;) {&#10;            contentType(ContentType.Application.Json)&#10;            header(HttpHeaders.Authorization, &quot;Bearer valid&quot;)&#10;            setBody(Json.encodeToString(createRequest))&#10;        }&#10;&#10;        assertEquals(HttpStatusCode.Created, createResponse.status)&#10;&#10;        // Now get the event and verify the external link is included&#10;        val getResponse = client.get(&quot;/events/$eventSlug&quot;)&#10;&#10;        assertEquals(HttpStatusCode.OK, getResponse.status)&#10;        val responseBody = getResponse.bodyAsText()&#10;        val responseJson = Json.parseToJsonElement(responseBody).jsonObject&#10;&#10;        val event = responseJson[&quot;event&quot;]!!.jsonObject&#10;        assertTrue(event.containsKey(&quot;external_links&quot;))&#10;&#10;        val externalLinks = event[&quot;external_links&quot;]!!.jsonArray&#10;        assertEquals(1, externalLinks.size)&#10;&#10;        val externalLink = externalLinks[0].jsonObject&#10;        assertTrue(externalLink.containsKey(&quot;id&quot;))&#10;        assertEquals(&quot;Call for Papers&quot;, externalLink[&quot;name&quot;]!!.toString().removeSurrounding(&quot;\&quot;&quot;))&#10;        assertEquals(&quot;https://sessionize.com/devlille2025&quot;, externalLink[&quot;url&quot;]!!.toString().removeSurrounding(&quot;\&quot;&quot;))&#10;    }&#10;&#10;    @Test&#10;    fun `GET event by slug returns empty providers array when no providers attached`() = testApplication {&#10;        val eventId = UUID.randomUUID()&#10;        val eventSlug = &quot;test-event-no-providers&quot;&#10;        application {&#10;            moduleMocked()&#10;            val admin = insertMockedAdminUser()&#10;            val org = insertMockedOrganisationEntity(representativeUser = admin)&#10;            insertMockedEventWithOrga(id = eventId, slug = eventSlug, organisation = org)&#10;        }&#10;&#10;        val response = client.get(&quot;/events/$eventSlug&quot;)&#10;&#10;        assertEquals(HttpStatusCode.OK, response.status)&#10;        val responseBody = response.bodyAsText()&#10;        val responseJson = Json.parseToJsonElement(responseBody).jsonObject&#10;&#10;        // Verify top-level structure&#10;        assertTrue(responseJson.containsKey(&quot;event&quot;))&#10;        val event = responseJson[&quot;event&quot;]!!.jsonObject&#10;&#10;        // Verify providers field exists and is empty&#10;        assertTrue(event.containsKey(&quot;providers&quot;))&#10;        val providers = event[&quot;providers&quot;]!!.jsonArray&#10;        assertEquals(0, providers.size)&#10;    }&#10;&#10;    @Test&#10;    fun `GET event by slug returns providers array when providers are attached`() = testApplication {&#10;        val userId = UUID.randomUUID()&#10;        val orgId = UUID.randomUUID()&#10;        val eventId = UUID.randomUUID()&#10;        val providerId1 = UUID.randomUUID()&#10;        val providerId2 = UUID.randomUUID()&#10;        val testOrgSlug = &quot;test-org&quot;&#10;        val testEventSlug = &quot;test-event&quot;&#10;        val email = &quot;john.doe@contact.com&quot; // Must match the mock auth email&#10;&#10;        application {&#10;            moduleMocked()&#10;            val user = insertMockedUser(userId, email = email)&#10;            insertMockedOrganisationEntity(id = orgId, name = testOrgSlug)&#10;            insertMockedEvent(id = eventId, orgId = orgId, slug = testEventSlug, name = &quot;Test Event&quot;)&#10;            insertMockedOrgaPermission(orgId = orgId, user = user, canEdit = true)&#10;&#10;            // Create providers&#10;            insertMockedProvider(id = providerId1, name = &quot;Provider A&quot;, type = &quot;Technology&quot;)&#10;            insertMockedProvider(id = providerId2, name = &quot;Provider B&quot;, type = &quot;Consulting&quot;)&#10;        }&#10;&#10;        // Attach providers to event using the API&#10;        val providerIds = listOf(providerId1.toString(), providerId2.toString())&#10;        val attachResponse = client.post(&quot;/orgs/$testOrgSlug/events/$testEventSlug/providers&quot;) {&#10;            contentType(ContentType.Application.Json)&#10;            header(HttpHeaders.Authorization, &quot;Bearer valid&quot;)&#10;            setBody(json.encodeToString(providerIds))&#10;        }&#10;        assertEquals(HttpStatusCode.OK, attachResponse.status)&#10;&#10;        // Now test that GET event returns the providers&#10;        val response = client.get(&quot;/events/$testEventSlug&quot;)&#10;        assertEquals(HttpStatusCode.OK, response.status)&#10;&#10;        val responseText = response.bodyAsText()&#10;        val responseJson = json.parseToJsonElement(responseText).jsonObject&#10;        val event = responseJson[&quot;event&quot;]!!.jsonObject&#10;&#10;        // Verify providers field exists and contains our providers&#10;        assertTrue(event.containsKey(&quot;providers&quot;))&#10;        val providers = event[&quot;providers&quot;]!!.jsonArray&#10;        assertEquals(2, providers.size)&#10;&#10;        // Verify provider details&#10;        val providerNames = providers.map { it.jsonObject[&quot;name&quot;]!!.toString().removeSurrounding(&quot;\&quot;&quot;) }&#10;        assertTrue(providerNames.contains(&quot;Provider A&quot;))&#10;        assertTrue(providerNames.contains(&quot;Provider B&quot;))&#10;&#10;        val providerTypes = providers.map { it.jsonObject[&quot;type&quot;]!!.toString().removeSurrounding(&quot;\&quot;&quot;) }&#10;        assertTrue(providerTypes.contains(&quot;Technology&quot;))&#10;        assertTrue(providerTypes.contains(&quot;Consulting&quot;))&#10;    }&#10;&#10;    @Test&#10;    fun `GET orgs events returns 400 for invalid page or pageSize`() = testApplication {&#10;        val orgId = UUID.randomUUID()&#10;        application {&#10;            moduleMocked()&#10;            val admin = insertMockedAdminUser()&#10;            val org = insertMockedOrganisationEntity(id = orgId, representativeUser = admin)&#10;            insertMockedOrgaPermission(orgId = orgId, user = admin)&#10;            insertMockedEventWithOrga(name = &quot;Event&quot;, slug = &quot;event&quot;, organisation = org)&#10;        }&#10;&#10;        val invalidParams = listOf(&#10;            &quot;page=0&quot;, // invalid page&#10;            &quot;page=-1&quot;, // invalid page&#10;            &quot;pageSize=0&quot;, // invalid pageSize&#10;            &quot;pageSize=-5&quot; // invalid pageSize&#10;        )&#10;&#10;        for (param in invalidParams) {&#10;            val response = client.get(&quot;/orgs/$orgId/events?$param&quot;) {&#10;                header(HttpHeaders.Authorization, &quot;Bearer valid&quot;)&#10;            }&#10;            assertEquals(HttpStatusCode.BadRequest, response.status, &quot;Should return 400 for param: $param&quot;)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>