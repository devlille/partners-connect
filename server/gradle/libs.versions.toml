[versions]
apache-xmlgraphics-batik = "1.19"
detekt = "1.23.8"
exposed = "1.0.0-beta-2"
h2 = "2.2.224"
okhttp = "4.12.0"
flexmark = "0.64.8"
mustache = "0.9.10"
slack = "1.45.3"
kotlin = "2.1.21"
kotlinx-datetime = "0.6.1"
kotlinx-serialization = "1.7.3"
kotlinx-coroutines = "1.9.0"
koin = "4.1.0"
ktlint = "12.3.0"
ktor = "3.2.0"
google-cloud-storage = "2.52.2"
mockk = "1.14.5"
postgresql = "42.7.1"
imgscalr = "4.2"
shadow = "9.0.0-rc1"

[libraries]
apache-xmlgraphics-batik-transcoder = { module = "org.apache.xmlgraphics:batik-transcoder", version.ref = "apache-xmlgraphics-batik" }
apache-xmlgraphics-batik-codec = { module = "org.apache.xmlgraphics:batik-codec", version.ref = "apache-xmlgraphics-batik" }

exposed-core = { module = "org.jetbrains.exposed:exposed-core", version.ref = "exposed" }
exposed-jdbc = { module = "org.jetbrains.exposed:exposed-jdbc", version.ref = "exposed" }
exposed-dao = { module = "org.jetbrains.exposed:exposed-dao", version.ref = "exposed" }
exposed-crypt = { module = "org.jetbrains.exposed:exposed-crypt", version.ref = "exposed" }
exposed-kotlin-datetime = { module = "org.jetbrains.exposed:exposed-kotlin-datetime", version.ref = "exposed" }

okhttp = { module = "com.squareup.okhttp3:okhttp", version.ref = "okhttp" }
okhttp-mockwebserver = { module = "com.squareup.okhttp3:mockwebserver", version.ref = "okhttp" }

flexmark = { module = "com.vladsch.flexmark:flexmark-all", version.ref = "flexmark" }
mustache = { module = "com.github.spullara.mustache.java:compiler", version.ref = "mustache" }

slack = { module = "com.slack.api:slack-api-client", version.ref = "slack" }
slack-api-model = { module = "com.slack.api:slack-api-model-kotlin-extension", version.ref = "slack" }
slack-api-client = { module = "com.slack.api:slack-api-client-kotlin-extension", version.ref = "slack" }

kotlinx-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinx-datetime" }
kotlinx-serialization = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinx-serialization" }
kotlinx-coroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinx-coroutines" }

insert-koin = { module = "io.insert-koin:koin-ktor", version.ref = "koin" }
insert-koin-logger = { module = "io.insert-koin:koin-logger-slf4j", version.ref = "koin" }

ktor-server-core = { module = "io.ktor:ktor-server-core", version.ref = "ktor" }
ktor-server-auth = { module = "io.ktor:ktor-server-auth", version.ref = "ktor" }
ktor-server-netty = { module = "io.ktor:ktor-server-netty", version.ref = "ktor" }
ktor-server-negotiation = { module = "io.ktor:ktor-server-content-negotiation", version.ref = "ktor" }
ktor-server-statuspages = { module = "io.ktor:ktor-server-status-pages", version.ref = "ktor" }
ktor-server-cors = { module = "io.ktor:ktor-server-cors", version.ref = "ktor" }
ktor-server-conditional = { module = "io.ktor:ktor-server-conditional-headers", version.ref = "ktor" }
ktor-server-sessions = { module = "io.ktor:ktor-server-sessions", version.ref = "ktor" }
ktor-server-openapi = { module = "io.ktor:ktor-server-openapi", version.ref = "ktor" }
ktor-server-swagger = { module = "io.ktor:ktor-server-swagger", version.ref = "ktor" }
ktor-server-test = { module = "io.ktor:ktor-server-test-host", version.ref = "ktor" }
ktor-serialization-json = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }

ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-json = { module = "io.ktor:ktor-client-json", version.ref = "ktor" }
ktor-client-logging = { module = "io.ktor:ktor-client-logging", version.ref = "ktor" }
ktor-client-serialization = { module = "io.ktor:ktor-client-serialization", version.ref = "ktor" }
ktor-client-negotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-client-java = { module = "io.ktor:ktor-client-java", version.ref = "ktor" }
ktor-client-mock = { module = "io.ktor:ktor-client-mock", version.ref = "ktor" }

mockk = { module = "io.mockk:mockk", version.ref = "mockk" }

h2 = { module = "com.h2database:h2", version.ref = "h2" }
postgresql = { module = "org.postgresql:postgresql", version.ref = "postgresql" }

google-cloud-storage = { module = "com.google.cloud:google-cloud-storage", version.ref = "google-cloud-storage" }

imgscalr = { module = "org.imgscalr:imgscalr-lib", version.ref = "imgscalr" }

# Libraries can be bundled together for easier import
[bundles]
image-processing = ["apache-xmlgraphics-batik-transcoder", "apache-xmlgraphics-batik-codec", "imgscalr"]
exposed = ["exposed-core", "exposed-jdbc", "exposed-dao", "exposed-crypt", "exposed-kotlin-datetime", "postgresql", "h2"]
slack-api = ["slack", "slack-api-model", "slack-api-client"]
okhttp-mock = ["okhttp", "okhttp-mockwebserver"]
kotlinx-ecosystem = ["kotlinx-datetime", "kotlinx-serialization", "kotlinx-coroutines"]
koin-ktor = ["insert-koin", "insert-koin-logger"]
ktor-server = ["ktor-server-core", "ktor-server-auth", "ktor-server-netty", "ktor-server-negotiation", "ktor-server-statuspages", "ktor-server-cors", "ktor-server-conditional", "ktor-server-sessions", "ktor-server-openapi", "ktor-server-swagger", "ktor-serialization-json"]
ktor-client = ["ktor-client-core", "ktor-client-json", "ktor-client-logging", "ktor-client-serialization", "ktor-client-negotiation", "ktor-client-java"]

[plugins]
detekt = { id = "io.gitlab.arturbosch.detekt", version.ref = "detekt" }
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
ktlint = { id = "org.jlleitschuh.gradle.ktlint", version.ref = "ktlint" }
shadow = { id = "com.gradleup.shadow", version.ref = "shadow" }
