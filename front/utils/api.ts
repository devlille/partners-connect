/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * partners_connect API
 * partners_connect API
 * OpenAPI spec version: 1.0.0
 */
import { customFetch } from '../custom-instance';
export type UserSession = UserSessionSchema;

export type UserInfo = UserInfoSchema;

export type Address = AddressSchema;

export type Media = MediaSchema;

export type Company = CompanySchema;

export type Social = SocialSchema;

export type CreateCompany = CreateCompanySchema;

export type Identifier = IdentifierSchema;

export type Contact = ContactSchema;

export type PartnershipItem = PartnershipItemSchema;

export type EventSummary = EventSummarySchema;

export type Event = EventSchema;

export type EventDisplay = EventDisplaySchema;

export type CreateEventExternalLink = CreateEventExternalLinkSchema;

export type Organisation = OrganisationSchema;

export type EventWithOrganisation = EventWithOrganisationSchema;

export type RegisterPartnership = RegisterPartnershipSchema;

export type CompanyBillingData = CompanyBillingDataSchema;

export type TicketData = TicketDataSchema;

export type Ticket = TicketSchema;

export type TicketOrder = TicketOrderSchema;

export type SponsoringOption = SponsoringOptionSchema;

export type TranslatedLabel = TranslatedLabelSchema;

export type CreateSponsoringOption = CreateSponsoringOptionSchema;

export type SponsoringPack = SponsoringPackSchema;

export type CreateSponsoringPack = CreateSponsoringPackSchema;

export type AttachOptionsToPack = AttachOptionsToPackSchema;

export type SuggestPartnership = SuggestPartnershipSchema;

export type User = UserSchema;

export type GrantPermissionRequest = GrantPermissionRequestSchema;

export type OrganisationItem = OrganisationItemSchema;

export type Provider = ProviderSchema;

export type CreateProvider = CreateProviderSchema;

export type BoothLocationRequest = BoothLocationRequestSchema;

export type BoothLocationResponse = BoothLocationResponseSchema;

export type PublicationDateRequest = PublicationDateRequestSchema;

export type PublicationDateResponse = PublicationDateResponseSchema;

export type SupportUploadResponse = SupportUploadResponseSchema;

export type CommunicationItem = CommunicationItemSchema;

export type CommunicationPlan = CommunicationPlanSchema;

export type PaginatedEventSummary = PaginatedEventSummarySchema;

export type PaginatedCompany = PaginatedCompanySchema;

export type PaginatedProvider = PaginatedProviderSchema;

export type CreateByIdentifiers = CreateByIdentifiersSchema;

export interface UserSessionSchema {
  state: string;
  token: string;
}

export interface UserInfoSchema {
  display_name: string;
  /** @nullable */
  picture_url?: string | null;
  email: string;
}

export interface AddressSchema {
  address: string;
  city: string;
  zip_code: string;
  country: string;
}

export interface MediaSchema {
  original: string;
  png_1000: string;
  png_500: string;
  png_250: string;
}

export interface CompanySchema {
  id: string;
  name: string;
  head_office: AddressSchema;
  siret: string;
  vat: string;
  /** @nullable */
  description?: string | null;
  site_url: string;
  /** @nullable */
  medias?: MediaSchema;
}

export interface PaginatedCompanySchema {
  items: CompanySchema[];
  page: number;
  page_size: number;
  total: number;
}

export type SocialSchemaType = typeof SocialSchemaType[keyof typeof SocialSchemaType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SocialSchemaType = {
  LINKEDIN: 'LINKEDIN',
  X: 'X',
  BLUESKY: 'BLUESKY',
  MASTODON: 'MASTODON',
  INSTAGRAM: 'INSTAGRAM',
  FACEBOOK: 'FACEBOOK',
  YOUTUBE: 'YOUTUBE',
} as const;

export interface SocialSchema {
  type: SocialSchemaType;
  url: string;
}

export interface CreateCompanySchema {
  name: string;
  head_office: AddressSchema;
  siret: string;
  vat: string;
  /** @nullable */
  description?: string | null;
  site_url: string;
  socials?: SocialSchema[];
}

export interface IdentifierSchema {
  id: string;
}

export interface ContactSchema {
  display_name: string;
  role: string;
}

export interface PartnershipItemSchema {
  id: string;
  contact: ContactSchema;
  company_name: string;
  event_name: string;
  /** @nullable */
  pack_name?: string | null;
  /** @nullable */
  suggested_pack_name?: string | null;
  language: string;
  /** @nullable */
  phone?: string | null;
  emails?: string;
  created_at: string;
}

export interface EventSummarySchema {
  slug: string;
  name: string;
  start_time: string;
  end_time: string;
  submission_start_time: string;
  submission_end_time: string;
}

export interface PaginatedEventSummarySchema {
  items: EventSummarySchema[];
  page: number;
  page_size: number;
  total: number;
}

export interface EventContactSchema {
  email: string;
  /** @nullable */
  phone: string | null;
}

export interface EventExternalLinkSchema {
  id: string;
  name: string;
  url: string;
}

export interface ProviderSchema {
  id: string;
  name: string;
  type: string;
  /** @nullable */
  website: string | null;
  /** @nullable */
  phone?: string | null;
  /** @nullable */
  email?: string | null;
  created_at: string;
}

export interface EventDisplaySchema {
  slug: string;
  name: string;
  start_time: string;
  end_time: string;
  submission_start_time: string;
  submission_end_time: string;
  address: string;
  contact: EventContactSchema;
  external_links: EventExternalLinkSchema[];
  providers: ProviderSchema;
}

export interface OwnerSchema {
  display_name: string;
  email: string;
}

export interface OrganisationItemSchema {
  slug: string;
  name: string;
  head_office: string;
  /** @nullable */
  owner?: OwnerSchema;
}

export interface EventWithOrganisationSchema {
  event: EventDisplaySchema;
  organisation: OrganisationItemSchema;
}

export interface RegisterPartnershipSchema {
  company_id: string;
  pack_id: string;
  option_ids?: string[];
  contact_name: string;
  contact_role: string;
  language: string;
  /** @nullable */
  phone?: string | null;
  emails?: string[];
}

export interface BillingContactSchema {
  first_name: string;
  last_name: string;
  email: string;
}

export interface CompanyBillingDataSchema {
  /** @nullable */
  name?: string | null;
  /** @nullable */
  po?: string | null;
  contact: BillingContactSchema;
}

export interface TicketDataSchema {
  first_name: string;
  last_name: string;
}

export interface TicketSchema {
  id: string;
  external_id: string;
  url: string;
  data: TicketDataSchema;
}

export interface TicketOrderSchema {
  id: string;
  tickets: TicketSchema[];
}

export interface PaginatedProviderSchema {
  items: ProviderSchema[];
  page: number;
  page_size: number;
  total: number;
}

export interface CreateProviderSchema {
  name: string;
  type: string;
  /** @nullable */
  website?: string | null;
  /** @nullable */
  phone?: string | null;
  /** @nullable */
  email?: string | null;
}

export interface OrganisationSchema {
  name: string;
  /** @nullable */
  head_office?: string | null;
  /** @nullable */
  siret?: string | null;
  /** @nullable */
  siren?: string | null;
  /** @nullable */
  tva?: string | null;
  /** @nullable */
  d_and_b?: string | null;
  /** @nullable */
  nace?: string | null;
  /** @nullable */
  naf?: string | null;
  /** @nullable */
  duns?: string | null;
  /** @nullable */
  iban?: string | null;
  /** @nullable */
  bic?: string | null;
  /** @nullable */
  rib_url?: string | null;
  /** @nullable */
  representative_user_email?: string | null;
  /** @nullable */
  representative_role?: string | null;
  /** @nullable */
  creation_location?: string | null;
  /** @nullable */
  created_at?: string | null;
  /** @nullable */
  published_at?: string | null;
}

export interface EventSchema {
  name: string;
  start_time: string;
  end_time: string;
  submission_start_time: string;
  submission_end_time: string;
  address: string;
  contact: EventContactSchema;
}

export interface SponsoringOptionSchema {
  id: string;
  name: string;
  /** @nullable */
  description?: string | null;
  /** @nullable */
  price?: number | null;
}

export interface TranslatedLabelSchema {
  language: string;
  name: string;
  /** @nullable */
  description?: string | null;
}

export interface CreateSponsoringOptionSchema {
  translations: TranslatedLabelSchema[];
  /** @nullable */
  price?: number | null;
}

export interface SponsoringPackSchema {
  id: string;
  name: string;
  base_price: number;
  /** @nullable */
  max_quantity?: number | null;
  required_options: SponsoringOptionSchema[];
  optional_options: SponsoringOptionSchema[];
}

export interface CreateSponsoringPackSchema {
  name: string;
  price: number;
  with_booth?: boolean;
  nb_tickets: number;
  /** @nullable */
  max_quantity?: number | null;
}

export interface AttachOptionsToPackSchema {
  required: string[];
  optional: string[];
}

export interface CommunicationItemSchema {
  partnership_id: string;
  company_name: string;
  /** @nullable */
  publication_date?: string | null;
  /** @nullable */
  support_url?: string | null;
}

export interface CommunicationPlanSchema {
  done: CommunicationItemSchema[];
  planned: CommunicationItemSchema[];
  unplanned: CommunicationItemSchema[];
}

export interface CreateEventExternalLinkSchema {
  name: string;
  url: string;
}

export interface BoothLocationRequestSchema {
  location: string;
}

export interface BoothLocationResponseSchema {
  id: string;
  location: string;
}

export interface SuggestPartnershipSchema {
  pack_id: string;
  option_ids?: string[];
  language: string;
}

export interface PublicationDateRequestSchema {
  publication_date: string;
}

export interface PublicationDateResponseSchema {
  id: string;
  publication_date: string;
}

export interface SupportUploadResponseSchema {
  id: string;
  url: string;
}

export type CreateByIdentifiersSchema = string[];

export interface UserSchema {
  /** @nullable */
  display_name?: string | null;
  /** @nullable */
  picture_url?: string | null;
  email: string;
}

export interface GrantPermissionRequestSchema {
  user_emails: string[];
}

export type GetAuthCallback404 = { [key: string]: unknown };

export type GetCompaniesParams = {
query?: string;
/**
 * Page number (must be >= 1)
 * @minimum 1
 */
page?: number;
/**
 * Number of items per page (must be between 1 and 100)
 * @minimum 1
 * @maximum 100
 */
page_size?: number;
};

export type PostCompaniesCompanyIdLogoBody = {
  /** Logo file (SVG, PNG, or JPEG) */
  file?: Blob;
};

export type GetEventsParams = {
/**
 * Page number (must be >= 1)
 * @minimum 1
 */
page?: number;
/**
 * Number of items per page (must be between 1 and 100)
 * @minimum 1
 * @maximum 100
 */
page_size?: number;
};

export type PostEventsEventSlugPartnershipPartnershipIdSignedAgreementBody = {
  /** Signed agreement PDF file */
  file?: Blob;
};

export type GetProvidersParams = {
/**
 * Search providers by name (case-insensitive)
 */
query?: string;
/**
 * Sort by field (default: createdAt)
 */
sort?: GetProvidersSort;
/**
 * Sort direction (default: asc)
 */
direction?: GetProvidersDirection;
/**
 * Page number (must be >= 1)
 * @minimum 1
 */
page?: number;
/**
 * Number of items per page (must be between 1 and 100)
 * @minimum 1
 * @maximum 100
 */
page_size?: number;
};

export type GetProvidersSort = typeof GetProvidersSort[keyof typeof GetProvidersSort];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetProvidersSort = {
  name: 'name',
  createdAt: 'createdAt',
  creation: 'creation',
  created: 'created',
} as const;

export type GetProvidersDirection = typeof GetProvidersDirection[keyof typeof GetProvidersDirection];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetProvidersDirection = {
  asc: 'asc',
  desc: 'desc',
} as const;

export type PostProviders201 = {
  /** UUID of the created provider */
  id: string;
};

export type GetOrgsOrgSlugEventsParams = {
/**
 * Page number (default: 1)
 * @minimum 1
 */
page?: number;
/**
 * Number of items per page (default: 20)
 * @minimum 1
 * @maximum 100
 */
page_size?: number;
};

export type PostOrgsOrgSlugEventsEventSlugBoothPlanBody = {
  /** Booth plan image file (PNG, JPEG, GIF) */
  file?: Blob;
};

export type PostOrgsOrgSlugEventsEventSlugBoothPlan201 = {
  /** URL of the uploaded booth plan image */
  url: string;
};

/**
 * Integration configuration data
 */
export type PostOrgsOrgSlugEventsEventSlugIntegrationsProviderUsageBody = { [key: string]: unknown };

export type DeleteOrgsOrgSlugEventsEventSlugOptionsOptionId204 = { [key: string]: unknown };

export type DeleteOrgsOrgSlugEventsEventSlugPacksPackId204 = { [key: string]: unknown };

export type PostOrgsOrgSlugEventsEventSlugPacksPackIdOptions201 = { [key: string]: unknown };

export type DeleteOrgsOrgSlugEventsEventSlugPacksPackIdOptionsOptionId204 = { [key: string]: unknown };

export type GetOrgsOrgSlugEventsEventSlugPartnershipParams = {
/**
 * Filter by sponsoring pack ID
 */
'filter[pack_id]'?: string;
/**
 * Filter by validation status
 */
'filter[validated]'?: boolean;
/**
 * Filter by suggestion status
 */
'filter[suggestion]'?: boolean;
/**
 * Filter by payment status
 */
'filter[paid]'?: boolean;
/**
 * Filter by agreement generation status
 */
'filter[agreement-generated]'?: boolean;
/**
 * Filter by agreement signature status
 */
'filter[agreement-signed]'?: boolean;
/**
 * Sort field
 */
sort?: GetOrgsOrgSlugEventsEventSlugPartnershipSort;
/**
 * Sort direction
 */
direction?: GetOrgsOrgSlugEventsEventSlugPartnershipDirection;
};

export type GetOrgsOrgSlugEventsEventSlugPartnershipSort = typeof GetOrgsOrgSlugEventsEventSlugPartnershipSort[keyof typeof GetOrgsOrgSlugEventsEventSlugPartnershipSort];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetOrgsOrgSlugEventsEventSlugPartnershipSort = {
  created: 'created',
  updated: 'updated',
} as const;

export type GetOrgsOrgSlugEventsEventSlugPartnershipDirection = typeof GetOrgsOrgSlugEventsEventSlugPartnershipDirection[keyof typeof GetOrgsOrgSlugEventsEventSlugPartnershipDirection];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetOrgsOrgSlugEventsEventSlugPartnershipDirection = {
  asc: 'asc',
  desc: 'desc',
} as const;

export type PostOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdAgreement200 = {
  /** URL to the generated agreement PDF */
  url: string;
};

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];


  /**
 * OAuth callback endpoint
 */
export const getAuthCallback = (
    
 options?: SecondParameter<typeof customFetch<UserSessionSchema>>,) => {
      return customFetch<UserSessionSchema>(
      {url: `/auth/callback`, method: 'GET'
    },
      options);
    }
  
/**
 * Start OAuth login flow - redirects to Google OAuth
 */
export const getAuthLogin = (
    
 options?: SecondParameter<typeof customFetch<unknown>>,) => {
      return customFetch<unknown>(
      {url: `/auth/login`, method: 'GET'
    },
      options);
    }
  
/**
 * Logout and clear session
 */
export const getAuthLogout = (
    
 options?: SecondParameter<typeof customFetch<void>>,) => {
      return customFetch<void>(
      {url: `/auth/logout`, method: 'GET'
    },
      options);
    }
  
/**
 * Get current user information
 */
export const getAuthMe = (
    
 options?: SecondParameter<typeof customFetch<UserInfoSchema>>,) => {
      return customFetch<UserInfoSchema>(
      {url: `/auth/me`, method: 'GET'
    },
      options);
    }
  
/**
 * List companies with paging support
 */
export const getCompanies = (
    params?: GetCompaniesParams,
 options?: SecondParameter<typeof customFetch<PaginatedCompanySchema>>,) => {
      return customFetch<PaginatedCompanySchema>(
      {url: `/companies`, method: 'GET',
        params
    },
      options);
    }
  
export const postCompanies = (
    createCompanySchema: CreateCompanySchema,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {
      return customFetch<IdentifierSchema>(
      {url: `/companies`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createCompanySchema
    },
      options);
    }
  
/**
 * Upload a logo for a company
 */
export const postCompaniesCompanyIdLogo = (
    companyId: string,
    postCompaniesCompanyIdLogoBody: PostCompaniesCompanyIdLogoBody,
 options?: SecondParameter<typeof customFetch<MediaSchema>>,) => {const formData = new FormData();
if(postCompaniesCompanyIdLogoBody.file !== undefined) {
 formData.append(`file`, postCompaniesCompanyIdLogoBody.file)
 }

      return customFetch<MediaSchema>(
      {url: `/companies/${companyId}/logo`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      options);
    }
  
export const getCompaniesCompanyIdPartnership = (
    companyId: string,
 options?: SecondParameter<typeof customFetch<PartnershipItemSchema[]>>,) => {
      return customFetch<PartnershipItemSchema[]>(
      {url: `/companies/${companyId}/partnership`, method: 'GET'
    },
      options);
    }
  
/**
 * List events with paging support
 */
export const getEvents = (
    params?: GetEventsParams,
 options?: SecondParameter<typeof customFetch<PaginatedEventSummarySchema>>,) => {
      return customFetch<PaginatedEventSummarySchema>(
      {url: `/events`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * Get event details with organization information
 */
export const getEventsEventSlug = (
    eventSlug: string,
 options?: SecondParameter<typeof customFetch<EventWithOrganisationSchema>>,) => {
      return customFetch<EventWithOrganisationSchema>(
      {url: `/events/${eventSlug}`, method: 'GET'
    },
      options);
    }
  
export const postEventsEventSlugPartnership = (
    eventSlug: string,
    registerPartnershipSchema: RegisterPartnershipSchema,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {
      return customFetch<IdentifierSchema>(
      {url: `/events/${eventSlug}/partnership`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: registerPartnershipSchema
    },
      options);
    }
  
export const getEventsEventSlugPartnershipPartnershipIdBilling = (
    eventSlug: string,
    partnershipId: string,
 options?: SecondParameter<typeof customFetch<CompanyBillingDataSchema>>,) => {
      return customFetch<CompanyBillingDataSchema>(
      {url: `/events/${eventSlug}/partnership/${partnershipId}/billing`, method: 'GET'
    },
      options);
    }
  
export const postEventsEventSlugPartnershipPartnershipIdBilling = (
    eventSlug: string,
    partnershipId: string,
    companyBillingDataSchema: CompanyBillingDataSchema,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {
      return customFetch<IdentifierSchema>(
      {url: `/events/${eventSlug}/partnership/${partnershipId}/billing`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: companyBillingDataSchema
    },
      options);
    }
  
export const putEventsEventSlugPartnershipPartnershipIdBilling = (
    eventSlug: string,
    partnershipId: string,
    companyBillingDataSchema: CompanyBillingDataSchema,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {
      return customFetch<IdentifierSchema>(
      {url: `/events/${eventSlug}/partnership/${partnershipId}/billing`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: companyBillingDataSchema
    },
      options);
    }
  
export const postEventsEventSlugPartnershipPartnershipIdBillingInvoice = (
    eventSlug: string,
    partnershipId: string,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {
      return customFetch<IdentifierSchema>(
      {url: `/events/${eventSlug}/partnership/${partnershipId}/billing/invoice`, method: 'POST'
    },
      options);
    }
  
export const postEventsEventSlugPartnershipPartnershipIdBillingQuote = (
    eventSlug: string,
    partnershipId: string,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {
      return customFetch<IdentifierSchema>(
      {url: `/events/${eventSlug}/partnership/${partnershipId}/billing/quote`, method: 'POST'
    },
      options);
    }
  
/**
 * Upload a signed partnership agreement
 */
export const postEventsEventSlugPartnershipPartnershipIdSignedAgreement = (
    eventSlug: string,
    partnershipId: string,
    postEventsEventSlugPartnershipPartnershipIdSignedAgreementBody: PostEventsEventSlugPartnershipPartnershipIdSignedAgreementBody,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {const formData = new FormData();
if(postEventsEventSlugPartnershipPartnershipIdSignedAgreementBody.file !== undefined) {
 formData.append(`file`, postEventsEventSlugPartnershipPartnershipIdSignedAgreementBody.file)
 }

      return customFetch<IdentifierSchema>(
      {url: `/events/${eventSlug}/partnership/${partnershipId}/signed-agreement`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      options);
    }
  
export const postEventsEventSlugPartnershipPartnershipIdSuggestionApprove = (
    eventSlug: string,
    partnershipId: string,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {
      return customFetch<IdentifierSchema>(
      {url: `/events/${eventSlug}/partnership/${partnershipId}/suggestion-approve`, method: 'POST'
    },
      options);
    }
  
export const postEventsEventSlugPartnershipPartnershipIdSuggestionDecline = (
    eventSlug: string,
    partnershipId: string,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {
      return customFetch<IdentifierSchema>(
      {url: `/events/${eventSlug}/partnership/${partnershipId}/suggestion-decline`, method: 'POST'
    },
      options);
    }
  
export const getEventsEventSlugPartnershipPartnershipIdTickets = (
    eventSlug: string,
    partnershipId: string,
 options?: SecondParameter<typeof customFetch<TicketSchema[]>>,) => {
      return customFetch<TicketSchema[]>(
      {url: `/events/${eventSlug}/partnership/${partnershipId}/tickets`, method: 'GET'
    },
      options);
    }
  
export const postEventsEventSlugPartnershipPartnershipIdTickets = (
    eventSlug: string,
    partnershipId: string,
    ticketDataSchema: TicketDataSchema[],
 options?: SecondParameter<typeof customFetch<TicketOrderSchema>>,) => {
      return customFetch<TicketOrderSchema>(
      {url: `/events/${eventSlug}/partnership/${partnershipId}/tickets`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: ticketDataSchema
    },
      options);
    }
  
export const putEventsEventSlugPartnershipPartnershipIdTicketsTicketId = (
    eventSlug: string,
    partnershipId: string,
    ticketId: string,
    ticketDataSchema: TicketDataSchema,
 options?: SecondParameter<typeof customFetch<TicketSchema>>,) => {
      return customFetch<TicketSchema>(
      {url: `/events/${eventSlug}/partnership/${partnershipId}/tickets/${ticketId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: ticketDataSchema
    },
      options);
    }
  
/**
 * List all providers with optional filtering and sorting
 */
export const getProviders = (
    params?: GetProvidersParams,
 options?: SecondParameter<typeof customFetch<PaginatedProviderSchema>>,) => {
      return customFetch<PaginatedProviderSchema>(
      {url: `/providers`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * Create a new provider (requires authentication and organizer status)
 */
export const postProviders = (
    createProviderSchema: CreateProviderSchema,
 options?: SecondParameter<typeof customFetch<PostProviders201>>,) => {
      return customFetch<PostProviders201>(
      {url: `/providers`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createProviderSchema
    },
      options);
    }
  
export const postOrgs = (
    organisationSchema: OrganisationSchema,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {
      return customFetch<IdentifierSchema>(
      {url: `/orgs`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: organisationSchema
    },
      options);
    }
  
export const getOrgsSlug = (
    slug: string,
 options?: SecondParameter<typeof customFetch<OrganisationSchema>>,) => {
      return customFetch<OrganisationSchema>(
      {url: `/orgs/${slug}`, method: 'GET'
    },
      options);
    }
  
export const putOrgsOrgSlug = (
    orgSlug: string,
    organisationSchema: OrganisationSchema,
 options?: SecondParameter<typeof customFetch<OrganisationSchema>>,) => {
      return customFetch<OrganisationSchema>(
      {url: `/orgs/${orgSlug}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: organisationSchema
    },
      options);
    }
  
/**
 * List events for an organization (paginated)
 */
export const getOrgsOrgSlugEvents = (
    orgSlug: string,
    params?: GetOrgsOrgSlugEventsParams,
 options?: SecondParameter<typeof customFetch<PaginatedEventSummarySchema>>,) => {
      return customFetch<PaginatedEventSummarySchema>(
      {url: `/orgs/${orgSlug}/events`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * Create a new event for an organization
 */
export const postOrgsOrgSlugEvents = (
    orgSlug: string,
    eventSchema: EventSchema,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {
      return customFetch<IdentifierSchema>(
      {url: `/orgs/${orgSlug}/events`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: eventSchema
    },
      options);
    }
  
export const putOrgsOrgSlugEventsEventSlug = (
    orgSlug: string,
    eventSlug: string,
    eventSchema: EventSchema,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {
      return customFetch<IdentifierSchema>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: eventSchema
    },
      options);
    }
  
/**
 * Upload booth plan image for an event
 */
export const postOrgsOrgSlugEventsEventSlugBoothPlan = (
    orgSlug: string,
    eventSlug: string,
    postOrgsOrgSlugEventsEventSlugBoothPlanBody: PostOrgsOrgSlugEventsEventSlugBoothPlanBody,
 options?: SecondParameter<typeof customFetch<PostOrgsOrgSlugEventsEventSlugBoothPlan201>>,) => {const formData = new FormData();
if(postOrgsOrgSlugEventsEventSlugBoothPlanBody.file !== undefined) {
 formData.append(`file`, postOrgsOrgSlugEventsEventSlugBoothPlanBody.file)
 }

      return customFetch<PostOrgsOrgSlugEventsEventSlugBoothPlan201>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/booth-plan`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      options);
    }
  
/**
 * Register an integration for an event
 */
export const postOrgsOrgSlugEventsEventSlugIntegrationsProviderUsage = (
    orgSlug: string,
    eventSlug: string,
    provider: 'QONTO' | 'MAILJET' | 'BILLETWEB',
    usage: 'BILLING' | 'MAILING' | 'TICKETING',
    postOrgsOrgSlugEventsEventSlugIntegrationsProviderUsageBody: PostOrgsOrgSlugEventsEventSlugIntegrationsProviderUsageBody,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {
      return customFetch<IdentifierSchema>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/integrations/${provider}/${usage}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrgsOrgSlugEventsEventSlugIntegrationsProviderUsageBody
    },
      options);
    }
  
/**
 * List sponsoring options for an event
 */
export const getOrgsOrgSlugEventsEventSlugOptions = (
    orgSlug: string,
    eventSlug: string,
 options?: SecondParameter<typeof customFetch<SponsoringOptionSchema[]>>,) => {
      return customFetch<SponsoringOptionSchema[]>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/options`, method: 'GET'
    },
      options);
    }
  
/**
 * Create a new sponsoring option
 */
export const postOrgsOrgSlugEventsEventSlugOptions = (
    orgSlug: string,
    eventSlug: string,
    createSponsoringOptionSchema: CreateSponsoringOptionSchema,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {
      return customFetch<IdentifierSchema>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createSponsoringOptionSchema
    },
      options);
    }
  
export const deleteOrgsOrgSlugEventsEventSlugOptionsOptionId = (
    orgSlug: string,
    eventSlug: string,
    optionId: string,
 options?: SecondParameter<typeof customFetch<DeleteOrgsOrgSlugEventsEventSlugOptionsOptionId204>>,) => {
      return customFetch<DeleteOrgsOrgSlugEventsEventSlugOptionsOptionId204>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/options/${optionId}`, method: 'DELETE'
    },
      options);
    }
  
export const putOrgsOrgSlugEventsEventSlugOptionsOptionId = (
    orgSlug: string,
    eventSlug: string,
    optionId: string,
    createSponsoringOptionSchema: CreateSponsoringOptionSchema,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {
      return customFetch<IdentifierSchema>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/options/${optionId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: createSponsoringOptionSchema
    },
      options);
    }
  
/**
 * List sponsoring packs for an event
 */
export const getOrgsOrgSlugEventsEventSlugPacks = (
    orgSlug: string,
    eventSlug: string,
 options?: SecondParameter<typeof customFetch<SponsoringPackSchema[]>>,) => {
      return customFetch<SponsoringPackSchema[]>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/packs`, method: 'GET'
    },
      options);
    }
  
/**
 * Create a new sponsoring pack
 */
export const postOrgsOrgSlugEventsEventSlugPacks = (
    orgSlug: string,
    eventSlug: string,
    createSponsoringPackSchema: CreateSponsoringPackSchema,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {
      return customFetch<IdentifierSchema>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/packs`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createSponsoringPackSchema
    },
      options);
    }
  
export const deleteOrgsOrgSlugEventsEventSlugPacksPackId = (
    orgSlug: string,
    eventSlug: string,
    packId: string,
 options?: SecondParameter<typeof customFetch<DeleteOrgsOrgSlugEventsEventSlugPacksPackId204>>,) => {
      return customFetch<DeleteOrgsOrgSlugEventsEventSlugPacksPackId204>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/packs/${packId}`, method: 'DELETE'
    },
      options);
    }
  
export const putOrgsOrgSlugEventsEventSlugPacksPackId = (
    orgSlug: string,
    eventSlug: string,
    packId: string,
    createSponsoringPackSchema: CreateSponsoringPackSchema,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {
      return customFetch<IdentifierSchema>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/packs/${packId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: createSponsoringPackSchema
    },
      options);
    }
  
export const postOrgsOrgSlugEventsEventSlugPacksPackIdOptions = (
    orgSlug: string,
    eventSlug: string,
    packId: string,
    attachOptionsToPackSchema: AttachOptionsToPackSchema,
 options?: SecondParameter<typeof customFetch<PostOrgsOrgSlugEventsEventSlugPacksPackIdOptions201>>,) => {
      return customFetch<PostOrgsOrgSlugEventsEventSlugPacksPackIdOptions201>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/packs/${packId}/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: attachOptionsToPackSchema
    },
      options);
    }
  
export const deleteOrgsOrgSlugEventsEventSlugPacksPackIdOptionsOptionId = (
    orgSlug: string,
    eventSlug: string,
    packId: string,
    optionId: string,
 options?: SecondParameter<typeof customFetch<DeleteOrgsOrgSlugEventsEventSlugPacksPackIdOptionsOptionId204>>,) => {
      return customFetch<DeleteOrgsOrgSlugEventsEventSlugPacksPackIdOptionsOptionId204>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/packs/${packId}/options/${optionId}`, method: 'DELETE'
    },
      options);
    }
  
/**
 * Get communication plan for all partnerships of an event, grouped by status
 */
export const getOrgsOrgSlugEventsEventSlugCommunication = (
    orgSlug: string,
    eventSlug: string,
 options?: SecondParameter<typeof customFetch<CommunicationPlanSchema>>,) => {
      return customFetch<CommunicationPlanSchema>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/communication`, method: 'GET'
    },
      options);
    }
  
/**
 * Attach a new external link to an event
 */
export const postOrgsOrgSlugEventsEventSlugExternalLink = (
    orgSlug: string,
    eventSlug: string,
    createEventExternalLinkSchema: CreateEventExternalLinkSchema,
 options?: SecondParameter<typeof customFetch<string>>,) => {
      return customFetch<string>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/external-link`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createEventExternalLinkSchema
    },
      options);
    }
  
/**
 * Remove an external link by its ID
 */
export const deleteOrgsOrgSlugEventsEventSlugExternalLinkLinkId = (
    orgSlug: string,
    eventSlug: string,
    linkId: string,
 options?: SecondParameter<typeof customFetch<void>>,) => {
      return customFetch<void>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/external-link/${linkId}`, method: 'DELETE'
    },
      options);
    }
  
/**
 * List partnerships for an event with filtering options
 */
export const getOrgsOrgSlugEventsEventSlugPartnership = (
    orgSlug: string,
    eventSlug: string,
    params?: GetOrgsOrgSlugEventsEventSlugPartnershipParams,
 options?: SecondParameter<typeof customFetch<PartnershipItemSchema[]>>,) => {
      return customFetch<PartnershipItemSchema[]>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/partnership`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * Generate a partnership agreement PDF
 */
export const postOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdAgreement = (
    orgSlug: string,
    eventSlug: string,
    partnershipId: string,
 options?: SecondParameter<typeof customFetch<PostOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdAgreement200>>,) => {
      return customFetch<PostOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdAgreement200>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/partnership/${partnershipId}/agreement`, method: 'POST'
    },
      options);
    }
  
export const postOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdBillingBillingStatus = (
    orgSlug: string,
    eventSlug: string,
    partnershipId: string,
    billingStatus: string,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {
      return customFetch<IdentifierSchema>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/partnership/${partnershipId}/billing/${billingStatus}`, method: 'POST'
    },
      options);
    }
  
/**
 * Assign booth location to a partnership
 */
export const putOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdBoothLocation = (
    orgSlug: string,
    eventSlug: string,
    partnershipId: string,
    boothLocationRequestSchema: BoothLocationRequestSchema,
 options?: SecondParameter<typeof customFetch<BoothLocationResponseSchema>>,) => {
      return customFetch<BoothLocationResponseSchema>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/partnership/${partnershipId}/booth-location`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: boothLocationRequestSchema
    },
      options);
    }
  
export const postOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdSuggestion = (
    orgSlug: string,
    eventSlug: string,
    partnershipId: string,
    suggestPartnershipSchema: SuggestPartnershipSchema,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {
      return customFetch<IdentifierSchema>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/partnership/${partnershipId}/suggestion`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: suggestPartnershipSchema
    },
      options);
    }
  
/**
 * Validate a partnership request
 */
export const postOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdValidate = (
    orgSlug: string,
    eventSlug: string,
    partnershipId: string,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {
      return customFetch<IdentifierSchema>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/partnership/${partnershipId}/validate`, method: 'POST'
    },
      options);
    }
  
/**
 * Decline a partnership request
 */
export const postOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdDecline = (
    orgSlug: string,
    eventSlug: string,
    partnershipId: string,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {
      return customFetch<IdentifierSchema>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/partnership/${partnershipId}/decline`, method: 'POST'
    },
      options);
    }
  
/**
 * Schedule publication date for partnership communication
 */
export const putOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdCommunicationPublication = (
    orgSlug: string,
    eventSlug: string,
    partnershipId: string,
    publicationDateRequestSchema: PublicationDateRequestSchema,
 options?: SecondParameter<typeof customFetch<PublicationDateResponseSchema>>,) => {
      return customFetch<PublicationDateResponseSchema>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/partnership/${partnershipId}/communication/publication`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: publicationDateRequestSchema
    },
      options);
    }
  
/**
 * Upload visual support material for partnership communication
 */
export const putOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdCommunicationSupport = (
    orgSlug: string,
    eventSlug: string,
    partnershipId: string,
    putOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdCommunicationSupportBody: Blob,
 options?: SecondParameter<typeof customFetch<SupportUploadResponseSchema>>,) => {
      return customFetch<SupportUploadResponseSchema>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/partnership/${partnershipId}/communication/support`, method: 'PUT',
      headers: {'Content-Type': 'image/png', },
      data: putOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdCommunicationSupportBody
    },
      options);
    }
  
/**
 * Attach providers to an event (requires event write access)
 */
export const postOrgsOrgSlugEventsEventSlugProviders = (
    orgSlug: string,
    eventSlug: string,
    createByIdentifiersSchema: CreateByIdentifiersSchema,
 options?: SecondParameter<typeof customFetch<string[]>>,) => {
      return customFetch<string[]>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/providers`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createByIdentifiersSchema
    },
      options);
    }
  
/**
 * Remove providers from an event (requires event write access)
 */
export const deleteOrgsOrgSlugEventsEventSlugProviders = (
    orgSlug: string,
    eventSlug: string,
    createByIdentifiersSchema: CreateByIdentifiersSchema,
 options?: SecondParameter<typeof customFetch<string[]>>,) => {
      return customFetch<string[]>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/providers`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: createByIdentifiersSchema
    },
      options);
    }
  
export const getOrgsOrgSlugUsers = (
    orgSlug: string,
 options?: SecondParameter<typeof customFetch<UserSchema[]>>,) => {
      return customFetch<UserSchema[]>(
      {url: `/orgs/${orgSlug}/users`, method: 'GET'
    },
      options);
    }
  
export const postOrgsOrgSlugUsersGrant = (
    orgSlug: string,
    grantPermissionRequestSchema: GrantPermissionRequestSchema,
 options?: SecondParameter<typeof customFetch<string>>,) => {
      return customFetch<string>(
      {url: `/orgs/${orgSlug}/users/grant`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: grantPermissionRequestSchema
    },
      options);
    }
  
export const getUsersMeEvents = (
    
 options?: SecondParameter<typeof customFetch<EventSummarySchema[]>>,) => {
      return customFetch<EventSummarySchema[]>(
      {url: `/users/me/events`, method: 'GET'
    },
      options);
    }
  
export const getUsersMeOrgs = (
    
 options?: SecondParameter<typeof customFetch<OrganisationItemSchema[]>>,) => {
      return customFetch<OrganisationItemSchema[]>(
      {url: `/users/me/orgs`, method: 'GET'
    },
      options);
    }
  
export type GetAuthCallbackResult = NonNullable<Awaited<ReturnType<typeof getAuthCallback>>>
export type GetAuthLoginResult = NonNullable<Awaited<ReturnType<typeof getAuthLogin>>>
export type GetAuthLogoutResult = NonNullable<Awaited<ReturnType<typeof getAuthLogout>>>
export type GetAuthMeResult = NonNullable<Awaited<ReturnType<typeof getAuthMe>>>
export type GetCompaniesResult = NonNullable<Awaited<ReturnType<typeof getCompanies>>>
export type PostCompaniesResult = NonNullable<Awaited<ReturnType<typeof postCompanies>>>
export type PostCompaniesCompanyIdLogoResult = NonNullable<Awaited<ReturnType<typeof postCompaniesCompanyIdLogo>>>
export type GetCompaniesCompanyIdPartnershipResult = NonNullable<Awaited<ReturnType<typeof getCompaniesCompanyIdPartnership>>>
export type GetEventsResult = NonNullable<Awaited<ReturnType<typeof getEvents>>>
export type GetEventsEventSlugResult = NonNullable<Awaited<ReturnType<typeof getEventsEventSlug>>>
export type PostEventsEventSlugPartnershipResult = NonNullable<Awaited<ReturnType<typeof postEventsEventSlugPartnership>>>
export type GetEventsEventSlugPartnershipPartnershipIdBillingResult = NonNullable<Awaited<ReturnType<typeof getEventsEventSlugPartnershipPartnershipIdBilling>>>
export type PostEventsEventSlugPartnershipPartnershipIdBillingResult = NonNullable<Awaited<ReturnType<typeof postEventsEventSlugPartnershipPartnershipIdBilling>>>
export type PutEventsEventSlugPartnershipPartnershipIdBillingResult = NonNullable<Awaited<ReturnType<typeof putEventsEventSlugPartnershipPartnershipIdBilling>>>
export type PostEventsEventSlugPartnershipPartnershipIdBillingInvoiceResult = NonNullable<Awaited<ReturnType<typeof postEventsEventSlugPartnershipPartnershipIdBillingInvoice>>>
export type PostEventsEventSlugPartnershipPartnershipIdBillingQuoteResult = NonNullable<Awaited<ReturnType<typeof postEventsEventSlugPartnershipPartnershipIdBillingQuote>>>
export type PostEventsEventSlugPartnershipPartnershipIdSignedAgreementResult = NonNullable<Awaited<ReturnType<typeof postEventsEventSlugPartnershipPartnershipIdSignedAgreement>>>
export type PostEventsEventSlugPartnershipPartnershipIdSuggestionApproveResult = NonNullable<Awaited<ReturnType<typeof postEventsEventSlugPartnershipPartnershipIdSuggestionApprove>>>
export type PostEventsEventSlugPartnershipPartnershipIdSuggestionDeclineResult = NonNullable<Awaited<ReturnType<typeof postEventsEventSlugPartnershipPartnershipIdSuggestionDecline>>>
export type GetEventsEventSlugPartnershipPartnershipIdTicketsResult = NonNullable<Awaited<ReturnType<typeof getEventsEventSlugPartnershipPartnershipIdTickets>>>
export type PostEventsEventSlugPartnershipPartnershipIdTicketsResult = NonNullable<Awaited<ReturnType<typeof postEventsEventSlugPartnershipPartnershipIdTickets>>>
export type PutEventsEventSlugPartnershipPartnershipIdTicketsTicketIdResult = NonNullable<Awaited<ReturnType<typeof putEventsEventSlugPartnershipPartnershipIdTicketsTicketId>>>
export type GetProvidersResult = NonNullable<Awaited<ReturnType<typeof getProviders>>>
export type PostProvidersResult = NonNullable<Awaited<ReturnType<typeof postProviders>>>
export type PostOrgsResult = NonNullable<Awaited<ReturnType<typeof postOrgs>>>
export type GetOrgsSlugResult = NonNullable<Awaited<ReturnType<typeof getOrgsSlug>>>
export type PutOrgsOrgSlugResult = NonNullable<Awaited<ReturnType<typeof putOrgsOrgSlug>>>
export type GetOrgsOrgSlugEventsResult = NonNullable<Awaited<ReturnType<typeof getOrgsOrgSlugEvents>>>
export type PostOrgsOrgSlugEventsResult = NonNullable<Awaited<ReturnType<typeof postOrgsOrgSlugEvents>>>
export type PutOrgsOrgSlugEventsEventSlugResult = NonNullable<Awaited<ReturnType<typeof putOrgsOrgSlugEventsEventSlug>>>
export type PostOrgsOrgSlugEventsEventSlugBoothPlanResult = NonNullable<Awaited<ReturnType<typeof postOrgsOrgSlugEventsEventSlugBoothPlan>>>
export type PostOrgsOrgSlugEventsEventSlugIntegrationsProviderUsageResult = NonNullable<Awaited<ReturnType<typeof postOrgsOrgSlugEventsEventSlugIntegrationsProviderUsage>>>
export type GetOrgsOrgSlugEventsEventSlugOptionsResult = NonNullable<Awaited<ReturnType<typeof getOrgsOrgSlugEventsEventSlugOptions>>>
export type PostOrgsOrgSlugEventsEventSlugOptionsResult = NonNullable<Awaited<ReturnType<typeof postOrgsOrgSlugEventsEventSlugOptions>>>
export type DeleteOrgsOrgSlugEventsEventSlugOptionsOptionIdResult = NonNullable<Awaited<ReturnType<typeof deleteOrgsOrgSlugEventsEventSlugOptionsOptionId>>>
export type PutOrgsOrgSlugEventsEventSlugOptionsOptionIdResult = NonNullable<Awaited<ReturnType<typeof putOrgsOrgSlugEventsEventSlugOptionsOptionId>>>
export type GetOrgsOrgSlugEventsEventSlugPacksResult = NonNullable<Awaited<ReturnType<typeof getOrgsOrgSlugEventsEventSlugPacks>>>
export type PostOrgsOrgSlugEventsEventSlugPacksResult = NonNullable<Awaited<ReturnType<typeof postOrgsOrgSlugEventsEventSlugPacks>>>
export type DeleteOrgsOrgSlugEventsEventSlugPacksPackIdResult = NonNullable<Awaited<ReturnType<typeof deleteOrgsOrgSlugEventsEventSlugPacksPackId>>>
export type PutOrgsOrgSlugEventsEventSlugPacksPackIdResult = NonNullable<Awaited<ReturnType<typeof putOrgsOrgSlugEventsEventSlugPacksPackId>>>
export type PostOrgsOrgSlugEventsEventSlugPacksPackIdOptionsResult = NonNullable<Awaited<ReturnType<typeof postOrgsOrgSlugEventsEventSlugPacksPackIdOptions>>>
export type DeleteOrgsOrgSlugEventsEventSlugPacksPackIdOptionsOptionIdResult = NonNullable<Awaited<ReturnType<typeof deleteOrgsOrgSlugEventsEventSlugPacksPackIdOptionsOptionId>>>
export type GetOrgsOrgSlugEventsEventSlugCommunicationResult = NonNullable<Awaited<ReturnType<typeof getOrgsOrgSlugEventsEventSlugCommunication>>>
export type PostOrgsOrgSlugEventsEventSlugExternalLinkResult = NonNullable<Awaited<ReturnType<typeof postOrgsOrgSlugEventsEventSlugExternalLink>>>
export type DeleteOrgsOrgSlugEventsEventSlugExternalLinkLinkIdResult = NonNullable<Awaited<ReturnType<typeof deleteOrgsOrgSlugEventsEventSlugExternalLinkLinkId>>>
export type GetOrgsOrgSlugEventsEventSlugPartnershipResult = NonNullable<Awaited<ReturnType<typeof getOrgsOrgSlugEventsEventSlugPartnership>>>
export type PostOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdAgreementResult = NonNullable<Awaited<ReturnType<typeof postOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdAgreement>>>
export type PostOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdBillingBillingStatusResult = NonNullable<Awaited<ReturnType<typeof postOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdBillingBillingStatus>>>
export type PutOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdBoothLocationResult = NonNullable<Awaited<ReturnType<typeof putOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdBoothLocation>>>
export type PostOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdSuggestionResult = NonNullable<Awaited<ReturnType<typeof postOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdSuggestion>>>
export type PostOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdValidateResult = NonNullable<Awaited<ReturnType<typeof postOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdValidate>>>
export type PostOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdDeclineResult = NonNullable<Awaited<ReturnType<typeof postOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdDecline>>>
export type PutOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdCommunicationPublicationResult = NonNullable<Awaited<ReturnType<typeof putOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdCommunicationPublication>>>
export type PutOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdCommunicationSupportResult = NonNullable<Awaited<ReturnType<typeof putOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdCommunicationSupport>>>
export type PostOrgsOrgSlugEventsEventSlugProvidersResult = NonNullable<Awaited<ReturnType<typeof postOrgsOrgSlugEventsEventSlugProviders>>>
export type DeleteOrgsOrgSlugEventsEventSlugProvidersResult = NonNullable<Awaited<ReturnType<typeof deleteOrgsOrgSlugEventsEventSlugProviders>>>
export type GetOrgsOrgSlugUsersResult = NonNullable<Awaited<ReturnType<typeof getOrgsOrgSlugUsers>>>
export type PostOrgsOrgSlugUsersGrantResult = NonNullable<Awaited<ReturnType<typeof postOrgsOrgSlugUsersGrant>>>
export type GetUsersMeEventsResult = NonNullable<Awaited<ReturnType<typeof getUsersMeEvents>>>
export type GetUsersMeOrgsResult = NonNullable<Awaited<ReturnType<typeof getUsersMeOrgs>>>
