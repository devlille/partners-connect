/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * partners_connect API
 * partners_connect API
 * OpenAPI spec version: 1.0.0
 */
import { customFetch } from '../custom-instance';
export type UserSession = UserSessionSchema;

export type UserInfo = UserInfoSchema;

export type Address = AddressSchema;

export type Media = MediaSchema;

export type Company = CompanySchema;

export type Social = SocialSchema;

export type CreateCompany = CreateCompanySchema;

export type Identifier = IdentifierSchema;

export type Contact = ContactSchema;

export type PartnershipItem = PartnershipItemSchema;

export type EventSummary = EventSummarySchema;

export type Event = EventSchema;

export type EventDisplay = EventDisplaySchema;

export type CreateEventExternalLink = CreateEventExternalLinkSchema;

export type Organisation = OrganisationSchema;

export type EventWithOrganisation = EventWithOrganisationSchema;

export type RegisterPartnership = RegisterPartnershipSchema;

export type CompanyBillingData = CompanyBillingDataSchema;

export type TicketData = TicketDataSchema;

export type Ticket = TicketSchema;

export type TicketOrder = TicketOrderSchema;

export type SponsoringOption = SponsoringOptionSchema;

export type TranslatedLabel = TranslatedLabelSchema;

export type CreateSponsoringOption = CreateSponsoringOptionSchema;

export type SponsoringPack = SponsoringPackSchema;

export type CreateSponsoringPack = CreateSponsoringPackSchema;

export type AttachOptionsToPack = AttachOptionsToPackSchema;

export type SuggestPartnership = SuggestPartnershipSchema;

export type User = UserSchema;

export type GrantPermissionRequest = GrantPermissionRequestSchema;

export type OrganisationItem = OrganisationItemSchema;

export type Provider = ProviderSchema;

export type CreateProvider = CreateProviderSchema;

export type BoothLocationRequest = BoothLocationRequestSchema;

export type BoothLocationResponse = BoothLocationResponseSchema;

export type PublicationDateRequest = PublicationDateRequestSchema;

export type PublicationDateResponse = PublicationDateResponseSchema;

export type SupportUploadResponse = SupportUploadResponseSchema;

export type CommunicationItem = CommunicationItemSchema;

export type CommunicationPlan = CommunicationPlanSchema;

export type PaginatedEventSummary = PaginatedEventSummarySchema;

export type PaginatedCompany = PaginatedCompanySchema;

export type PaginatedProvider = PaginatedProviderSchema;

export type PaginatedJobOffer = PaginatedJobOfferSchema;

export type CreateJobOffer = CreateJobOfferSchema;

export type UpdateJobOffer = UpdateJobOfferSchema;

export type JobOfferResponse = JobOfferResponseSchema;

export type CreateByIdentifiers = CreateByIdentifiersSchema;

export interface UserSessionSchema {
  state: string;
  token: string;
}

export type UserInfoSchemaPictureUrl = string | null;

export interface UserInfoSchema {
  display_name: string;
  picture_url?: UserInfoSchemaPictureUrl;
  email: string;
}

export interface AddressSchema {
  address: string;
  city: string;
  zip_code: string;
  country: string;
}

export interface MediaSchema {
  original: string;
  png_1000: string;
  png_500: string;
  png_250: string;
}

export type CompanySchemaDescription = string | null;

export interface CompanySchema {
  id: string;
  name: string;
  head_office: AddressSchema;
  siret: string;
  vat: string;
  description?: CompanySchemaDescription;
  site_url: string;
  medias?: MediaSchema;
}

export interface PaginatedCompanySchema {
  items: CompanySchema[];
  page: number;
  page_size: number;
  total: number;
}

export type SocialSchemaType = typeof SocialSchemaType[keyof typeof SocialSchemaType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SocialSchemaType = {
  LINKEDIN: 'LINKEDIN',
  X: 'X',
  BLUESKY: 'BLUESKY',
  MASTODON: 'MASTODON',
  INSTAGRAM: 'INSTAGRAM',
  FACEBOOK: 'FACEBOOK',
  YOUTUBE: 'YOUTUBE',
} as const;

export interface SocialSchema {
  type: SocialSchemaType;
  url: string;
}

export type CreateCompanySchemaDescription = string | null;

export interface CreateCompanySchema {
  name: string;
  head_office: AddressSchema;
  siret: string;
  vat: string;
  description?: CreateCompanySchemaDescription;
  site_url: string;
  socials?: SocialSchema[];
}

export interface IdentifierSchema {
  id: string;
}

export interface ContactSchema {
  display_name: string;
  role: string;
}

export type PartnershipItemSchemaPackName = string | null;

export type PartnershipItemSchemaSuggestedPackName = string | null;

export type PartnershipItemSchemaPhone = string | null;

export interface PartnershipItemSchema {
  id: string;
  contact: ContactSchema;
  company_name: string;
  event_name: string;
  pack_name?: PartnershipItemSchemaPackName;
  suggested_pack_name?: PartnershipItemSchemaSuggestedPackName;
  language: string;
  phone?: PartnershipItemSchemaPhone;
  emails?: string;
  created_at: string;
}

/**
 * Application deadline (ISO format, nullable)
 */
export type JobOfferResponseSchemaEndDate = string | null;

/**
 * Minimum experience required in years (nullable)
 * @minimum 0
 * @maximum 20
 */
export type JobOfferResponseSchemaExperienceYears = number | null;

/**
 * Salary information as free text (nullable)
 * @maxLength 100
 */
export type JobOfferResponseSchemaSalary = string | null;

/**
 * Response model for job offer data containing all job offer information returned by the API
 */
export interface JobOfferResponseSchema {
  /** Unique identifier of the job offer */
  id: string;
  /** UUID of the company that owns this job offer */
  company_id: string;
  /** Direct link to the detailed job posting */
  url: string;
  /**
   * Position name or job title
   * @maxLength 255
   */
  title: string;
  /**
   * Work location description
   * @maxLength 200
   */
  location: string;
  /** When the job was posted (ISO format) */
  publication_date: string;
  /** Application deadline (ISO format, nullable) */
  end_date?: JobOfferResponseSchemaEndDate;
  /**
   * Minimum experience required in years (nullable)
   * @minimum 0
   * @maximum 20
   */
  experience_years?: JobOfferResponseSchemaExperienceYears;
  /**
   * Salary information as free text (nullable)
   * @maxLength 100
   */
  salary?: JobOfferResponseSchemaSalary;
  /** Timestamp when the record was created (ISO format) */
  created_at: string;
  /** Timestamp when the record was last modified (ISO format) */
  updated_at: string;
}

/**
 * Paginated response containing job offers and pagination metadata
 */
export interface PaginatedJobOfferSchema {
  /** Array of job offers for the current page */
  items: JobOfferResponseSchema[];
  /**
   * Current page number
   * @minimum 1
   */
  page: number;
  /**
   * Number of items per page
   * @minimum 1
   * @maximum 100
   */
  page_size: number;
  /**
   * Total number of job offers across all pages
   * @minimum 0
   */
  total: number;
}

export type CreateJobOfferSchemaEndDate = string | null;

/**
 * @minimum 1
 * @maximum 20
 */
export type CreateJobOfferSchemaExperienceYears = number | null;

/**
 * @maxLength 100
 */
export type CreateJobOfferSchemaSalary = string | null;

export interface CreateJobOfferSchema {
  /** @maxLength 500 */
  url: string;
  /**
   * @minLength 1
   * @maxLength 200
   */
  title: string;
  /**
   * @minLength 1
   * @maxLength 100
   */
  location: string;
  publication_date: string;
  end_date?: CreateJobOfferSchemaEndDate;
  /**
   * @minimum 1
   * @maximum 20
   */
  experience_years?: CreateJobOfferSchemaExperienceYears;
  /** @maxLength 100 */
  salary?: CreateJobOfferSchemaSalary;
}

export type UpdateJobOfferSchemaEndDate = string | null;

/**
 * @minimum 1
 * @maximum 20
 */
export type UpdateJobOfferSchemaExperienceYears = number | null;

/**
 * @maxLength 100
 */
export type UpdateJobOfferSchemaSalary = string | null;

export interface UpdateJobOfferSchema {
  /** @maxLength 500 */
  url?: string;
  /**
   * @minLength 1
   * @maxLength 200
   */
  title?: string;
  /**
   * @minLength 1
   * @maxLength 100
   */
  location?: string;
  publication_date?: string;
  end_date?: UpdateJobOfferSchemaEndDate;
  /**
   * @minimum 1
   * @maximum 20
   */
  experience_years?: UpdateJobOfferSchemaExperienceYears;
  /** @maxLength 100 */
  salary?: UpdateJobOfferSchemaSalary;
}

export interface EventSummarySchema {
  slug: string;
  name: string;
  start_time: string;
  end_time: string;
  submission_start_time: string;
  submission_end_time: string;
}

export interface PaginatedEventSummarySchema {
  items: EventSummarySchema[];
  page: number;
  page_size: number;
  total: number;
}

export type EventContactSchemaPhone = string | null;

export interface EventContactSchema {
  email: string;
  phone: EventContactSchemaPhone;
}

export interface EventExternalLinkSchema {
  id: string;
  name: string;
  url: string;
}

export type ProviderSchemaWebsite = string | null;

export type ProviderSchemaPhone = string | null;

export type ProviderSchemaEmail = string | null;

export interface ProviderSchema {
  id: string;
  name: string;
  type: string;
  website: ProviderSchemaWebsite;
  phone?: ProviderSchemaPhone;
  email?: ProviderSchemaEmail;
  created_at: string;
}

export interface EventDisplaySchema {
  slug: string;
  name: string;
  start_time: string;
  end_time: string;
  submission_start_time: string;
  submission_end_time: string;
  address: string;
  contact: EventContactSchema;
  external_links: EventExternalLinkSchema[];
  providers: ProviderSchema;
}

export interface OwnerSchema {
  display_name: string;
  email: string;
}

export interface OrganisationItemSchema {
  slug: string;
  name: string;
  head_office: string;
  owner?: OwnerSchema;
}

export interface EventWithOrganisationSchema {
  event: EventDisplaySchema;
  organisation: OrganisationItemSchema;
}

export type SponsoringOptionSchemaDescription = string | null;

export type SponsoringOptionSchemaPrice = number | null;

export interface SponsoringOptionSchema {
  id: string;
  name: string;
  description?: SponsoringOptionSchemaDescription;
  price?: SponsoringOptionSchemaPrice;
}

export type SponsoringPackSchemaMaxQuantity = number | null;

export interface SponsoringPackSchema {
  id: string;
  name: string;
  base_price: number;
  max_quantity?: SponsoringPackSchemaMaxQuantity;
  required_options: SponsoringOptionSchema[];
  optional_options: SponsoringOptionSchema[];
}

export type RegisterPartnershipSchemaPhone = string | null;

export interface RegisterPartnershipSchema {
  company_id: string;
  pack_id: string;
  option_ids?: string[];
  contact_name: string;
  contact_role: string;
  language: string;
  phone?: RegisterPartnershipSchemaPhone;
  emails?: string[];
}

export interface BillingContactSchema {
  first_name: string;
  last_name: string;
  email: string;
}

export type CompanyBillingDataSchemaName = string | null;

export type CompanyBillingDataSchemaPo = string | null;

export interface CompanyBillingDataSchema {
  name?: CompanyBillingDataSchemaName;
  po?: CompanyBillingDataSchemaPo;
  contact: BillingContactSchema;
}

export interface TicketDataSchema {
  first_name: string;
  last_name: string;
}

export interface TicketSchema {
  id: string;
  external_id: string;
  url: string;
  data: TicketDataSchema;
}

export interface TicketOrderSchema {
  id: string;
  tickets: TicketSchema[];
}

export interface PaginatedProviderSchema {
  items: ProviderSchema[];
  page: number;
  page_size: number;
  total: number;
}

export type CreateProviderSchemaWebsite = string | null;

export type CreateProviderSchemaPhone = string | null;

export type CreateProviderSchemaEmail = string | null;

export interface CreateProviderSchema {
  name: string;
  type: string;
  website?: CreateProviderSchemaWebsite;
  phone?: CreateProviderSchemaPhone;
  email?: CreateProviderSchemaEmail;
}

export type OrganisationSchemaHeadOffice = string | null;

export type OrganisationSchemaSiret = string | null;

export type OrganisationSchemaSiren = string | null;

export type OrganisationSchemaTva = string | null;

export type OrganisationSchemaDAndB = string | null;

export type OrganisationSchemaNace = string | null;

export type OrganisationSchemaNaf = string | null;

export type OrganisationSchemaDuns = string | null;

export type OrganisationSchemaIban = string | null;

export type OrganisationSchemaBic = string | null;

export type OrganisationSchemaRibUrl = string | null;

export type OrganisationSchemaRepresentativeUserEmail = string | null;

export type OrganisationSchemaRepresentativeRole = string | null;

export type OrganisationSchemaCreationLocation = string | null;

export type OrganisationSchemaCreatedAt = string | null;

export type OrganisationSchemaPublishedAt = string | null;

export interface OrganisationSchema {
  name: string;
  head_office?: OrganisationSchemaHeadOffice;
  siret?: OrganisationSchemaSiret;
  siren?: OrganisationSchemaSiren;
  tva?: OrganisationSchemaTva;
  d_and_b?: OrganisationSchemaDAndB;
  nace?: OrganisationSchemaNace;
  naf?: OrganisationSchemaNaf;
  duns?: OrganisationSchemaDuns;
  iban?: OrganisationSchemaIban;
  bic?: OrganisationSchemaBic;
  rib_url?: OrganisationSchemaRibUrl;
  representative_user_email?: OrganisationSchemaRepresentativeUserEmail;
  representative_role?: OrganisationSchemaRepresentativeRole;
  creation_location?: OrganisationSchemaCreationLocation;
  created_at?: OrganisationSchemaCreatedAt;
  published_at?: OrganisationSchemaPublishedAt;
}

export interface EventSchema {
  name: string;
  start_time: string;
  end_time: string;
  submission_start_time: string;
  submission_end_time: string;
  address: string;
  contact: EventContactSchema;
}

export type TranslatedLabelSchemaDescription = string | null;

export interface TranslatedLabelSchema {
  language: string;
  name: string;
  description?: TranslatedLabelSchemaDescription;
}

export type CreateSponsoringOptionSchemaPrice = number | null;

export interface CreateSponsoringOptionSchema {
  translations: TranslatedLabelSchema[];
  price?: CreateSponsoringOptionSchemaPrice;
}

export type CreateSponsoringPackSchemaMaxQuantity = number | null;

export interface CreateSponsoringPackSchema {
  name: string;
  price: number;
  with_booth?: boolean;
  nb_tickets: number;
  max_quantity?: CreateSponsoringPackSchemaMaxQuantity;
}

export interface AttachOptionsToPackSchema {
  required: string[];
  optional: string[];
}

export type CommunicationItemSchemaPublicationDate = string | null;

export type CommunicationItemSchemaSupportUrl = string | null;

export interface CommunicationItemSchema {
  partnership_id: string;
  company_name: string;
  publication_date?: CommunicationItemSchemaPublicationDate;
  support_url?: CommunicationItemSchemaSupportUrl;
}

export interface CommunicationPlanSchema {
  done: CommunicationItemSchema[];
  planned: CommunicationItemSchema[];
  unplanned: CommunicationItemSchema[];
}

export interface CreateEventExternalLinkSchema {
  name: string;
  url: string;
}

export interface BoothLocationRequestSchema {
  location: string;
}

export interface BoothLocationResponseSchema {
  id: string;
  location: string;
}

export interface SuggestPartnershipSchema {
  pack_id: string;
  option_ids?: string[];
  language: string;
}

export interface PublicationDateRequestSchema {
  publication_date: string;
}

export interface PublicationDateResponseSchema {
  id: string;
  publication_date: string;
}

export interface SupportUploadResponseSchema {
  id: string;
  url: string;
}

export type CreateByIdentifiersSchema = string[];

export type UserSchemaDisplayName = string | null;

export type UserSchemaPictureUrl = string | null;

export interface UserSchema {
  display_name?: UserSchemaDisplayName;
  picture_url?: UserSchemaPictureUrl;
  email: string;
}

export interface GrantPermissionRequestSchema {
  user_emails: string[];
}

export type GetAuthCallback404 = { [key: string]: unknown };

export type GetCompaniesParams = {
query?: string;
/**
 * Page number (must be >= 1)
 * @minimum 1
 */
page?: number;
/**
 * Number of items per page (must be between 1 and 100)
 * @minimum 1
 * @maximum 100
 */
page_size?: number;
};

export type PostCompaniesLogoBody = {
  /** Logo file (SVG, PNG, or JPEG) */
  file?: Blob;
};

export type GetCompaniesJobOffersParams = {
/**
 * Page number (must be >= 1)
 * @minimum 1
 */
page?: number;
/**
 * Number of items per page (must be between 1 and 100)
 * @minimum 1
 * @maximum 100
 */
page_size?: number;
};

export type GetCompaniesJobOffers404 = {
  message?: string;
};

export type PostCompaniesJobOffers400 = {
  message?: string;
};

export type GetEventsParams = {
/**
 * Page number (must be >= 1)
 * @minimum 1
 */
page?: number;
/**
 * Number of items per page (must be between 1 and 100)
 * @minimum 1
 * @maximum 100
 */
page_size?: number;
};

export type PostEventsPartnershipSignedAgreementBody = {
  /** Signed agreement PDF file */
  file?: Blob;
};

export type GetProvidersParams = {
/**
 * Search providers by name (case-insensitive)
 */
query?: string;
/**
 * Sort by field (default: createdAt)
 */
sort?: GetProvidersSort;
/**
 * Sort direction (default: asc)
 */
direction?: GetProvidersDirection;
/**
 * Page number (must be >= 1)
 * @minimum 1
 */
page?: number;
/**
 * Number of items per page (must be between 1 and 100)
 * @minimum 1
 * @maximum 100
 */
page_size?: number;
};

export type GetProvidersSort = typeof GetProvidersSort[keyof typeof GetProvidersSort];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetProvidersSort = {
  name: 'name',
  createdAt: 'createdAt',
  creation: 'creation',
  created: 'created',
} as const;

export type GetProvidersDirection = typeof GetProvidersDirection[keyof typeof GetProvidersDirection];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetProvidersDirection = {
  asc: 'asc',
  desc: 'desc',
} as const;

export type PostProviders201 = {
  /** UUID of the created provider */
  id: string;
};

export type GetOrgsEventsParams = {
/**
 * Page number (default: 1)
 * @minimum 1
 */
page?: number;
/**
 * Number of items per page (default: 20)
 * @minimum 1
 * @maximum 100
 */
page_size?: number;
};

export type PostOrgsEventsBoothPlanBody = {
  /** Booth plan image file (PNG, JPEG, GIF) */
  file?: Blob;
};

export type PostOrgsEventsBoothPlan201 = {
  /** URL of the uploaded booth plan image */
  url: string;
};

/**
 * Integration configuration data
 */
export type PostOrgsEventsIntegrationsBody = { [key: string]: unknown };

export type DeleteOrgsEventsOptions204 = { [key: string]: unknown };

export type DeleteOrgsEventsPacks204 = { [key: string]: unknown };

export type PostOrgsEventsPacksOptions201 = { [key: string]: unknown };

export type DeleteOrgsEventsPacksOptions204 = { [key: string]: unknown };

export type GetOrgsEventsPartnershipParams = {
/**
 * Filter by sponsoring pack ID
 */
'filter[pack_id]'?: string;
/**
 * Filter by validation status
 */
'filter[validated]'?: boolean;
/**
 * Filter by suggestion status
 */
'filter[suggestion]'?: boolean;
/**
 * Filter by payment status
 */
'filter[paid]'?: boolean;
/**
 * Filter by agreement generation status
 */
'filter[agreement-generated]'?: boolean;
/**
 * Filter by agreement signature status
 */
'filter[agreement-signed]'?: boolean;
/**
 * Sort field
 */
sort?: GetOrgsEventsPartnershipSort;
/**
 * Sort direction
 */
direction?: GetOrgsEventsPartnershipDirection;
};

export type GetOrgsEventsPartnershipSort = typeof GetOrgsEventsPartnershipSort[keyof typeof GetOrgsEventsPartnershipSort];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetOrgsEventsPartnershipSort = {
  created: 'created',
  updated: 'updated',
} as const;

export type GetOrgsEventsPartnershipDirection = typeof GetOrgsEventsPartnershipDirection[keyof typeof GetOrgsEventsPartnershipDirection];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetOrgsEventsPartnershipDirection = {
  asc: 'asc',
  desc: 'desc',
} as const;

export type PostOrgsEventsPartnershipAgreement200 = {
  /** URL to the generated agreement PDF */
  url: string;
};

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];


  /**
 * OAuth callback endpoint
 * @summary OAuth callback endpoint
 */
export const getAuthCallback = (
    
 options?: SecondParameter<typeof customFetch<UserSessionSchema>>,) => {
      return customFetch<UserSessionSchema>(
      {url: `/auth/callback`, method: 'GET'
    },
      options);
    }
  
/**
 * Start OAuth login flow - redirects to Google OAuth
 * @summary Get resource
 */
export const getAuthLogin = (
    
 options?: SecondParameter<typeof customFetch<string>>,) => {
      return customFetch<string>(
      {url: `/auth/login`, method: 'GET'
    },
      options);
    }
  
/**
 * Logout and clear session
 * @summary Get resource
 */
export const getAuthLogout = (
    
 options?: SecondParameter<typeof customFetch<void>>,) => {
      return customFetch<void>(
      {url: `/auth/logout`, method: 'GET'
    },
      options);
    }
  
/**
 * Get current user information
 * @summary Get resource
 */
export const getAuthMe = (
    
 options?: SecondParameter<typeof customFetch<UserInfoSchema>>,) => {
      return customFetch<UserInfoSchema>(
      {url: `/auth/me`, method: 'GET'
    },
      options);
    }
  
/**
 * List companies with paging support
 * @summary Get resource
 */
export const getCompanies = (
    params?: GetCompaniesParams,
 options?: SecondParameter<typeof customFetch<PaginatedCompanySchema>>,) => {
      return customFetch<PaginatedCompanySchema>(
      {url: `/companies`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Create company
 */
export const postCompanies = (
    createCompanySchema: CreateCompanySchema,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {
      return customFetch<IdentifierSchema>(
      {url: `/companies`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createCompanySchema
    },
      options);
    }
  
/**
 * Upload a logo for a company
 * @summary Create resource
 */
export const postCompaniesLogo = (
    companyId: string,
    postCompaniesLogoBody: PostCompaniesLogoBody,
 options?: SecondParameter<typeof customFetch<MediaSchema>>,) => {const formData = new FormData();
if(postCompaniesLogoBody.file !== undefined) {
 formData.append(`file`, postCompaniesLogoBody.file)
 }

      return customFetch<MediaSchema>(
      {url: `/companies/${companyId}/logo`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      options);
    }
  
/**
 * @summary List partnerships
 */
export const getCompaniesPartnership = (
    companyId: string,
 options?: SecondParameter<typeof customFetch<PartnershipItemSchema[]>>,) => {
      return customFetch<PartnershipItemSchema[]>(
      {url: `/companies/${companyId}/partnership`, method: 'GET'
    },
      options);
    }
  
/**
 * Retrieve all job offers for a specific company with pagination support
 * @summary List job offers for company
 */
export const getCompaniesJobOffers = (
    companyId: string,
    params?: GetCompaniesJobOffersParams,
 options?: SecondParameter<typeof customFetch<PaginatedJobOfferSchema>>,) => {
      return customFetch<PaginatedJobOfferSchema>(
      {url: `/companies/${companyId}/job-offers`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * Create a new job offer for the specified company
 * @summary Create job offer
 */
export const postCompaniesJobOffers = (
    companyId: string,
    createJobOfferSchema: CreateJobOfferSchema,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {
      return customFetch<IdentifierSchema>(
      {url: `/companies/${companyId}/job-offers`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createJobOfferSchema
    },
      options);
    }
  
/**
 * Retrieve a specific job offer by its ID
 * @summary Get job offer by ID
 */
export const getCompaniesJobOffersById = (
    companyId: string,
    jobOfferId: string,
 options?: SecondParameter<typeof customFetch<JobOfferResponseSchema>>,) => {
      return customFetch<JobOfferResponseSchema>(
      {url: `/companies/${companyId}/job-offers/${jobOfferId}`, method: 'GET'
    },
      options);
    }
  
/**
 * Update an existing job offer with partial or complete data
 * @summary Update job offer
 */
export const putCompaniesJobOffersById = (
    companyId: string,
    jobOfferId: string,
    updateJobOfferSchema: UpdateJobOfferSchema,
 options?: SecondParameter<typeof customFetch<JobOfferResponseSchema>>,) => {
      return customFetch<JobOfferResponseSchema>(
      {url: `/companies/${companyId}/job-offers/${jobOfferId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateJobOfferSchema
    },
      options);
    }
  
/**
 * Delete an existing job offer
 * @summary Delete job offer
 */
export const deleteCompaniesJobOffersById = (
    companyId: string,
    jobOfferId: string,
 options?: SecondParameter<typeof customFetch<void>>,) => {
      return customFetch<void>(
      {url: `/companies/${companyId}/job-offers/${jobOfferId}`, method: 'DELETE'
    },
      options);
    }
  
/**
 * List events with paging support
 * @summary List organization events
 */
export const getEvents = (
    params?: GetEventsParams,
 options?: SecondParameter<typeof customFetch<PaginatedEventSummarySchema>>,) => {
      return customFetch<PaginatedEventSummarySchema>(
      {url: `/events`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * Get event details with organization information
 * @summary Get resource
 */
export const getEventBySlug = (
    eventSlug: string,
 options?: SecondParameter<typeof customFetch<EventWithOrganisationSchema>>,) => {
      return customFetch<EventWithOrganisationSchema>(
      {url: `/events/${eventSlug}`, method: 'GET'
    },
      options);
    }
  
/**
 * List public sponsoring packages for an event with embedded and optional options (authentication optional - publicly accessible)
 * @summary List public sponsoring packages
 */
export const getEventsSponsoringPacks = (
    eventSlug: string,
 options?: SecondParameter<typeof customFetch<SponsoringPackSchema[]>>,) => {
      return customFetch<SponsoringPackSchema[]>(
      {url: `/events/${eventSlug}/sponsoring/packs`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Create resource
 */
export const postEventsPartnership = (
    eventSlug: string,
    registerPartnershipSchema: RegisterPartnershipSchema,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {
      return customFetch<IdentifierSchema>(
      {url: `/events/${eventSlug}/partnership`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: registerPartnershipSchema
    },
      options);
    }
  
/**
 * @summary Get partnership billing information
 */
export const getEventsPartnershipBilling = (
    eventSlug: string,
    partnershipId: string,
 options?: SecondParameter<typeof customFetch<CompanyBillingDataSchema>>,) => {
      return customFetch<CompanyBillingDataSchema>(
      {url: `/events/${eventSlug}/partnership/${partnershipId}/billing`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Create partnership billing
 */
export const postEventsPartnershipBilling = (
    eventSlug: string,
    partnershipId: string,
    companyBillingDataSchema: CompanyBillingDataSchema,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {
      return customFetch<IdentifierSchema>(
      {url: `/events/${eventSlug}/partnership/${partnershipId}/billing`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: companyBillingDataSchema
    },
      options);
    }
  
/**
 * @summary Update partnership billing
 */
export const putEventsPartnershipBilling = (
    eventSlug: string,
    partnershipId: string,
    companyBillingDataSchema: CompanyBillingDataSchema,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {
      return customFetch<IdentifierSchema>(
      {url: `/events/${eventSlug}/partnership/${partnershipId}/billing`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: companyBillingDataSchema
    },
      options);
    }
  
/**
 * @summary Generate partnership invoice
 */
export const postEventsPartnershipBillingInvoice = (
    eventSlug: string,
    partnershipId: string,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {
      return customFetch<IdentifierSchema>(
      {url: `/events/${eventSlug}/partnership/${partnershipId}/billing/invoice`, method: 'POST'
    },
      options);
    }
  
/**
 * @summary Generate partnership quote
 */
export const postEventsPartnershipBillingQuote = (
    eventSlug: string,
    partnershipId: string,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {
      return customFetch<IdentifierSchema>(
      {url: `/events/${eventSlug}/partnership/${partnershipId}/billing/quote`, method: 'POST'
    },
      options);
    }
  
/**
 * Upload a signed partnership agreement
 * @summary Upload signed partnership agreement
 */
export const postEventsPartnershipSignedAgreement = (
    eventSlug: string,
    partnershipId: string,
    postEventsPartnershipSignedAgreementBody: PostEventsPartnershipSignedAgreementBody,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {const formData = new FormData();
if(postEventsPartnershipSignedAgreementBody.file !== undefined) {
 formData.append(`file`, postEventsPartnershipSignedAgreementBody.file)
 }

      return customFetch<IdentifierSchema>(
      {url: `/events/${eventSlug}/partnership/${partnershipId}/signed-agreement`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      options);
    }
  
/**
 * @summary Approve partnership suggestion
 */
export const postEventsPartnershipSuggestionApprove = (
    eventSlug: string,
    partnershipId: string,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {
      return customFetch<IdentifierSchema>(
      {url: `/events/${eventSlug}/partnership/${partnershipId}/suggestion-approve`, method: 'POST'
    },
      options);
    }
  
/**
 * @summary Decline partnership suggestion
 */
export const postEventsPartnershipSuggestionDecline = (
    eventSlug: string,
    partnershipId: string,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {
      return customFetch<IdentifierSchema>(
      {url: `/events/${eventSlug}/partnership/${partnershipId}/suggestion-decline`, method: 'POST'
    },
      options);
    }
  
/**
 * @summary Get partnership tickets
 */
export const getEventsPartnershipTickets = (
    eventSlug: string,
    partnershipId: string,
 options?: SecondParameter<typeof customFetch<TicketSchema[]>>,) => {
      return customFetch<TicketSchema[]>(
      {url: `/events/${eventSlug}/partnership/${partnershipId}/tickets`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Create partnership tickets
 */
export const postEventsPartnershipTickets = (
    eventSlug: string,
    partnershipId: string,
    ticketDataSchema: TicketDataSchema[],
 options?: SecondParameter<typeof customFetch<TicketOrderSchema>>,) => {
      return customFetch<TicketOrderSchema>(
      {url: `/events/${eventSlug}/partnership/${partnershipId}/tickets`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: ticketDataSchema
    },
      options);
    }
  
/**
 * @summary Update partnership ticket
 */
export const putEventsPartnershipTickets = (
    eventSlug: string,
    partnershipId: string,
    ticketId: string,
    ticketDataSchema: TicketDataSchema,
 options?: SecondParameter<typeof customFetch<TicketSchema>>,) => {
      return customFetch<TicketSchema>(
      {url: `/events/${eventSlug}/partnership/${partnershipId}/tickets/${ticketId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: ticketDataSchema
    },
      options);
    }
  
/**
 * List all providers with optional filtering and sorting
 * @summary List providers
 */
export const getProviders = (
    params?: GetProvidersParams,
 options?: SecondParameter<typeof customFetch<PaginatedProviderSchema>>,) => {
      return customFetch<PaginatedProviderSchema>(
      {url: `/providers`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * Create a new provider (requires authentication and organizer status)
 * @summary Create new provider
 */
export const postProviders = (
    createProviderSchema: CreateProviderSchema,
 options?: SecondParameter<typeof customFetch<PostProviders201>>,) => {
      return customFetch<PostProviders201>(
      {url: `/providers`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createProviderSchema
    },
      options);
    }
  
/**
 * @summary Create new organization
 */
export const postOrgs = (
    organisationSchema: OrganisationSchema,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {
      return customFetch<IdentifierSchema>(
      {url: `/orgs`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: organisationSchema
    },
      options);
    }
  
/**
 * @summary Get organization details
 */
export const getOrgs = (
    orgSlug: string,
 options?: SecondParameter<typeof customFetch<OrganisationSchema>>,) => {
      return customFetch<OrganisationSchema>(
      {url: `/orgs/${orgSlug}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Update organization
 */
export const putOrgs = (
    orgSlug: string,
    organisationSchema: OrganisationSchema,
 options?: SecondParameter<typeof customFetch<OrganisationSchema>>,) => {
      return customFetch<OrganisationSchema>(
      {url: `/orgs/${orgSlug}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: organisationSchema
    },
      options);
    }
  
/**
 * List events for an organization (paginated)
 * @summary Get organization details
 */
export const getOrgsEvents = (
    orgSlug: string,
    params?: GetOrgsEventsParams,
 options?: SecondParameter<typeof customFetch<PaginatedEventSummarySchema>>,) => {
      return customFetch<PaginatedEventSummarySchema>(
      {url: `/orgs/${orgSlug}/events`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * Create a new event for an organization
 * @summary Create organization event
 */
export const postOrgsEvents = (
    orgSlug: string,
    eventSchema: EventSchema,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {
      return customFetch<IdentifierSchema>(
      {url: `/orgs/${orgSlug}/events`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: eventSchema
    },
      options);
    }
  
/**
 * @summary Update event
 */
export const putOrgsEvents = (
    orgSlug: string,
    eventSlug: string,
    eventSchema: EventSchema,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {
      return customFetch<IdentifierSchema>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: eventSchema
    },
      options);
    }
  
/**
 * Upload booth plan image for an event
 * @summary Upload booth plan
 */
export const postOrgsEventsBoothPlan = (
    orgSlug: string,
    eventSlug: string,
    postOrgsEventsBoothPlanBody: PostOrgsEventsBoothPlanBody,
 options?: SecondParameter<typeof customFetch<PostOrgsEventsBoothPlan201>>,) => {const formData = new FormData();
if(postOrgsEventsBoothPlanBody.file !== undefined) {
 formData.append(`file`, postOrgsEventsBoothPlanBody.file)
 }

      return customFetch<PostOrgsEventsBoothPlan201>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/booth-plan`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      options);
    }
  
/**
 * Register an integration for an event
 * @summary Create event integration
 */
export const postOrgsEventsIntegrations = (
    orgSlug: string,
    eventSlug: string,
    provider: 'QONTO' | 'MAILJET' | 'BILLETWEB',
    usage: 'BILLING' | 'MAILING' | 'TICKETING',
    postOrgsEventsIntegrationsBody: PostOrgsEventsIntegrationsBody,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {
      return customFetch<IdentifierSchema>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/integrations/${provider}/${usage}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrgsEventsIntegrationsBody
    },
      options);
    }
  
/**
 * List sponsoring options for an event
 * @summary Get organization details
 */
export const getOrgsEventsOptions = (
    orgSlug: string,
    eventSlug: string,
 options?: SecondParameter<typeof customFetch<SponsoringOptionSchema[]>>,) => {
      return customFetch<SponsoringOptionSchema[]>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/options`, method: 'GET'
    },
      options);
    }
  
/**
 * Create a new sponsoring option
 * @summary Create sponsoring option
 */
export const postOrgsEventsOptions = (
    orgSlug: string,
    eventSlug: string,
    createSponsoringOptionSchema: CreateSponsoringOptionSchema,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {
      return customFetch<IdentifierSchema>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createSponsoringOptionSchema
    },
      options);
    }
  
/**
 * @summary Delete sponsoring option
 */
export const deleteOrgsEventsOptions = (
    orgSlug: string,
    eventSlug: string,
    optionId: string,
 options?: SecondParameter<typeof customFetch<DeleteOrgsEventsOptions204>>,) => {
      return customFetch<DeleteOrgsEventsOptions204>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/options/${optionId}`, method: 'DELETE'
    },
      options);
    }
  
/**
 * @summary Update sponsoring option
 */
export const putOrgsEventsOptions = (
    orgSlug: string,
    eventSlug: string,
    optionId: string,
    createSponsoringOptionSchema: CreateSponsoringOptionSchema,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {
      return customFetch<IdentifierSchema>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/options/${optionId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: createSponsoringOptionSchema
    },
      options);
    }
  
/**
 * List sponsoring packs for an event
 * @summary Get organization details
 */
export const getOrgsEventsPacks = (
    orgSlug: string,
    eventSlug: string,
 options?: SecondParameter<typeof customFetch<SponsoringPackSchema[]>>,) => {
      return customFetch<SponsoringPackSchema[]>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/packs`, method: 'GET'
    },
      options);
    }
  
/**
 * Create a new sponsoring pack
 * @summary Create sponsoring pack
 */
export const postOrgsEventsPacks = (
    orgSlug: string,
    eventSlug: string,
    createSponsoringPackSchema: CreateSponsoringPackSchema,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {
      return customFetch<IdentifierSchema>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/packs`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createSponsoringPackSchema
    },
      options);
    }
  
/**
 * @summary Delete sponsoring pack
 */
export const deleteOrgsEventsPacks = (
    orgSlug: string,
    eventSlug: string,
    packId: string,
 options?: SecondParameter<typeof customFetch<DeleteOrgsEventsPacks204>>,) => {
      return customFetch<DeleteOrgsEventsPacks204>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/packs/${packId}`, method: 'DELETE'
    },
      options);
    }
  
/**
 * @summary Update sponsoring pack
 */
export const putOrgsEventsPacks = (
    orgSlug: string,
    eventSlug: string,
    packId: string,
    createSponsoringPackSchema: CreateSponsoringPackSchema,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {
      return customFetch<IdentifierSchema>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/packs/${packId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: createSponsoringPackSchema
    },
      options);
    }
  
/**
 * @summary Create sponsoring option
 */
export const postOrgsEventsPacksOptions = (
    orgSlug: string,
    eventSlug: string,
    packId: string,
    attachOptionsToPackSchema: AttachOptionsToPackSchema,
 options?: SecondParameter<typeof customFetch<PostOrgsEventsPacksOptions201>>,) => {
      return customFetch<PostOrgsEventsPacksOptions201>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/packs/${packId}/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: attachOptionsToPackSchema
    },
      options);
    }
  
/**
 * @summary Delete sponsoring option
 */
export const deleteOrgsEventsPacksOptions = (
    orgSlug: string,
    eventSlug: string,
    packId: string,
    optionId: string,
 options?: SecondParameter<typeof customFetch<DeleteOrgsEventsPacksOptions204>>,) => {
      return customFetch<DeleteOrgsEventsPacksOptions204>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/packs/${packId}/options/${optionId}`, method: 'DELETE'
    },
      options);
    }
  
/**
 * Get communication plan for all partnerships of an event, grouped by status
 * @summary Get organization details
 */
export const getOrgsEventsCommunication = (
    orgSlug: string,
    eventSlug: string,
 options?: SecondParameter<typeof customFetch<CommunicationPlanSchema>>,) => {
      return customFetch<CommunicationPlanSchema>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/communication`, method: 'GET'
    },
      options);
    }
  
/**
 * Attach a new external link to an event
 * @summary Add external link
 */
export const postOrgsEventsExternalLink = (
    orgSlug: string,
    eventSlug: string,
    createEventExternalLinkSchema: CreateEventExternalLinkSchema,
 options?: SecondParameter<typeof customFetch<string>>,) => {
      return customFetch<string>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/external-link`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createEventExternalLinkSchema
    },
      options);
    }
  
/**
 * Remove an external link by its ID
 * @summary Delete external link
 */
export const deleteOrgsEventsExternalLink = (
    orgSlug: string,
    eventSlug: string,
    linkId: string,
 options?: SecondParameter<typeof customFetch<void>>,) => {
      return customFetch<void>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/external-link/${linkId}`, method: 'DELETE'
    },
      options);
    }
  
/**
 * List partnerships for an event with filtering options
 * @summary Get partnership list
 */
export const getOrgsEventsPartnership = (
    orgSlug: string,
    eventSlug: string,
    params?: GetOrgsEventsPartnershipParams,
 options?: SecondParameter<typeof customFetch<PartnershipItemSchema[]>>,) => {
      return customFetch<PartnershipItemSchema[]>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/partnership`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * Generate a partnership agreement PDF
 * @summary Generate partnership agreement
 */
export const postOrgsEventsPartnershipAgreement = (
    orgSlug: string,
    eventSlug: string,
    partnershipId: string,
 options?: SecondParameter<typeof customFetch<PostOrgsEventsPartnershipAgreement200>>,) => {
      return customFetch<PostOrgsEventsPartnershipAgreement200>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/partnership/${partnershipId}/agreement`, method: 'POST'
    },
      options);
    }
  
/**
 * @summary Update partnership billing status
 */
export const postOrgsEventsPartnershipBilling = (
    orgSlug: string,
    eventSlug: string,
    partnershipId: string,
    billingStatus: string,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {
      return customFetch<IdentifierSchema>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/partnership/${partnershipId}/billing/${billingStatus}`, method: 'POST'
    },
      options);
    }
  
/**
 * Assign booth location to a partnership
 * @summary Update organization
 */
export const putOrgsEventsPartnershipBoothLocation = (
    orgSlug: string,
    eventSlug: string,
    partnershipId: string,
    boothLocationRequestSchema: BoothLocationRequestSchema,
 options?: SecondParameter<typeof customFetch<BoothLocationResponseSchema>>,) => {
      return customFetch<BoothLocationResponseSchema>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/partnership/${partnershipId}/booth-location`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: boothLocationRequestSchema
    },
      options);
    }
  
/**
 * @summary Create partnership suggestion
 */
export const postOrgsEventsPartnershipSuggestion = (
    orgSlug: string,
    eventSlug: string,
    partnershipId: string,
    suggestPartnershipSchema: SuggestPartnershipSchema,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {
      return customFetch<IdentifierSchema>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/partnership/${partnershipId}/suggestion`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: suggestPartnershipSchema
    },
      options);
    }
  
/**
 * Validate a partnership request
 * @summary Validate partnership
 */
export const postOrgsEventsPartnershipValidate = (
    orgSlug: string,
    eventSlug: string,
    partnershipId: string,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {
      return customFetch<IdentifierSchema>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/partnership/${partnershipId}/validate`, method: 'POST'
    },
      options);
    }
  
/**
 * Decline a partnership request
 * @summary Decline partnership
 */
export const postOrgsEventsPartnershipDecline = (
    orgSlug: string,
    eventSlug: string,
    partnershipId: string,
 options?: SecondParameter<typeof customFetch<IdentifierSchema>>,) => {
      return customFetch<IdentifierSchema>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/partnership/${partnershipId}/decline`, method: 'POST'
    },
      options);
    }
  
/**
 * Schedule publication date for partnership communication
 * @summary Update organization
 */
export const putOrgsEventsPartnershipCommunicationPublication = (
    orgSlug: string,
    eventSlug: string,
    partnershipId: string,
    publicationDateRequestSchema: PublicationDateRequestSchema,
 options?: SecondParameter<typeof customFetch<PublicationDateResponseSchema>>,) => {
      return customFetch<PublicationDateResponseSchema>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/partnership/${partnershipId}/communication/publication`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: publicationDateRequestSchema
    },
      options);
    }
  
/**
 * Upload visual support material for partnership communication
 * @summary Update organization
 */
export const putOrgsEventsPartnershipCommunicationSupport = (
    orgSlug: string,
    eventSlug: string,
    partnershipId: string,
    putOrgsEventsPartnershipCommunicationSupportBody: Blob,
 options?: SecondParameter<typeof customFetch<SupportUploadResponseSchema>>,) => {
      return customFetch<SupportUploadResponseSchema>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/partnership/${partnershipId}/communication/support`, method: 'PUT',
      headers: {'Content-Type': 'image/png', },
      data: putOrgsEventsPartnershipCommunicationSupportBody
    },
      options);
    }
  
/**
 * Attach providers to an event (requires event write access)
 * @summary Create new provider
 */
export const postOrgsEventsProviders = (
    orgSlug: string,
    eventSlug: string,
    createByIdentifiersSchema: CreateByIdentifiersSchema,
 options?: SecondParameter<typeof customFetch<string[]>>,) => {
      return customFetch<string[]>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/providers`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createByIdentifiersSchema
    },
      options);
    }
  
/**
 * Remove providers from an event (requires event write access)
 * @summary Remove providers from event
 */
export const deleteOrgsEventsProviders = (
    orgSlug: string,
    eventSlug: string,
    createByIdentifiersSchema: CreateByIdentifiersSchema,
 options?: SecondParameter<typeof customFetch<string[]>>,) => {
      return customFetch<string[]>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/providers`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: createByIdentifiersSchema
    },
      options);
    }
  
/**
 * @summary Get organization details
 */
export const getOrgsUsers = (
    orgSlug: string,
 options?: SecondParameter<typeof customFetch<UserSchema[]>>,) => {
      return customFetch<UserSchema[]>(
      {url: `/orgs/${orgSlug}/users`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Create resource
 */
export const postOrgsUsersGrant = (
    orgSlug: string,
    grantPermissionRequestSchema: GrantPermissionRequestSchema,
 options?: SecondParameter<typeof customFetch<string>>,) => {
      return customFetch<string>(
      {url: `/orgs/${orgSlug}/users/grant`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: grantPermissionRequestSchema
    },
      options);
    }
  
/**
 * @summary List organization events
 */
export const getUsersMeEvents = (
    
 options?: SecondParameter<typeof customFetch<EventSummarySchema[]>>,) => {
      return customFetch<EventSummarySchema[]>(
      {url: `/users/me/events`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Get resource
 */
export const getUsersMeOrgs = (
    
 options?: SecondParameter<typeof customFetch<OrganisationItemSchema[]>>,) => {
      return customFetch<OrganisationItemSchema[]>(
      {url: `/users/me/orgs`, method: 'GET'
    },
      options);
    }
  
export type GetAuthCallbackResult = NonNullable<Awaited<ReturnType<typeof getAuthCallback>>>
export type GetAuthLoginResult = NonNullable<Awaited<ReturnType<typeof getAuthLogin>>>
export type GetAuthLogoutResult = NonNullable<Awaited<ReturnType<typeof getAuthLogout>>>
export type GetAuthMeResult = NonNullable<Awaited<ReturnType<typeof getAuthMe>>>
export type GetCompaniesResult = NonNullable<Awaited<ReturnType<typeof getCompanies>>>
export type PostCompaniesResult = NonNullable<Awaited<ReturnType<typeof postCompanies>>>
export type PostCompaniesLogoResult = NonNullable<Awaited<ReturnType<typeof postCompaniesLogo>>>
export type GetCompaniesPartnershipResult = NonNullable<Awaited<ReturnType<typeof getCompaniesPartnership>>>
export type GetCompaniesJobOffersResult = NonNullable<Awaited<ReturnType<typeof getCompaniesJobOffers>>>
export type PostCompaniesJobOffersResult = NonNullable<Awaited<ReturnType<typeof postCompaniesJobOffers>>>
export type GetCompaniesJobOffersByIdResult = NonNullable<Awaited<ReturnType<typeof getCompaniesJobOffersById>>>
export type PutCompaniesJobOffersByIdResult = NonNullable<Awaited<ReturnType<typeof putCompaniesJobOffersById>>>
export type DeleteCompaniesJobOffersByIdResult = NonNullable<Awaited<ReturnType<typeof deleteCompaniesJobOffersById>>>
export type GetEventsResult = NonNullable<Awaited<ReturnType<typeof getEvents>>>
export type GetEventBySlugResult = NonNullable<Awaited<ReturnType<typeof getEventBySlug>>>
export type GetEventsSponsoringPacksResult = NonNullable<Awaited<ReturnType<typeof getEventsSponsoringPacks>>>
export type PostEventsPartnershipResult = NonNullable<Awaited<ReturnType<typeof postEventsPartnership>>>
export type GetEventsPartnershipBillingResult = NonNullable<Awaited<ReturnType<typeof getEventsPartnershipBilling>>>
export type PostEventsPartnershipBillingResult = NonNullable<Awaited<ReturnType<typeof postEventsPartnershipBilling>>>
export type PutEventsPartnershipBillingResult = NonNullable<Awaited<ReturnType<typeof putEventsPartnershipBilling>>>
export type PostEventsPartnershipBillingInvoiceResult = NonNullable<Awaited<ReturnType<typeof postEventsPartnershipBillingInvoice>>>
export type PostEventsPartnershipBillingQuoteResult = NonNullable<Awaited<ReturnType<typeof postEventsPartnershipBillingQuote>>>
export type PostEventsPartnershipSignedAgreementResult = NonNullable<Awaited<ReturnType<typeof postEventsPartnershipSignedAgreement>>>
export type PostEventsPartnershipSuggestionApproveResult = NonNullable<Awaited<ReturnType<typeof postEventsPartnershipSuggestionApprove>>>
export type PostEventsPartnershipSuggestionDeclineResult = NonNullable<Awaited<ReturnType<typeof postEventsPartnershipSuggestionDecline>>>
export type GetEventsPartnershipTicketsResult = NonNullable<Awaited<ReturnType<typeof getEventsPartnershipTickets>>>
export type PostEventsPartnershipTicketsResult = NonNullable<Awaited<ReturnType<typeof postEventsPartnershipTickets>>>
export type PutEventsPartnershipTicketsResult = NonNullable<Awaited<ReturnType<typeof putEventsPartnershipTickets>>>
export type GetProvidersResult = NonNullable<Awaited<ReturnType<typeof getProviders>>>
export type PostProvidersResult = NonNullable<Awaited<ReturnType<typeof postProviders>>>
export type PostOrgsResult = NonNullable<Awaited<ReturnType<typeof postOrgs>>>
export type GetOrgsResult = NonNullable<Awaited<ReturnType<typeof getOrgs>>>
export type PutOrgsResult = NonNullable<Awaited<ReturnType<typeof putOrgs>>>
export type GetOrgsEventsResult = NonNullable<Awaited<ReturnType<typeof getOrgsEvents>>>
export type PostOrgsEventsResult = NonNullable<Awaited<ReturnType<typeof postOrgsEvents>>>
export type PutOrgsEventsResult = NonNullable<Awaited<ReturnType<typeof putOrgsEvents>>>
export type PostOrgsEventsBoothPlanResult = NonNullable<Awaited<ReturnType<typeof postOrgsEventsBoothPlan>>>
export type PostOrgsEventsIntegrationsResult = NonNullable<Awaited<ReturnType<typeof postOrgsEventsIntegrations>>>
export type GetOrgsEventsOptionsResult = NonNullable<Awaited<ReturnType<typeof getOrgsEventsOptions>>>
export type PostOrgsEventsOptionsResult = NonNullable<Awaited<ReturnType<typeof postOrgsEventsOptions>>>
export type DeleteOrgsEventsOptionsResult = NonNullable<Awaited<ReturnType<typeof deleteOrgsEventsOptions>>>
export type PutOrgsEventsOptionsResult = NonNullable<Awaited<ReturnType<typeof putOrgsEventsOptions>>>
export type GetOrgsEventsPacksResult = NonNullable<Awaited<ReturnType<typeof getOrgsEventsPacks>>>
export type PostOrgsEventsPacksResult = NonNullable<Awaited<ReturnType<typeof postOrgsEventsPacks>>>
export type DeleteOrgsEventsPacksResult = NonNullable<Awaited<ReturnType<typeof deleteOrgsEventsPacks>>>
export type PutOrgsEventsPacksResult = NonNullable<Awaited<ReturnType<typeof putOrgsEventsPacks>>>
export type PostOrgsEventsPacksOptionsResult = NonNullable<Awaited<ReturnType<typeof postOrgsEventsPacksOptions>>>
export type DeleteOrgsEventsPacksOptionsResult = NonNullable<Awaited<ReturnType<typeof deleteOrgsEventsPacksOptions>>>
export type GetOrgsEventsCommunicationResult = NonNullable<Awaited<ReturnType<typeof getOrgsEventsCommunication>>>
export type PostOrgsEventsExternalLinkResult = NonNullable<Awaited<ReturnType<typeof postOrgsEventsExternalLink>>>
export type DeleteOrgsEventsExternalLinkResult = NonNullable<Awaited<ReturnType<typeof deleteOrgsEventsExternalLink>>>
export type GetOrgsEventsPartnershipResult = NonNullable<Awaited<ReturnType<typeof getOrgsEventsPartnership>>>
export type PostOrgsEventsPartnershipAgreementResult = NonNullable<Awaited<ReturnType<typeof postOrgsEventsPartnershipAgreement>>>
export type PostOrgsEventsPartnershipBillingResult = NonNullable<Awaited<ReturnType<typeof postOrgsEventsPartnershipBilling>>>
export type PutOrgsEventsPartnershipBoothLocationResult = NonNullable<Awaited<ReturnType<typeof putOrgsEventsPartnershipBoothLocation>>>
export type PostOrgsEventsPartnershipSuggestionResult = NonNullable<Awaited<ReturnType<typeof postOrgsEventsPartnershipSuggestion>>>
export type PostOrgsEventsPartnershipValidateResult = NonNullable<Awaited<ReturnType<typeof postOrgsEventsPartnershipValidate>>>
export type PostOrgsEventsPartnershipDeclineResult = NonNullable<Awaited<ReturnType<typeof postOrgsEventsPartnershipDecline>>>
export type PutOrgsEventsPartnershipCommunicationPublicationResult = NonNullable<Awaited<ReturnType<typeof putOrgsEventsPartnershipCommunicationPublication>>>
export type PutOrgsEventsPartnershipCommunicationSupportResult = NonNullable<Awaited<ReturnType<typeof putOrgsEventsPartnershipCommunicationSupport>>>
export type PostOrgsEventsProvidersResult = NonNullable<Awaited<ReturnType<typeof postOrgsEventsProviders>>>
export type DeleteOrgsEventsProvidersResult = NonNullable<Awaited<ReturnType<typeof deleteOrgsEventsProviders>>>
export type GetOrgsUsersResult = NonNullable<Awaited<ReturnType<typeof getOrgsUsers>>>
export type PostOrgsUsersGrantResult = NonNullable<Awaited<ReturnType<typeof postOrgsUsersGrant>>>
export type GetUsersMeEventsResult = NonNullable<Awaited<ReturnType<typeof getUsersMeEvents>>>
export type GetUsersMeOrgsResult = NonNullable<Awaited<ReturnType<typeof getUsersMeOrgs>>>
