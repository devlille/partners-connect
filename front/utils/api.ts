/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * partners_connect API
 * partners_connect API
 * OpenAPI spec version: 1.0.0
 */
import { customFetch } from '../custom-instance';
export interface UserSession {
  state: string;
  token: string;
}

export interface UserInfo {
  displayName: string;
  /** @nullable */
  pictureUrl?: string | null;
  email: string;
}

export interface Address {
  address: string;
  city: string;
  zip_code: string;
  country: string;
}

export interface Media {
  original: string;
  png1000: string;
  png500: string;
  png250: string;
}

export interface Company {
  id: string;
  name: string;
  head_office: Address;
  siret: string;
  vat: string;
  /** @nullable */
  description?: string | null;
  site_url: string;
  /** @nullable */
  medias?: Media;
}

export type SocialType = typeof SocialType[keyof typeof SocialType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SocialType = {
  LINKEDIN: 'LINKEDIN',
  X: 'X',
  BLUESKY: 'BLUESKY',
  MASTODON: 'MASTODON',
  INSTAGRAM: 'INSTAGRAM',
  FACEBOOK: 'FACEBOOK',
  YOUTUBE: 'YOUTUBE',
} as const;

export interface Social {
  type: SocialType;
  url: string;
}

export interface CreateCompany {
  name: string;
  site_url: string;
  head_office: Address;
  siret: string;
  vat: string;
  /** @nullable */
  description?: string | null;
  socials: Social[];
}

export interface Map { [key: string]: unknown }

export type MapString = string;

export interface Contact {
  displayName: string;
  role: string;
}

export interface PartnershipItem {
  id: string;
  contact: Contact;
  companyName: string;
  eventName: string;
  /** @nullable */
  packName?: string | null;
  /** @nullable */
  suggestedPackName?: string | null;
  language: string;
  /** @nullable */
  phone?: string | null;
  emails: string[];
  createdAt: string;
}

export interface EventSummary {
  slug: string;
  name: string;
  start_time: string;
  end_time: string;
  submission_start_time: string;
  submission_end_time: string;
}

export interface Event {
  name: string;
  start_time: string;
  end_time: string;
  submission_start_time: string;
  submission_end_time: string;
  address: string;
  contact: EventContact;
}

export interface EventDisplay {
  slug: string;
  name: string;
  start_time: string;
  end_time: string;
  submission_start_time: string;
  submission_end_time: string;
  address: string;
  contact: EventContact;
}

export interface EventContact {
  email: string;
  /** @nullable */
  phone?: string | null;
}

export interface Organisation {
  name: string;
  /** @nullable */
  head_office?: string | null;
  /** @nullable */
  siret?: string | null;
  /** @nullable */
  siren?: string | null;
  /** @nullable */
  tva?: string | null;
  /** @nullable */
  d_and_b?: string | null;
  /** @nullable */
  nace?: string | null;
  /** @nullable */
  naf?: string | null;
  /** @nullable */
  duns?: string | null;
  /** @nullable */
  iban?: string | null;
  /** @nullable */
  bic?: string | null;
  /** @nullable */
  rib_url?: string | null;
  /** @nullable */
  representative_user_email?: string | null;
  /** @nullable */
  representative_role?: string | null;
  /** @nullable */
  creation_location?: string | null;
  /** @nullable */
  created_at?: string | null;
  /** @nullable */
  published_at?: string | null;
}

export interface EventWithOrganisation {
  event: EventDisplay;
  organisation: OrganisationItem;
}

export interface RegisterPartnership {
  company_id: string;
  pack_id: string;
  option_ids: string[];
  contact_name: string;
  contact_role: string;
  language: string;
  /** @nullable */
  phone?: string | null;
  emails: string[];
}

export interface CompanyBillingData {
  /** @nullable */
  name?: string | null;
  /** @nullable */
  po?: string | null;
  contact: BillingContact;
}

export interface BillingContact {
  first_name: string;
  last_name: string;
  email: string;
}

export interface TicketData {
  first_name: string;
  last_name: string;
}

export interface Ticket {
  id: string;
  extId: string;
  url: string;
  data: TicketData;
}

export interface TicketOrder {
  id: string;
  tickets: Ticket[];
}

export interface SponsoringOption {
  id: string;
  name: string;
  /** @nullable */
  description?: string | null;
  /** @nullable */
  price?: number | null;
}

export interface TranslatedLabel {
  language: string;
  name: string;
  /** @nullable */
  description?: string | null;
}

export interface CreateSponsoringOption {
  translations: TranslatedLabel[];
  /** @nullable */
  price?: number | null;
}

export interface SponsoringPack {
  id: string;
  name: string;
  basePrice: number;
  /** @nullable */
  maxQuantity?: number | null;
  requiredOptions: SponsoringOption[];
  optionalOptions: SponsoringOption[];
}

export interface CreateSponsoringPack {
  name: string;
  price: number;
  withBooth: boolean;
  nbTickets: number;
  /** @nullable */
  maxQuantity?: number | null;
}

export interface AttachOptionsToPack {
  required: string[];
  optional: string[];
}

export interface SuggestPartnership {
  pack_id: string;
  option_ids: string[];
  language: string;
}

export interface User {
  /** @nullable */
  displayName?: string | null;
  /** @nullable */
  pictureUrl?: string | null;
  email: string;
}

export interface GrantPermissionRequest {
  /** List of user emails to grant permissions to */
  user_emails: string[];
}

export interface Owner {
  displayName: string;
  email: string;
}

export interface OrganisationItem {
  name: string;
  slug: string;
  headOffice: string;
  owner: Owner;
}

export interface Provider {
  /** Unique identifier of the provider */
  id: string;
  /** Name of the provider */
  name: string;
  /** Type/category of the provider */
  type: string;
  /**
   * Website URL of the provider
   * @nullable
   */
  website?: string | null;
  /**
   * Phone number of the provider
   * @nullable
   */
  phone?: string | null;
  /**
   * Email address of the provider
   * @nullable
   */
  email?: string | null;
  /** Creation timestamp of the provider */
  created_at: string;
}

export interface CreateProvider {
  /** Name of the provider */
  name: string;
  /** Type/category of the provider */
  type: string;
  /**
   * Website URL of the provider
   * @nullable
   */
  website?: string | null;
  /**
   * Phone number of the provider
   * @nullable
   */
  phone?: string | null;
  /**
   * Email address of the provider
   * @nullable
   */
  email?: string | null;
}

export interface BoothLocationRequest {
  /** The booth location identifier or name */
  location: string;
}

export interface BoothLocationResponse {
  /** The partnership ID */
  id: string;
  /** The assigned booth location */
  location: string;
}

export interface PublicationDateRequest {
  /** Publication date in ISO 8601 format */
  publication_date: string;
}

export interface PublicationDateResponse {
  /** Partnership ID */
  id: string;
  /** Scheduled publication date in ISO 8601 format */
  publication_date: string;
}

export interface SupportUploadResponse {
  /** Partnership ID */
  id: string;
  /** URL of the uploaded visual support material */
  url: string;
}

export interface CommunicationItem {
  /** Partnership unique identifier */
  partnership_id: string;
  /** Company name */
  company_name: string;
  /**
   * Publication date in ISO 8601 format (null for unplanned)
   * @nullable
   */
  publication_date?: string | null;
  /**
   * URL to the communication support material (null if not uploaded)
   * @nullable
   */
  support_url?: string | null;
}

export interface CommunicationPlan {
  /** Communications with past publication dates (sorted newest first) */
  done: CommunicationItem[];
  /** Communications with future publication dates (sorted earliest first) */
  planned: CommunicationItem[];
  /** Communications without publication date (sorted alphabetically by company name) */
  unplanned: CommunicationItem[];
}

export type GetAuthCallback404 = { [key: string]: unknown };

export type GetCompaniesParams = {
query?: string;
};

export type PostCompaniesCompanyIdLogoBody = {
  /** Logo file (SVG, PNG, or JPEG) */
  file?: Blob;
};

export type PostEventsEventSlugPartnershipPartnershipIdSignedAgreementBody = {
  /** Signed agreement PDF file */
  file?: Blob;
};

export type GetProvidersParams = {
/**
 * Search providers by name (case-insensitive)
 */
query?: string;
/**
 * Sort by field (default: createdAt)
 */
sort?: GetProvidersSort;
/**
 * Sort direction (default: asc)
 */
direction?: GetProvidersDirection;
};

export type GetProvidersSort = typeof GetProvidersSort[keyof typeof GetProvidersSort];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetProvidersSort = {
  name: 'name',
  createdAt: 'createdAt',
  creation: 'creation',
  created: 'created',
} as const;

export type GetProvidersDirection = typeof GetProvidersDirection[keyof typeof GetProvidersDirection];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetProvidersDirection = {
  asc: 'asc',
  desc: 'desc',
} as const;

export type PostProviders201 = {
  /** UUID of the created provider */
  id: string;
};

export type PostOrgsOrgSlugEventsEventSlugBoothPlanBody = {
  /** Booth plan image file (PNG, JPEG, GIF) */
  file?: Blob;
};

export type PostOrgsOrgSlugEventsEventSlugBoothPlan201 = {
  /** URL of the uploaded booth plan image */
  url: string;
};

/**
 * Integration configuration data
 */
export type PostOrgsOrgSlugEventsEventSlugIntegrationsProviderUsageBody = { [key: string]: unknown };

export type DeleteOrgsOrgSlugEventsEventSlugOptionsOptionId204 = { [key: string]: unknown };

export type DeleteOrgsOrgSlugEventsEventSlugPacksPackId204 = { [key: string]: unknown };

export type PostOrgsOrgSlugEventsEventSlugPacksPackIdOptions201 = { [key: string]: unknown };

export type DeleteOrgsOrgSlugEventsEventSlugPacksPackIdOptionsOptionId204 = { [key: string]: unknown };

export type PostOrgsOrgSlugEventsEventSlugExternalLinkBody = {
  /** Display name for the external link */
  name: string;
  /** URL of the external resource (must start with http:// or https://) */
  url: string;
};

export type GetOrgsOrgSlugEventsEventSlugPartnershipParams = {
/**
 * Filter by sponsoring pack ID
 */
'filter[pack_id]'?: string;
/**
 * Filter by validation status
 */
'filter[validated]'?: boolean;
/**
 * Filter by suggestion status
 */
'filter[suggestion]'?: boolean;
/**
 * Filter by payment status
 */
'filter[paid]'?: boolean;
/**
 * Filter by agreement generation status
 */
'filter[agreement-generated]'?: boolean;
/**
 * Filter by agreement signature status
 */
'filter[agreement-signed]'?: boolean;
/**
 * Sort field
 */
sort?: GetOrgsOrgSlugEventsEventSlugPartnershipSort;
/**
 * Sort direction
 */
direction?: GetOrgsOrgSlugEventsEventSlugPartnershipDirection;
};

export type GetOrgsOrgSlugEventsEventSlugPartnershipSort = typeof GetOrgsOrgSlugEventsEventSlugPartnershipSort[keyof typeof GetOrgsOrgSlugEventsEventSlugPartnershipSort];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetOrgsOrgSlugEventsEventSlugPartnershipSort = {
  created: 'created',
  updated: 'updated',
} as const;

export type GetOrgsOrgSlugEventsEventSlugPartnershipDirection = typeof GetOrgsOrgSlugEventsEventSlugPartnershipDirection[keyof typeof GetOrgsOrgSlugEventsEventSlugPartnershipDirection];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetOrgsOrgSlugEventsEventSlugPartnershipDirection = {
  asc: 'asc',
  desc: 'desc',
} as const;

export type PostOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdAgreement200 = {
  /** URL to the generated agreement PDF */
  url: string;
};

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];


  /**
 * OAuth callback endpoint
 */
export const getAuthCallback = (
    
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<UserSession>(
      {url: `/auth/callback`, method: 'GET'
    },
      options);
    }
  
/**
 * Start OAuth login flow - redirects to Google OAuth
 */
export const getAuthLogin = (
    
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<unknown>(
      {url: `/auth/login`, method: 'GET'
    },
      options);
    }
  
/**
 * Logout and clear session
 */
export const getAuthLogout = (
    
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<null>(
      {url: `/auth/logout`, method: 'GET'
    },
      options);
    }
  
/**
 * Get current user information
 */
export const getAuthMe = (
    
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<UserInfo>(
      {url: `/auth/me`, method: 'GET'
    },
      options);
    }
  
export const getCompanies = (
    params?: GetCompaniesParams,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<Company[]>(
      {url: `/companies`, method: 'GET',
        params
    },
      options);
    }
  
export const postCompanies = (
    createCompany: CreateCompany,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<MapString>(
      {url: `/companies`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createCompany
    },
      options);
    }
  
/**
 * Upload a logo for a company
 */
export const postCompaniesCompanyIdLogo = (
    companyId: string,
    postCompaniesCompanyIdLogoBody: PostCompaniesCompanyIdLogoBody,
 options?: SecondParameter<typeof customFetch>,) => {const formData = new FormData();
if(postCompaniesCompanyIdLogoBody.file !== undefined) {
 formData.append(`file`, postCompaniesCompanyIdLogoBody.file)
 }

      return customFetch<Media>(
      {url: `/companies/${companyId}/logo`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      options);
    }
  
export const getCompaniesCompanyIdPartnership = (
    companyId: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<PartnershipItem[]>(
      {url: `/companies/${companyId}/partnership`, method: 'GET'
    },
      options);
    }
  
export const getEvents = (
    
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<EventSummary[]>(
      {url: `/events`, method: 'GET'
    },
      options);
    }
  
/**
 * Get event details with organization information
 */
export const getEventsEventSlug = (
    eventSlug: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<EventWithOrganisation>(
      {url: `/events/${eventSlug}`, method: 'GET'
    },
      options);
    }
  
export const postEventsEventSlugPartnership = (
    eventSlug: string,
    registerPartnership: RegisterPartnership,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<MapString>(
      {url: `/events/${eventSlug}/partnership`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: registerPartnership
    },
      options);
    }
  
export const getEventsEventSlugPartnershipPartnershipIdBilling = (
    eventSlug: string,
    partnershipId: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<CompanyBillingData>(
      {url: `/events/${eventSlug}/partnership/${partnershipId}/billing`, method: 'GET'
    },
      options);
    }
  
export const postEventsEventSlugPartnershipPartnershipIdBilling = (
    eventSlug: string,
    partnershipId: string,
    companyBillingData: CompanyBillingData,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<MapString>(
      {url: `/events/${eventSlug}/partnership/${partnershipId}/billing`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: companyBillingData
    },
      options);
    }
  
export const putEventsEventSlugPartnershipPartnershipIdBilling = (
    eventSlug: string,
    partnershipId: string,
    companyBillingData: CompanyBillingData,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<MapString>(
      {url: `/events/${eventSlug}/partnership/${partnershipId}/billing`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: companyBillingData
    },
      options);
    }
  
export const postEventsEventSlugPartnershipPartnershipIdBillingInvoice = (
    eventSlug: string,
    partnershipId: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<MapString>(
      {url: `/events/${eventSlug}/partnership/${partnershipId}/billing/invoice`, method: 'POST'
    },
      options);
    }
  
export const postEventsEventSlugPartnershipPartnershipIdBillingQuote = (
    eventSlug: string,
    partnershipId: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<MapString>(
      {url: `/events/${eventSlug}/partnership/${partnershipId}/billing/quote`, method: 'POST'
    },
      options);
    }
  
/**
 * Upload a signed partnership agreement
 */
export const postEventsEventSlugPartnershipPartnershipIdSignedAgreement = (
    eventSlug: string,
    partnershipId: string,
    postEventsEventSlugPartnershipPartnershipIdSignedAgreementBody: PostEventsEventSlugPartnershipPartnershipIdSignedAgreementBody,
 options?: SecondParameter<typeof customFetch>,) => {const formData = new FormData();
if(postEventsEventSlugPartnershipPartnershipIdSignedAgreementBody.file !== undefined) {
 formData.append(`file`, postEventsEventSlugPartnershipPartnershipIdSignedAgreementBody.file)
 }

      return customFetch<MapString>(
      {url: `/events/${eventSlug}/partnership/${partnershipId}/signed-agreement`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      options);
    }
  
export const postEventsEventSlugPartnershipPartnershipIdSuggestionApprove = (
    eventSlug: string,
    partnershipId: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<MapString>(
      {url: `/events/${eventSlug}/partnership/${partnershipId}/suggestion-approve`, method: 'POST'
    },
      options);
    }
  
export const postEventsEventSlugPartnershipPartnershipIdSuggestionDecline = (
    eventSlug: string,
    partnershipId: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<MapString>(
      {url: `/events/${eventSlug}/partnership/${partnershipId}/suggestion-decline`, method: 'POST'
    },
      options);
    }
  
export const getEventsEventSlugPartnershipPartnershipIdTickets = (
    eventSlug: string,
    partnershipId: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<Ticket[]>(
      {url: `/events/${eventSlug}/partnership/${partnershipId}/tickets`, method: 'GET'
    },
      options);
    }
  
export const postEventsEventSlugPartnershipPartnershipIdTickets = (
    eventSlug: string,
    partnershipId: string,
    ticketData: TicketData[],
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<TicketOrder>(
      {url: `/events/${eventSlug}/partnership/${partnershipId}/tickets`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: ticketData
    },
      options);
    }
  
export const putEventsEventSlugPartnershipPartnershipIdTicketsTicketId = (
    eventSlug: string,
    partnershipId: string,
    ticketId: string,
    ticketData: TicketData,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<Ticket>(
      {url: `/events/${eventSlug}/partnership/${partnershipId}/tickets/${ticketId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: ticketData
    },
      options);
    }
  
/**
 * List all providers with optional filtering and sorting
 */
export const getProviders = (
    params?: GetProvidersParams,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<Provider[]>(
      {url: `/providers`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * Create a new provider (requires authentication and organizer status)
 */
export const postProviders = (
    createProvider: CreateProvider,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<PostProviders201>(
      {url: `/providers`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createProvider
    },
      options);
    }
  
export const postOrgs = (
    organisation: Organisation,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<MapString>(
      {url: `/orgs`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: organisation
    },
      options);
    }
  
export const getOrgsSlug = (
    slug: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<Organisation>(
      {url: `/orgs/${slug}`, method: 'GET'
    },
      options);
    }
  
export const putOrgsOrgSlug = (
    orgSlug: string,
    organisation: Organisation,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<Organisation>(
      {url: `/orgs/${orgSlug}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: organisation
    },
      options);
    }
  
/**
 * List events for an organization
 */
export const getOrgsOrgSlugEvents = (
    orgSlug: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<EventSummary[]>(
      {url: `/orgs/${orgSlug}/events`, method: 'GET'
    },
      options);
    }
  
/**
 * Create a new event for an organization
 */
export const postOrgsOrgSlugEvents = (
    orgSlug: string,
    event: Event,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<MapString>(
      {url: `/orgs/${orgSlug}/events`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: event
    },
      options);
    }
  
export const putOrgsOrgSlugEventsEventSlug = (
    orgSlug: string,
    eventSlug: string,
    event: Event,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<MapString>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: event
    },
      options);
    }
  
/**
 * Upload booth plan image for an event
 */
export const postOrgsOrgSlugEventsEventSlugBoothPlan = (
    orgSlug: string,
    eventSlug: string,
    postOrgsOrgSlugEventsEventSlugBoothPlanBody: PostOrgsOrgSlugEventsEventSlugBoothPlanBody,
 options?: SecondParameter<typeof customFetch>,) => {const formData = new FormData();
if(postOrgsOrgSlugEventsEventSlugBoothPlanBody.file !== undefined) {
 formData.append(`file`, postOrgsOrgSlugEventsEventSlugBoothPlanBody.file)
 }

      return customFetch<PostOrgsOrgSlugEventsEventSlugBoothPlan201>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/booth-plan`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      options);
    }
  
/**
 * Register an integration for an event
 */
export const postOrgsOrgSlugEventsEventSlugIntegrationsProviderUsage = (
    orgSlug: string,
    eventSlug: string,
    provider: 'QONTO' | 'MAILJET' | 'BILLETWEB',
    usage: 'BILLING' | 'MAILING' | 'TICKETING',
    postOrgsOrgSlugEventsEventSlugIntegrationsProviderUsageBody: PostOrgsOrgSlugEventsEventSlugIntegrationsProviderUsageBody,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<MapString>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/integrations/${provider}/${usage}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrgsOrgSlugEventsEventSlugIntegrationsProviderUsageBody
    },
      options);
    }
  
/**
 * List sponsoring options for an event
 */
export const getOrgsOrgSlugEventsEventSlugOptions = (
    orgSlug: string,
    eventSlug: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<SponsoringOption[]>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/options`, method: 'GET'
    },
      options);
    }
  
/**
 * Create a new sponsoring option
 */
export const postOrgsOrgSlugEventsEventSlugOptions = (
    orgSlug: string,
    eventSlug: string,
    createSponsoringOption: CreateSponsoringOption,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<MapString>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createSponsoringOption
    },
      options);
    }
  
export const deleteOrgsOrgSlugEventsEventSlugOptionsOptionId = (
    orgSlug: string,
    eventSlug: string,
    optionId: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<DeleteOrgsOrgSlugEventsEventSlugOptionsOptionId204>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/options/${optionId}`, method: 'DELETE'
    },
      options);
    }
  
export const putOrgsOrgSlugEventsEventSlugOptionsOptionId = (
    orgSlug: string,
    eventSlug: string,
    optionId: string,
    createSponsoringOption: CreateSponsoringOption,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<MapString>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/options/${optionId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: createSponsoringOption
    },
      options);
    }
  
/**
 * List sponsoring packs for an event
 */
export const getOrgsOrgSlugEventsEventSlugPacks = (
    orgSlug: string,
    eventSlug: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<SponsoringPack[]>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/packs`, method: 'GET'
    },
      options);
    }
  
/**
 * Create a new sponsoring pack
 */
export const postOrgsOrgSlugEventsEventSlugPacks = (
    orgSlug: string,
    eventSlug: string,
    createSponsoringPack: CreateSponsoringPack,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<MapString>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/packs`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createSponsoringPack
    },
      options);
    }
  
export const deleteOrgsOrgSlugEventsEventSlugPacksPackId = (
    orgSlug: string,
    eventSlug: string,
    packId: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<DeleteOrgsOrgSlugEventsEventSlugPacksPackId204>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/packs/${packId}`, method: 'DELETE'
    },
      options);
    }
  
export const putOrgsOrgSlugEventsEventSlugPacksPackId = (
    orgSlug: string,
    eventSlug: string,
    packId: string,
    createSponsoringPack: CreateSponsoringPack,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<MapString>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/packs/${packId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: createSponsoringPack
    },
      options);
    }
  
export const postOrgsOrgSlugEventsEventSlugPacksPackIdOptions = (
    orgSlug: string,
    eventSlug: string,
    packId: string,
    attachOptionsToPack: AttachOptionsToPack,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<PostOrgsOrgSlugEventsEventSlugPacksPackIdOptions201>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/packs/${packId}/options`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: attachOptionsToPack
    },
      options);
    }
  
export const deleteOrgsOrgSlugEventsEventSlugPacksPackIdOptionsOptionId = (
    orgSlug: string,
    eventSlug: string,
    packId: string,
    optionId: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<DeleteOrgsOrgSlugEventsEventSlugPacksPackIdOptionsOptionId204>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/packs/${packId}/options/${optionId}`, method: 'DELETE'
    },
      options);
    }
  
/**
 * Get communication plan for all partnerships of an event, grouped by status
 */
export const getOrgsOrgSlugEventsEventSlugCommunication = (
    orgSlug: string,
    eventSlug: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<CommunicationPlan>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/communication`, method: 'GET'
    },
      options);
    }
  
/**
 * Attach a new external link to an event
 */
export const postOrgsOrgSlugEventsEventSlugExternalLink = (
    orgSlug: string,
    eventSlug: string,
    postOrgsOrgSlugEventsEventSlugExternalLinkBody: PostOrgsOrgSlugEventsEventSlugExternalLinkBody,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<string>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/external-link`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrgsOrgSlugEventsEventSlugExternalLinkBody
    },
      options);
    }
  
/**
 * Remove an external link by its ID
 */
export const deleteOrgsOrgSlugEventsEventSlugExternalLinkLinkId = (
    orgSlug: string,
    eventSlug: string,
    linkId: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<null>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/external-link/${linkId}`, method: 'DELETE'
    },
      options);
    }
  
/**
 * List partnerships for an event with filtering options
 */
export const getOrgsOrgSlugEventsEventSlugPartnership = (
    orgSlug: string,
    eventSlug: string,
    params?: GetOrgsOrgSlugEventsEventSlugPartnershipParams,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<PartnershipItem[]>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/partnership`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * Generate a partnership agreement PDF
 */
export const postOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdAgreement = (
    orgSlug: string,
    eventSlug: string,
    partnershipId: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<PostOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdAgreement200>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/partnership/${partnershipId}/agreement`, method: 'POST'
    },
      options);
    }
  
export const postOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdBillingBillingStatus = (
    orgSlug: string,
    eventSlug: string,
    partnershipId: string,
    billingStatus: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<MapString>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/partnership/${partnershipId}/billing/${billingStatus}`, method: 'POST'
    },
      options);
    }
  
/**
 * Assign booth location to a partnership
 */
export const putOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdBoothLocation = (
    orgSlug: string,
    eventSlug: string,
    partnershipId: string,
    boothLocationRequest: BoothLocationRequest,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<BoothLocationResponse>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/partnership/${partnershipId}/booth-location`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: boothLocationRequest
    },
      options);
    }
  
export const postOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdSuggestion = (
    orgSlug: string,
    eventSlug: string,
    partnershipId: string,
    suggestPartnership: SuggestPartnership,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<MapString>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/partnership/${partnershipId}/suggestion`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: suggestPartnership
    },
      options);
    }
  
/**
 * Validate a partnership request
 */
export const postOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdValidate = (
    orgSlug: string,
    eventSlug: string,
    partnershipId: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<MapString>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/partnership/${partnershipId}/validate`, method: 'POST'
    },
      options);
    }
  
/**
 * Decline a partnership request
 */
export const postOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdDecline = (
    orgSlug: string,
    eventSlug: string,
    partnershipId: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<MapString>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/partnership/${partnershipId}/decline`, method: 'POST'
    },
      options);
    }
  
/**
 * Schedule publication date for partnership communication
 */
export const putOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdCommunicationPublication = (
    orgSlug: string,
    eventSlug: string,
    partnershipId: string,
    publicationDateRequest: PublicationDateRequest,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<PublicationDateResponse>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/partnership/${partnershipId}/communication/publication`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: publicationDateRequest
    },
      options);
    }
  
/**
 * Upload visual support material for partnership communication
 */
export const putOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdCommunicationSupport = (
    orgSlug: string,
    eventSlug: string,
    partnershipId: string,
    putOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdCommunicationSupportBody: Blob,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<SupportUploadResponse>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/partnership/${partnershipId}/communication/support`, method: 'PUT',
      headers: {'Content-Type': 'image/png', },
      data: putOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdCommunicationSupportBody
    },
      options);
    }
  
/**
 * Attach providers to an event (requires event write access)
 */
export const postOrgsOrgSlugEventsEventSlugProviders = (
    orgSlug: string,
    eventSlug: string,
    postOrgsOrgSlugEventsEventSlugProvidersBody: string[],
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<string[]>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/providers`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postOrgsOrgSlugEventsEventSlugProvidersBody
    },
      options);
    }
  
/**
 * Remove providers from an event (requires event write access)
 */
export const deleteOrgsOrgSlugEventsEventSlugProviders = (
    orgSlug: string,
    eventSlug: string,
    deleteOrgsOrgSlugEventsEventSlugProvidersBody: string[],
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<string[]>(
      {url: `/orgs/${orgSlug}/events/${eventSlug}/providers`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: deleteOrgsOrgSlugEventsEventSlugProvidersBody
    },
      options);
    }
  
export const getOrgsOrgSlugUsers = (
    orgSlug: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<User[]>(
      {url: `/orgs/${orgSlug}/users`, method: 'GET'
    },
      options);
    }
  
export const postOrgsOrgSlugUsersGrant = (
    orgSlug: string,
    grantPermissionRequest: GrantPermissionRequest,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<string>(
      {url: `/orgs/${orgSlug}/users/grant`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: grantPermissionRequest
    },
      options);
    }
  
export const getUsersMeEvents = (
    
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<EventSummary[]>(
      {url: `/users/me/events`, method: 'GET'
    },
      options);
    }
  
export const getUsersMeOrgs = (
    
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<OrganisationItem[]>(
      {url: `/users/me/orgs`, method: 'GET'
    },
      options);
    }
  
export type GetAuthCallbackResult = NonNullable<Awaited<ReturnType<typeof getAuthCallback>>>
export type GetAuthLoginResult = NonNullable<Awaited<ReturnType<typeof getAuthLogin>>>
export type GetAuthLogoutResult = NonNullable<Awaited<ReturnType<typeof getAuthLogout>>>
export type GetAuthMeResult = NonNullable<Awaited<ReturnType<typeof getAuthMe>>>
export type GetCompaniesResult = NonNullable<Awaited<ReturnType<typeof getCompanies>>>
export type PostCompaniesResult = NonNullable<Awaited<ReturnType<typeof postCompanies>>>
export type PostCompaniesCompanyIdLogoResult = NonNullable<Awaited<ReturnType<typeof postCompaniesCompanyIdLogo>>>
export type GetCompaniesCompanyIdPartnershipResult = NonNullable<Awaited<ReturnType<typeof getCompaniesCompanyIdPartnership>>>
export type GetEventsResult = NonNullable<Awaited<ReturnType<typeof getEvents>>>
export type GetEventsEventSlugResult = NonNullable<Awaited<ReturnType<typeof getEventsEventSlug>>>
export type PostEventsEventSlugPartnershipResult = NonNullable<Awaited<ReturnType<typeof postEventsEventSlugPartnership>>>
export type GetEventsEventSlugPartnershipPartnershipIdBillingResult = NonNullable<Awaited<ReturnType<typeof getEventsEventSlugPartnershipPartnershipIdBilling>>>
export type PostEventsEventSlugPartnershipPartnershipIdBillingResult = NonNullable<Awaited<ReturnType<typeof postEventsEventSlugPartnershipPartnershipIdBilling>>>
export type PutEventsEventSlugPartnershipPartnershipIdBillingResult = NonNullable<Awaited<ReturnType<typeof putEventsEventSlugPartnershipPartnershipIdBilling>>>
export type PostEventsEventSlugPartnershipPartnershipIdBillingInvoiceResult = NonNullable<Awaited<ReturnType<typeof postEventsEventSlugPartnershipPartnershipIdBillingInvoice>>>
export type PostEventsEventSlugPartnershipPartnershipIdBillingQuoteResult = NonNullable<Awaited<ReturnType<typeof postEventsEventSlugPartnershipPartnershipIdBillingQuote>>>
export type PostEventsEventSlugPartnershipPartnershipIdSignedAgreementResult = NonNullable<Awaited<ReturnType<typeof postEventsEventSlugPartnershipPartnershipIdSignedAgreement>>>
export type PostEventsEventSlugPartnershipPartnershipIdSuggestionApproveResult = NonNullable<Awaited<ReturnType<typeof postEventsEventSlugPartnershipPartnershipIdSuggestionApprove>>>
export type PostEventsEventSlugPartnershipPartnershipIdSuggestionDeclineResult = NonNullable<Awaited<ReturnType<typeof postEventsEventSlugPartnershipPartnershipIdSuggestionDecline>>>
export type GetEventsEventSlugPartnershipPartnershipIdTicketsResult = NonNullable<Awaited<ReturnType<typeof getEventsEventSlugPartnershipPartnershipIdTickets>>>
export type PostEventsEventSlugPartnershipPartnershipIdTicketsResult = NonNullable<Awaited<ReturnType<typeof postEventsEventSlugPartnershipPartnershipIdTickets>>>
export type PutEventsEventSlugPartnershipPartnershipIdTicketsTicketIdResult = NonNullable<Awaited<ReturnType<typeof putEventsEventSlugPartnershipPartnershipIdTicketsTicketId>>>
export type GetProvidersResult = NonNullable<Awaited<ReturnType<typeof getProviders>>>
export type PostProvidersResult = NonNullable<Awaited<ReturnType<typeof postProviders>>>
export type PostOrgsResult = NonNullable<Awaited<ReturnType<typeof postOrgs>>>
export type GetOrgsSlugResult = NonNullable<Awaited<ReturnType<typeof getOrgsSlug>>>
export type PutOrgsOrgSlugResult = NonNullable<Awaited<ReturnType<typeof putOrgsOrgSlug>>>
export type GetOrgsOrgSlugEventsResult = NonNullable<Awaited<ReturnType<typeof getOrgsOrgSlugEvents>>>
export type PostOrgsOrgSlugEventsResult = NonNullable<Awaited<ReturnType<typeof postOrgsOrgSlugEvents>>>
export type PutOrgsOrgSlugEventsEventSlugResult = NonNullable<Awaited<ReturnType<typeof putOrgsOrgSlugEventsEventSlug>>>
export type PostOrgsOrgSlugEventsEventSlugBoothPlanResult = NonNullable<Awaited<ReturnType<typeof postOrgsOrgSlugEventsEventSlugBoothPlan>>>
export type PostOrgsOrgSlugEventsEventSlugIntegrationsProviderUsageResult = NonNullable<Awaited<ReturnType<typeof postOrgsOrgSlugEventsEventSlugIntegrationsProviderUsage>>>
export type GetOrgsOrgSlugEventsEventSlugOptionsResult = NonNullable<Awaited<ReturnType<typeof getOrgsOrgSlugEventsEventSlugOptions>>>
export type PostOrgsOrgSlugEventsEventSlugOptionsResult = NonNullable<Awaited<ReturnType<typeof postOrgsOrgSlugEventsEventSlugOptions>>>
export type DeleteOrgsOrgSlugEventsEventSlugOptionsOptionIdResult = NonNullable<Awaited<ReturnType<typeof deleteOrgsOrgSlugEventsEventSlugOptionsOptionId>>>
export type PutOrgsOrgSlugEventsEventSlugOptionsOptionIdResult = NonNullable<Awaited<ReturnType<typeof putOrgsOrgSlugEventsEventSlugOptionsOptionId>>>
export type GetOrgsOrgSlugEventsEventSlugPacksResult = NonNullable<Awaited<ReturnType<typeof getOrgsOrgSlugEventsEventSlugPacks>>>
export type PostOrgsOrgSlugEventsEventSlugPacksResult = NonNullable<Awaited<ReturnType<typeof postOrgsOrgSlugEventsEventSlugPacks>>>
export type DeleteOrgsOrgSlugEventsEventSlugPacksPackIdResult = NonNullable<Awaited<ReturnType<typeof deleteOrgsOrgSlugEventsEventSlugPacksPackId>>>
export type PutOrgsOrgSlugEventsEventSlugPacksPackIdResult = NonNullable<Awaited<ReturnType<typeof putOrgsOrgSlugEventsEventSlugPacksPackId>>>
export type PostOrgsOrgSlugEventsEventSlugPacksPackIdOptionsResult = NonNullable<Awaited<ReturnType<typeof postOrgsOrgSlugEventsEventSlugPacksPackIdOptions>>>
export type DeleteOrgsOrgSlugEventsEventSlugPacksPackIdOptionsOptionIdResult = NonNullable<Awaited<ReturnType<typeof deleteOrgsOrgSlugEventsEventSlugPacksPackIdOptionsOptionId>>>
export type GetOrgsOrgSlugEventsEventSlugCommunicationResult = NonNullable<Awaited<ReturnType<typeof getOrgsOrgSlugEventsEventSlugCommunication>>>
export type PostOrgsOrgSlugEventsEventSlugExternalLinkResult = NonNullable<Awaited<ReturnType<typeof postOrgsOrgSlugEventsEventSlugExternalLink>>>
export type DeleteOrgsOrgSlugEventsEventSlugExternalLinkLinkIdResult = NonNullable<Awaited<ReturnType<typeof deleteOrgsOrgSlugEventsEventSlugExternalLinkLinkId>>>
export type GetOrgsOrgSlugEventsEventSlugPartnershipResult = NonNullable<Awaited<ReturnType<typeof getOrgsOrgSlugEventsEventSlugPartnership>>>
export type PostOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdAgreementResult = NonNullable<Awaited<ReturnType<typeof postOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdAgreement>>>
export type PostOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdBillingBillingStatusResult = NonNullable<Awaited<ReturnType<typeof postOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdBillingBillingStatus>>>
export type PutOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdBoothLocationResult = NonNullable<Awaited<ReturnType<typeof putOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdBoothLocation>>>
export type PostOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdSuggestionResult = NonNullable<Awaited<ReturnType<typeof postOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdSuggestion>>>
export type PostOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdValidateResult = NonNullable<Awaited<ReturnType<typeof postOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdValidate>>>
export type PostOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdDeclineResult = NonNullable<Awaited<ReturnType<typeof postOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdDecline>>>
export type PutOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdCommunicationPublicationResult = NonNullable<Awaited<ReturnType<typeof putOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdCommunicationPublication>>>
export type PutOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdCommunicationSupportResult = NonNullable<Awaited<ReturnType<typeof putOrgsOrgSlugEventsEventSlugPartnershipPartnershipIdCommunicationSupport>>>
export type PostOrgsOrgSlugEventsEventSlugProvidersResult = NonNullable<Awaited<ReturnType<typeof postOrgsOrgSlugEventsEventSlugProviders>>>
export type DeleteOrgsOrgSlugEventsEventSlugProvidersResult = NonNullable<Awaited<ReturnType<typeof deleteOrgsOrgSlugEventsEventSlugProviders>>>
export type GetOrgsOrgSlugUsersResult = NonNullable<Awaited<ReturnType<typeof getOrgsOrgSlugUsers>>>
export type PostOrgsOrgSlugUsersGrantResult = NonNullable<Awaited<ReturnType<typeof postOrgsOrgSlugUsersGrant>>>
export type GetUsersMeEventsResult = NonNullable<Awaited<ReturnType<typeof getUsersMeEvents>>>
export type GetUsersMeOrgsResult = NonNullable<Awaited<ReturnType<typeof getUsersMeOrgs>>>
